["function _9f1bc3578d0374cabc5b54a9bf9e7849617a098e(){};",84144,37,92,1048484,1048576,165403,"Menu}'s are used with {@link Ext.Viewport#setMenu}. A menu can be linked with any side of the screen (top, left, bottom or right)\n *  and will simply describe the contents of your menu. To use this menu you will call various menu related functions on the {@link Ext.Viewport}\n * such as {@link Ext.Viewport#showMenu}, {@link Ext.Viewport#hideMenu}, {@link Ext.Viewport#toggleMenu}, {@link Ext.Viewport#hideOtherMenus},\n * or {@link Ext.Viewport#hideAllMenus}.\n *\n *      @example preview\n *      var menu = Ext.create('Ext.Menu', {\n * ",740719,33," {\n *                  text: 'Settings',\n *                  iconCls: 'settings'\n *",1572799,33,"{\n *                  text: 'New Item',\n *                  iconCls: 'compose'\n *",1572799,33,"{\n *                  text: 'Star',\n *                  iconCls: 'star'\n *",1099102,57,"Viewport.setMenu(menu, {\n *          side: 'left',\n *          reveal: true\n *      });\n *\n *      Ext.Viewport.showMenu('left');",1218750,35,"a Menu item is a {@link Ext.Button button}.\n */\r\nExt.define('Ext.Menu",1279282,34,"xtype: 'menu",1042304,122,"enu",1279408,76,1042702,50,1117216,32,1042778,51,1117216,33,"ottom",1042783,46,1117216,32,"height",976415,38,1526608,45,"width",976415,38,1526608,45,1287533,32,"/**",1042816,39,"showAnima",1679376,37,"hide",1127375,37,"null,\r\n        /**",1042816,39,"center",1790688,36,"hid",1281829,61,"hide\n         */",1019025,33,"/**",1042816,39,"hideOnMaskTap",1333792,33,"hide\n         */",977614,58,"null",2228699,65,"config.translatable",1990149,93,1208752,41,1255183,77,"\r\n            ]",1282302,110,"context',\r\n",2260720,39,"pack: 'center'",7776,32,"],\r\n",776283,48,1037552,33,"    if (newUi != oldUi && ",1960633,40,"if (newUi == 'context') {\r\n",799097,34,"swapCls('x-vertical', 'x-horizontal');\r\n            } else if (newUi == 'application') {\r\n",799097,34,"swapCls('x-horizontal', 'x-vertical",21152,36,1060343,159,339439,34,"Viewport.hideMenu(this.$side);",1613407,34,"\r\n    },\r\n    /**\n     * Only fire the hide event if it is initialized\n     */\r\n    doSetHidde",1428462,34,1239130,33,2057024,32,"}\r\n    }\r\n",1213954,89639,"SegmentedButton is a container for a group of {@link Ext.Button}s. Generally a SegmentedButton would be\n * a child of a {@link Ext.Toolbar} and would be used to switch between different views.\n *\n * ## Ex",957595,43,"segmentedButton = Ext.create('Ext.SegmentedButton', {\n *         allowMultiple",1261532,64,"text: 'Option 1",1396816,56,"text: 'Option 2',\n *                 pressed: true",1219312,55,"text: 'Option 3",944584,44,"listeners: {\n *             toggle: function(container, button, pressed){\n *                 alert(\"User toggled the '\" + button.getText() + \"' button: \" + (pressed ? 'on' : 'off')",1174430,40,1106613,71,"segmentedButton] });\n */\r\nExt.define('Ext.SegmentedButton",2263760,38,"xtype: 'segmentedbutton",1042304,121,"segmented",1222448,47,"pressedCls\n         * CSS class when a button is in pressed stat",1861216,45,2178075,33,"button",2178111,41,"Boolean} allowMultiple\n         * Allow multiple pressed buttons",1478192,49,"Multiple",1618736,48,"allowDepress\n         * Allow toggling the pressed state of each button.\n         * Defaults to `true` when {@link #allowMultiple}",1531120,54,"allowDepr",1566288,42,"Boolean} allowToggle Allow child buttons to be pressed when tapped on. Set to `false` to allow tapping but not toggling of the buttons",1478192,49,"Toggle",1333792,38,"Array} pressedButtons\n         * The pressed buttons for this segmented button",750808,32,"remove all pressed buttons by calling {@link #setPressedButtons} with an empty arra",1339839,45,"pressedButton",1341199,35,2186496,75,"hbox',\r\n",1224326,38,2145983,76,"defaultType: 'button'",1042864,33,"oggle\n     * Fires when any child button's pressed state",972859,33,"SegmentedButton} this\n     * @param {Ext.Button} button The toggled button.\n     * @param {Boolean} isPressed Boolean to indicate if the button was pressed or not.",1043053,48,958623,38,2181553,33,"delegate: '> button',",1234250,38,"tap: 'onButtonRelease'\r\n        });\r\n        me.onAfter({\r\n            delegate: '> button',",1234250,38,"hide: 'onButtonHiddenChange',\r\n            show: 'onButtonHiddenChange'",980378,33,"AllowMultiple: function(allowMultiple) {\r\n        if (!this.initialized && !this.getInitialConfig().hasOwnProperty('allowDepress') && allowMultiple) {\r\n            this.setAllowDepress(",838158,42,"We override `initItems` so we can check for the pressed config.\n     */\r\n    apply",2025117,57,"pressedButtons = [],\r\n            ln, i, item, items;\r\n        //call the parent first so the items get converted into a MixedCollection",1057408,41,"    items = this.getItems();\r\n",1470677,41,1465984,47,".",2032562,32,"getInitialConfig('pressed')) {\r\n                pressedButtons.push(items.item",922974,32,"\r\n        me.updateFirstAndLastCls(items);\r\n        me.setPressedButtons(pressedButtons);\r\n    },\r\n    /**\n     * Button sets a timeout of 10ms to remove the {@link #pressedCls} on the release event.\n     * We don't want this to happen, so lets return `false` and cancel the ev",1121885,34,"onButtonRelease",1290638,34,"!this.getAllowToggle",1486303,47,"var me = this,\r\n            pressedButtons = me.getPressedButtons() || [],\r\n            buttons = [],\r\n            alreadyPressed",1123791,32," && !button.getDisabled()) {\r\n            //if we allow for multiple pressed buttons, use the existing pressed buttons\r\n            if (me.getAllowMultiple()) {\r\n                buttons = pressedButtons.concat(button",110848,32,"alreadyPressed = (buttons.indexOf(button) !== -1) || (pressedButtons.indexOf(button) !== -1);\r\n            //if we allow for depressing buttons, and the new pressed button is currently pressed, remove it\r\n            if (alreadyPressed && me.getAllowDepress()) {\r\n",137534,33,"buttons, button);\r\n            } else if (!alreadyPressed || !me.getAllowDepress()) {\r\n                buttons.push(butt",1905039,33,"me.setPressedButtons(buttons",841100,33,"Add",1471342,33,1202207,33,"updateFirstAndLastCls(this.getItems()",839861,39,2057006,55,"updateFirstAndLastCls(this.getItems())",1123584,34,"ButtonHidden",1336176,35,"updateFirstAndLastCls(this.getItems()",1269183,39,"FirstAndLastCl",906015,34,1070304,32,"base",2198898,41,"firstCls = basePrefix + 'first',\r\n            lastCls = basePrefix + 'last'",1087543,33,"//remove all existing classes",1436368,50,"item = items.",2021338,38,"firstCls);\r\n            item.removeCls(lastCls);\r\n        }\r\n        //add a first cls to the first non-hidden button",1436368,50,"item = items.items[i];\r\n            if (!item",2212650,32,"item.addCls(firstCls",832091,62,"//add a last cls to the last non-hidden button\r\n        for (i = ln",1074666,34,"item = items.items[i];\r\n            if (!item",2212650,32,"item.addCls(lastCls",832091,58,1062208,46,"Pressed",1286677,54,",\r\n",67034,37,"button, ln, i;\r\n        if (me.getAllowToggle()) {\r\n            if (Ext.isArray(newButtons)) {\r\n                ln = newButtons.length;",48368,34,86768,32,"button = me.getComponent(newButtons[i]);\r\n                    if (button && array.indexOf(button",68528,37,"array.push(button",300016,59," else {\r\n                button = me.getComponent(newButtons);\r\n                if (button && array.indexOf(button",68528,33,"array.push(butt",1904799,38,49696,41,",\r\n    /**\n     * Updates the pressed buttons",1286640,37,"PressedButtons: function(newButtons, oldButt",2162591,45,1497373,35,"pressedCls =",1541696,34,"events = [],\r\n            item, button, ln, i, e;\r\n        //loop through existing items and remove the pressed cls from them\r\n",1470677,36,"if (oldButtons && oldButtons",2011727,34,74240,41,"items.items[i];\r\n                if (oldButtons.indexOf(item) != -1 && newButtons.indexOf(item) == -1)",1540548,39,"[\r\n    ",1503880,53,"    item.getPressedCls()\r\n    ",1541759,33,"        even",86988,35,"item:",1068877,32,"toggle: false",6010,58,"}\r\n        }\r\n        //loop through the new pressed buttons and add the pressed cls to them\r\n        ln = newButton",2104125,36,"n; i++) {\r\n            button = newButtons[i];\r\n            if (!oldButtons || oldButtons.indexOf(button) == -1) {\r\n                button",1124040,38,"events.push({\r\n                    item: button,\r\n                    tog",801336,44,"}\r\n        }\r\n        //loop through each of the events and fire them after a delay\r\n        ln = events.length;\r\n        if (ln && oldButtons !",577647,33,1391386,36,781520,48,551758,32,"    me.fireEvent('toggle', me, e.item, e.toggle",18224,36,", 50",1244464,56,"a specified {@link Ext.Button} is pres",1112846,32,"button The button to check if pressed.\n     * @return {Boolean} pressed\n     */\r\n    isPressed: function(button) {\r\n        var pressedButtons = this.getPressedButtons();\r\n        return pressedButtons.indexOf(button",499967,33,"@private\n     */\r\n",796896,49,1069544,33,1436784,35,"item",1270841,34,", me)",1057407,43,1417792,32,1345436,49,1303643,114173,"(function() {\r\n    /**\n     * Represents an RGB color and provides helper functions on it e.g. to get\n     * color components in HSL color space.\n     */\r\n    Ext.define('Ext.draw.Color', {\r\n",2170084,32,"colorToHexRe: /(.*?)rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/,\r\n            rgbToHexRe: /\\s*rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/,\r\n            rgbaToHexRe: /\\s*rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+),\\s*([\\.\\d]+)\\)/,\r\n            hexRe: /\\s*#([0-9a-fA-F][0-9a-fA-F]?)([0-9a-fA-F][0-9a-fA-F]?)([0-9a-fA-F][0-9a-fA-F]?)\\s*/\r\n        },\r\n        isColor",1565712,46,"lightnessFactor",1665874,35,"factor to compute the lighter or darker color.\n         */\r\n        lightnessFactor: 0.2,\r\n        /**\n         * @constructor\n         * @param {Number} red Red component (0..255)\n         * @param {Number} green Green component (0..255)\n         * @param {Number} blue Blue component (0..255)\n         * @param {Number} [alpha=1] (optional) Alpha component (0..1)",22930,44,"red, green, blue, alpha) {\r\n            this.setRGB(red, green, blue, alpha);\r\n        },\r\n        setRGB: function(red, green, blue, alpha",806333,45,"me.r = Math.min(255, Math.max(0, red));\r\n            me.g = Math.min(255, Math.max(0, green));\r\n            me.b = Math.min(255, Math.max(0, blue));\r\n            if (alpha",4048,35,"me.a = 1",1069056,44,"a = Math.min(1, Math.max(0, alpha)",414416,54,"Returns the gray value (0 to 255) of the color.\n         *\n         * The gray value is calculated using the formula r*0.3 + g*0.59 + b*0.11",133891,33,"Number}\n         */\r\n        getGrayscale: function() {\r\n            // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\r\n            return this.r * 0.3 + this.g * 0.59 + this.b * 0.11",16624,38,"Get the equivalent HSL components of the color.\n         * @param {Array} [target] Optional array to receive the values",57770,50,"getHSL",28176,34,219216,32,"r = me.r / 255,\r\n                g = me.g / 255,\r\n                b = me.b / 255,",1015251,33,"r, g, b),",1015208,33,"r, g, b),\r\n                delta = max - min,\r\n                h,\r\n                s = 0,\r\n                l = 0.5 * (max + min);\r\n            // min==max means achromatic (hue is undefined)\r\n            if (min !== max) {\r\n                s = (l < 0.5) ? delta / (max + min) : delta / (2 - max - min);\r\n                if (r === max) {\r\n                    h = 60 * (g - b) / delta;\r\n                } else if (g === max) {\r\n                    h = 120 + 60 * (b - r) / delta",283744,49,"h = 240 + 60 * (r - g) / delta",254096,42,"h < 0) {\r\n                    h += 36",68080,35,"    if (h >= 360) {\r\n                    h -= 36",68080,36,"\r\n            if (target) {\r\n                target[0] = h;\r\n                target[1] = s;\r\n                target[2] = l",1444032,42,"arget = [\r\n                    h,\r\n                    s,\r\n                    l",1760237,34,"}\r\n            return targ",59278,40,"Set current color based on the specified HSL value",425040,33,"Number} h Hue component (0..359)\n         * @param {Number} s Saturation component (0..1)\n         * @param {Number} l Lightness component (0..1)\n         * @return this\n         */\r\n        setHSL: function(h, s, l) {\r\n            var c, x, m,\r\n                abs = Math.abs,\r\n                floor = Math.floor;\r\n            h = (h % 360 + 360) % 360;\r\n            s = s > 1 ? 1 : s < 0 ? 0 : s;\r\n            l = l > 1 ? 1 : l < 0 ? 0 : l;\r\n            if (s === 0 || h === null) {\r\n                l *= 255;\r\n                this.setRGB(l, l, l",395584,42,"// http://en.wikipedia.org/wiki/HSL_and_HSV#From_HSL\r\n                // C is the chroma\r\n                // X is the second largest component\r\n                // m is the lightness adjustment\r\n                h /= 60;\r\n                c = s * (1 - abs(2 * l - 1));\r\n                x = c * (1 - abs(h - 2 * floor(h / 2) - 1));\r\n                m = l - c / 2;\r\n                m *= 255;\r\n                c *= 255;\r\n                x *= 255;\r\n                switch (floor(h)) {\r\n                    case 0:",1039109,32,"etRGB(c + m, x + m, m);",68539,54,"case 1:",1039109,32,"etRGB(x + m, c + m, m);",68539,54,"case 2:",1039109,32,"etRGB(m, c + m, x + m);",68539,54,"case 3:",1039109,32,"etRGB(m, x + m, c + m);",68539,54,"case 4:",1039109,32,"etRGB(x + m, m, c + m);",68539,54,"case 5:",1039109,32,"etRGB(c + m, m, x + m);",68539,50,416240,37,175936,42,"Return a new color that is lighter than this color.\n         * @param {Number} [factor=0.2] Lighter factor (0..1).\n         * @return {Ext.draw.Color}\n         */\r\n        createLighter: function(factor) {\r\n            var hsl = this.getHSL();\r\n            factor = factor || this.lightnessFactor;\r\n            // COMPAT Ext.util.Numbers -> Ext.Number\r\n            hsl[2] = hsl[2] + factor;\r\n            if (hsl[2] > 1) {\r\n                hsl[2] = 1;\r\n            } else if (hsl[2] < 0) {\r\n                hsl[2",406175,35,"return Ext.draw.Color.fromHSL(hsl[0], hsl[1], hsl[2]",137888,39,"Return a new color that is darker than this color.\n         * @param {Number} [factor=0.2] Darker factor (0..1).\n         * @return {Ext.draw.Color}\n         */\r\n        createDarker: function(factor) {\r\n            factor = factor || this.lightnessFactor;\r\n            return this.createLighter(-factor",137888,39,"Return the color in the hex format, i.e. '#rrggbb'.",9584,51,"oString:",1376688,36,"a === 1) {\r\n    ",116158,44,"    round = Math.round,\r\n                    r = round(me.r).toString(16),\r\n                    g = round(me.g).toString(16),\r\n                    b = round(me.b).toString(16);\r\n                r = (r.length === 1) ? '0' + r : r;\r\n                g = (g.length === 1) ? '0' + g : g;\r\n                b = (b.length === 1) ? '0' + b : b;\r\n    ",65252,38,"    '#',\r\n                    r,\r\n                    g,\r\n                    b\r\n                ].join",806510,45,"return 'rgba(' + [\r\n                    Math.round(this.r),\r\n                    Math.round(this.g),\r\n                    Math.round(this.b),\r\n                    this.a.toFixed(15)\r\n                ].join(',') + ')'",294352,53,"Convert a color to hexadecimal format",219024,38,"/Array} color The color value (i.e 'rgb(255, 255, 255)', 'color: #ffffff').\n         * Can also be an Array, in this case the function handles the first member.",414558,33,"color in hexadecimal format.\n         */\r\n        toHex: function(color) {\r\n            if (Ext.isArray(color)) {\r\n                color = color[0",1775,35,"!Ext.isString(color)) {\r\n    ",2153112,32,"    }\r\n            if (color.substr(0, 1)",2077790,36,"color",58191,34,"digits = Ext.draw.Color.colorToHexRe.exec(color",1009399,32,"digits)) {\r\n                var red = parseInt(digits[2], 10),\r\n                    green = parseInt(digits[3], 10),\r\n                    blue = parseInt(digits[4], 10),\r\n                    rgb = blue | (green << 8) | (red << 16);\r\n                return digits[1] + '#' + (\"000000\" + rgb.toString(16)).slice(-6",395584,42,"return ''",294352,53,"Parse the string and set current color.\n         *\n         * Supported formats: '#rrggbb', '#rgb', and 'rgb(r,g,b)'.\n         *\n         * If the string is not recognized, an `undefined` will be returned instead",219024,40,"str Color in string.\n         * @return this\n         */\r\n        setFromString: function(str) {\r\n            var values, r, g, b,\r\n                a = 1,\r\n                parse = parseInt;\r\n            if (str === 'none') {\r\n                this.r = this.g = this.b = this.a = 0",287980,60,"if ((str.length === 4 || str.length === 7) && str.substr(0, 1) === '#') {\r\n                values = str.match(Ext.draw.Color.hexRe);\r\n                if (values) {\r\n                    r = parse(values[1], 16) >> 0;\r\n                    g = parse(values[2], 16) >> 0;\r\n                    b = parse(values[3], 16) >> 0;\r\n                    if (str.length === 4) {\r\n                        r += (r * 16);\r\n                        g += (g * 16);\r\n                        b += (b * 16",300016,59," else if ((values = str.match(Ext.draw.Color.rgbToHexRe))) {\r\n                r = +values[1];\r\n                g = +values[2];\r\n                b = +values[3];\r\n            } else if ((values = str.match(Ext.draw.Color.rgbaToHexRe))) {\r\n                r = +values[1];\r\n                g = +values[2];\r\n                b = +values[3];\r\n                a = +values[4]",1436960,45,"Ext.draw.Color.ColorList.hasOwnProperty(str.toLowerCase()",38767,33,"this.setFromString(Ext.draw.Color.ColorList[str.toLowerCase()",1794896,36,"}\r\n            if (typeof r =",556960,35,281648,41,"this.r = r;\r\n            this.g = g;\r\n            this.b = b;\r\n            this.a = a",269328,38,"\r\n    }, function() {\r\n        var flyColor = new this();\r\n        this.addStatics({",265792,33,"Returns a flyweight instance of Ext.draw.Color",266096,32,"Can be called with either a CSS color string or with separate\n             * arguments for red, green, blue, alpha.\n             * \n             * @param {Number/String} red Red component (0..255) or CSS color string.\n             * @param {Number} [green] Green component (0..255)\n             * @param {Number} [blue] Blue component (0..255)\n             * @param {Number} [alpha=1] Alpha component (0..1)\n             * @return {Ext.draw.Color}\n             * @static\n             */\r\n            fly: function(r, g, b, a) {\r\n                switch (argument",1892094,33,"case 1:\r\n                        flyColor.setFromString(r);",68539,54,"case 3:\r\n                    case 4:\r\n                        flyColor.setRGB(r, g, b, a);",68539,54,410508,34,1654684,49,"return flyCol",236472,33,"ColorList: {\r\n                \"aliceblue\": \"#f0f8ff\",\r\n                \"antiquewhite\": \"#faebd7\",\r\n                \"aqua\": \"#00ffff\",\r\n                \"aquamarine\": \"#7fffd4\",\r\n                \"azure\": \"#f0ffff\",\r\n                \"beige\": \"#f5f5dc\",\r\n                \"bisque\": \"#ffe4c4\",\r\n                \"black\": \"#000000\",\r\n                \"blanchedalmond\": \"#ffebcd\",\r\n                \"blue\": \"#0000ff\",\r\n                \"blueviolet\": \"#8a2be2\",\r\n                \"brown\": \"#a52a2a\",\r\n                \"burlywood\": \"#deb887\",\r\n                \"cadetblue\": \"#5f9ea0\",\r\n                \"chartreuse\": \"#7fff00\",\r\n                \"chocolate\": \"#d2691e\",\r\n                \"coral\": \"#ff7f50\",\r\n                \"cornflowerblue\": \"#6495ed\",\r\n                \"cornsilk\": \"#fff8dc\",\r\n                \"crimson\": \"#dc143c\",\r\n                \"cyan\": \"#00ffff\",\r\n                \"darkblue\": \"#00008b\",\r\n                \"darkcyan\": \"#008b8b\",\r\n                \"darkgoldenrod\": \"#b8860b\",\r\n                \"darkgray\": \"#a9a9a9\",\r\n                \"darkgreen\": \"#006400\",\r\n                \"darkkhaki\": \"#bdb76b\",\r\n                \"darkmagenta\": \"#8b008b\",\r\n                \"darkolivegreen\": \"#556b2f\",\r\n                \"darkorange\": \"#ff8c00\",\r\n                \"darkorchid\": \"#9932cc\",\r\n                \"darkred\": \"#8b0000\",\r\n                \"darksalmon\": \"#e9967a\",\r\n                \"darkseagreen\": \"#8fbc8f\",\r\n                \"darkslateblue\": \"#483d8b\",\r\n                \"darkslategray\": \"#2f4f4f\",\r\n                \"darkturquoise\": \"#00ced1\",\r\n                \"darkviolet\": \"#9400d3\",\r\n                \"deeppink\": \"#ff1493\",\r\n                \"deepskyblue\": \"#00bfff\",\r\n                \"dimgray\": \"#696969\",\r\n                \"dodgerblue\": \"#1e90ff\",\r\n                \"firebrick\": \"#b22222\",\r\n                \"floralwhite\": \"#fffaf0\",\r\n                \"forestgreen\": \"#228b22\",\r\n                \"fuchsia\": \"#ff00ff\",\r\n                \"gainsboro\": \"#dcdcdc\",\r\n                \"ghostwhite\": \"#f8f8ff\",\r\n                \"gold\": \"#ffd700\",\r\n                \"goldenrod\": \"#daa520\",\r\n                \"gray\": \"#808080\",\r\n                \"green\": \"#008000\",\r\n                \"greenyellow\": \"#adff2f\",\r\n                \"honeydew\": \"#f0fff0\",\r\n                \"hotpink\": \"#ff69b4\",\r\n                \"indianred \": \"#cd5c5c\",\r\n                \"indigo \": \"#4b0082\",\r\n                \"ivory\": \"#fffff0\",\r\n                \"khaki\": \"#f0e68c\",\r\n                \"lavender\": \"#e6e6fa\",\r\n                \"lavenderblush\": \"#fff0f5\",\r\n                \"lawngreen\": \"#7cfc00\",\r\n                \"lemonchiffon\": \"#fffacd\",\r\n                \"lightblue\": \"#add8e6\",\r\n                \"lightcoral\": \"#f08080\",\r\n                \"lightcyan\": \"#e0ffff\",\r\n                \"lightgoldenrodyellow\": \"#fafad2\",\r\n                \"lightgray\": \"#d3d3d3\",\r\n                \"lightgrey\": \"#d3d3d3\",\r\n                \"lightgreen\": \"#90ee90\",\r\n                \"lightpink\": \"#ffb6c1\",\r\n                \"lightsalmon\": \"#ffa07a\",\r\n                \"lightseagreen\": \"#20b2aa\",\r\n                \"lightskyblue\": \"#87cefa\",\r\n                \"lightslategray\": \"#778899\",\r\n                \"lightsteelblue\": \"#b0c4de\",\r\n                \"lightyellow\": \"#ffffe0\",\r\n                \"lime\": \"#00ff00\",\r\n                \"limegreen\": \"#32cd32\",\r\n                \"linen\": \"#faf0e6\",\r\n                \"magenta\": \"#ff00ff\",\r\n                \"maroon\": \"#800000\",\r\n                \"mediumaquamarine\": \"#66cdaa\",\r\n                \"mediumblue\": \"#0000cd\",\r\n                \"mediumorchid\": \"#ba55d3\",\r\n                \"mediumpurple\": \"#9370d8\",\r\n                \"mediumseagreen\": \"#3cb371\",\r\n                \"mediumslateblue\": \"#7b68ee\",\r\n                \"mediumspringgreen\": \"#00fa9a\",\r\n                \"mediumturquoise\": \"#48d1cc\",\r\n                \"mediumvioletred\": \"#c71585\",\r\n                \"midnightblue\": \"#191970\",\r\n                \"mintcream\": \"#f5fffa\",\r\n                \"mistyrose\": \"#ffe4e1\",\r\n                \"moccasin\": \"#ffe4b5\",\r\n                \"navajowhite\": \"#ffdead\",\r\n                \"navy\": \"#000080\",\r\n                \"oldlace\": \"#fdf5e6\",\r\n                \"olive\": \"#808000\",\r\n                \"olivedrab\": \"#6b8e23\",\r\n                \"orange\": \"#ffa500\",\r\n                \"orangered\": \"#ff4500\",\r\n                \"orchid\": \"#da70d6\",\r\n                \"palegoldenrod\": \"#eee8aa\",\r\n                \"palegreen\": \"#98fb98\",\r\n                \"paleturquoise\": \"#afeeee\",\r\n                \"palevioletred\": \"#d87093\",\r\n                \"papayawhip\": \"#ffefd5\",\r\n                \"peachpuff\": \"#ffdab9\",\r\n                \"peru\": \"#cd853f\",\r\n                \"pink\": \"#ffc0cb\",\r\n                \"plum\": \"#dda0dd\",\r\n                \"powderblue\": \"#b0e0e6\",\r\n                \"purple\": \"#800080\",\r\n                \"red\": \"#ff0000\",\r\n                \"rosybrown\": \"#bc8f8f\",\r\n                \"royalblue\": \"#4169e1\",\r\n                \"saddlebrown\": \"#8b4513\",\r\n                \"salmon\": \"#fa8072\",\r\n                \"sandybrown\": \"#f4a460\",\r\n                \"seagreen\": \"#2e8b57\",\r\n                \"seashell\": \"#fff5ee\",\r\n                \"sienna\": \"#a0522d\",\r\n                \"silver\": \"#c0c0c0\",\r\n                \"skyblue\": \"#87ceeb\",\r\n                \"slateblue\": \"#6a5acd\",\r\n                \"slategray\": \"#708090\",\r\n                \"snow\": \"#fffafa\",\r\n                \"springgreen\": \"#00ff7f\",\r\n                \"steelblue\": \"#4682b4\",\r\n                \"tan\": \"#d2b48c\",\r\n                \"teal\": \"#008080\",\r\n                \"thistle\": \"#d8bfd8\",\r\n                \"tomato\": \"#ff6347\",\r\n                \"turquoise\": \"#40e0d0\",\r\n                \"violet\": \"#ee82ee\",\r\n                \"wheat\": \"#f5deb3\",\r\n                \"white\": \"#ffffff\",\r\n                \"whitesmoke\": \"#f5f5f5\",\r\n                \"yellow\": \"#ffff00\",\r\n                \"yellowgreen\": \"#9acd32",622512,33,"*\n             * Create a new color based on the specified HSL value",266095,33,"@param {Number} h Hue component (0..359)\n             * @param {Number} s Saturation component (0..1)\n             * @param {Number} l Lightness component (0..1)\n             * @return {Ext.draw.Color}\n             * @static\n             */\r\n            fromHSL: function(h, s, l",65015,32," this(0,0,0,0)).setHSL(h, s, l",20752,32,"/**\n             * Parse the string and create a new color",266096,32,"Supported formats: '#rrggbb', '#rgb', and 'rgb(r,g,b)'",266096,32,"If the string is not recognized, an undefined will be returned instead",266096,32,"@param {String} string Color in string.\n             * @returns {Ext.draw.Color}\n             * @static\n             */\r\n            fromString: function(string",65015,32," this(0,0,0,0)).setFromString(string",20752,32,"/**",2170768,39,"creating a color.\n             * \n             * Can be called with several different combinations of arguments:\n             * \n             *     // Ext.draw.Color is returned unchanged.\n             *     Ext.draw.Color.create(new Ext.draw.color(255, 0, 0, 0));\n             * \n             *     // CSS color string.\n             *     Ext.draw.Color.create(\"red\");\n             * \n             *     // Array of red, green, blue, alpha\n             *     Ext.draw.Color.create([255, 0, 0, 0]);\n             * \n             *     // Separate arguments of red, green, blue, alpha\n             *     Ext.draw.Color.create(255, 0, 0, 0);\n             * \n             *     // Returns black when no arguments given.\n             *     Ext.draw.Color.create();\n             * \n             * @param {Ext.draw.Color/String/Number[]/Number} [red] Red component (0..255),\n             * CSS color string or array of all components.\n             * @param {Number} [green] Green component (0..255)\n             * @param {Number} [blue] Blue component (0..255)\n             * @param {Number} [alpha=1] Alpha component (0..1)\n             * @return {Ext.draw.Color}\n             * @static\n    ",226326,42,"arg) {\r\n                if (arg instanceof thi",36624,33,"arg;\r\n",1146686,33,"Array(arg",38767,33,"new Ext.draw.Color(arg[0],arg[1],arg[2],arg[3",1186032,32,"Ext.isString(arg",38767,33,"Ext.draw.Color.fromString(arg",680896,32,"rguments",1018527,32,"    return new Ext.draw.Color(arguments[0],arguments[1],arguments[2],arguments[3]",126960,57,"new Ext.draw.Color(0,0,0,0",202576,47,");\r\n    });\r\n})();\r\n\r\n(function() {\r\n    function compute(from, to, delta) {\r\n        return from + (to - from) * delta;\r\n    }",1408848,34,"class Ext.draw.sprite.AnimationParser\n     *\n     * Parsers for sprite attributes used in animations.\n     */\r\n    Ext.define(\"Ext.draw.sprite.AnimationParser\"",1003216,39,"attributeRe: /^url\\(#([a-zA-Z\\-]+)\\)$/,\r\n        color: {\r\n            parseInitial: function(color1, color2",1386458,38,"color1)) {\r\n                    color1 = Ext.draw.Color.create(color1",87936,39,"if (Ext.isString(color2)) {\r\n                    color2 = Ext.draw.Color.create(color2",87936,39,"if ((color1 instanceof Ext.draw.Color) && (color2 instanceof Ext.draw.Color",38767,33,"[\r\n                       ",659152,32,"color1.r,",5074,32,"lor1.g,",5074,32,"lor1.b,",5074,32,"lor1.a\r\n        ",1961726,36,"       ",659152,32,"color2.r,",5074,32,"lor2.g,",5074,32,"lor2.b,",5074,32,"lor2.a",1961413,49,"]",283744,49,"return [\r\n                        color1 || color2,\r\n                        color2 || color1\r\n    ",1760239,36,"}",561615,32,"mpute: function(from, to, delta) {\r\n",1180045,33,"from) || !Ext.isArray(t",126912,34,"to || from",283744,49,"return [\r\n                        compute(from[0], to[0], delta),\r\n                        compute(from[1], to[1], delta),\r\n                        compute(from[2], to[2], delta),\r\n                        compute(from[3], to[3], delta)\r\n    ",1760239,36,1297766,32,"erve",74862,33,"    var color = Ext.draw.Color.fly(array[0], array[1], array[2], array[3]);\r\n                return color.toString",1010848,40,"number: {\r\n            parse: function(n) {\r\n                return n === null ? null : +n",561614,33,"mpute: function(from, to, delta) {\r\n                if (!Ext.isNumber(from) || !Ext.isNumber(t",126912,34,"to || from",283744,49,"return compute(from, to, delta",202576,47,",\r\n        angle: {\r\n            parseInitial",1503278,32,"        if (to - from > Math.PI) {\r\n                    to -= Math.PI * 2;\r\n                } else if (to - from < -Math.PI) {\r\n                    to += Math.PI * 2",254096,38,"return [\r\n                    from,\r\n                    to",1760237,34,"},\r\n            compute: function(from, to, delta) {\r\n                if (!Ext.isNumber(from) || !Ext.isNumber(t",126912,34,"to || from",283744,49,"return compute(from, to, delta",202576,47,",\r\n        path: {\r\n            parseInitial",1503278,32,"        var fromStripes = from.toStripes(),\r\n                    toStripes = to.toStripes(),\r\n                    i, j,\r\n                    fromLength = fromStrip",103319,32,"toLength = toStrip",103319,32,"fromStripe, toStripe, length,\r\n                    lastStripe = toStripes[toLength - 1],\r\n                    endPoint = [\r\n                        lastStripe[lastStripe.length - 2],\r\n                        lastStripe[lastStripe.length - 1]\r\n    ",1760239,36,"for (i = fromLength; i < to",179086,32,"    fromStripes.push(fromStripes[fromLength - 1].slice(0",193103,40,"for (i = toLength; i < from",179086,32,"    toStripes.push(endPoint.slice(0",193103,40,"length = fromStripes.length;\r\n                toStripes.path = to;\r\n                toStripes.temp = new Ext.draw.Path();",48368,34,55615,32,"    fromStripe = fromStripes[i];\r\n                    toStripe = toStripes[i];\r\n                    fromLength = fromStripe.length;\r\n                    toLength = toStripe.length;\r\n                    toStripes.temp.types.push('M'",2074327,33,"toLength; j < fromLength; j += 6) {\r\n                        toStripe.push(endPoint[0], endPoint[1], endPoint[0], endPoint[1], endPoint[0], endPoint[1]",160448,47,"lastStripe = toStripes[toStripe",1387049,36,"endPoint = [\r\n                        lastStripe[lastStripe.length - 2],\r\n                        lastStripe[lastStripe.length - 1]\r\n    ",1760239,36,"    for (j = fromLength; j < toLength; j += 6) {\r\n                        fromStripe.push(endPoint[0], endPoint[1], endPoint[0], endPoint[1], endPoint[0], endPoint[1]",160448,47,"for (i = 0; i < toStripe.",55615,32,"        toStripe[i] -= fromStripe[i",215808,43,"    for (i = 2; i < toStripe.length; i += 6) {\r\n                        toStripes.temp.types.push('C'",234064,62,"return [\r\n                    fromStripes,\r\n                    toStripes",1760237,34,"},\r\n            compute: function(fromStripes, toStripes, delta) {\r\n                if (delta >=",1186591,34,"toStripes.pa",236415,40,660335,32,"ln = fromStrip",103319,32,"j = 0,\r\n                    ln2, from, to,\r\n                    temp = toStripes.temp.coords,\r\n                    pos = 0",98586,62,"from = fromStripes[i];\r\n                    to = toStripes[i];\r\n                    ln2 = from.length;",2004905,38,"ln2",300704,34,"temp[pos++] = to[j] * delta + from[j",220656,69,"toStripes.temp",294352,38,"data: {\r\n            compute: function(from, to, delta",104730,33,"lf = from",217479,35,"t = to",217479,36,"n = Math.max(lf, lt),\r\n                    f, t, i;\r\n    ",2071437,33,216327,34,"target = []",254096,38,"target.length = len + 1;",48368,33,"= len; i++) {\r\n                    f = from[Math.min(i, lf)];\r\n                    t = to[Math.min(i, lt)];\r\n                    if (isNaN(f)) {\r\n                        target[i] = ",212575,58,"target[i] = (t - f) * delta + f",214368,57,"    return target",294352,38,"text: {\r\n            compute: function(from, to, delta) {\r\n                return from.substr(0, Math.round(from.length * (1 - delta))) + to.substr(Math.round(to.length * (1 - delta))",414416,39,"limited: \"number\",\r\n        limited01: \"number\"\r\n    });\r\n})();\r\n\r\n(function() {\r\n    if (!Ext.global.Float32Array) {\r\n        // Typed Array polyfill\r\n        var Float32Array =",74863,32,"    if (typeof array =",2172448,36,"this.length = array;\r\n                } else if ('length' in array) {",506176,33," = array.length;\r\n    ",628669,53,"    len = array",960510,38,"            this[i] = +array[i",215808,58,"};\r\n        Float32Array.prototype = [];\r\n        Ext.global.Float32Array = Float32Array;\r\n    }\r\n})();\r\n/**\n * Utility class providing mathematics functionalities through all the draw package.\n */\r\nExt.define('Ext.draw.Draw",1650784,32,"radian: Math.PI / 180,\r\n    pi2: Math.PI * 2,\r\n    /**\n     * Function that returns its first element.\n     * @param {Mixed} a",461194,37,"reflectFn: function(a) {\r\n        return a",396320,33,"ing degrees to radians.\n     * @param {Number} degrees",1412271,38,"rad: function(degrees) {\r\n        return degrees % 360 * Math.PI / 180",396320,33,"ing radians to degrees.\n     * @param {Number} radian",1412271,38,"degrees: function(radian) {\r\n        return radian * 180 / Math.PI % 360;",2029636,32,"@param {Object} bbox1\n     * @param {Object} bbox2\n     * @param {Number} [padding]",499872,39,"isBBoxIntersect: function(bbox1, bbox2, padding) {\r\n        padding = padding || 0;\r\n        return (Math.max(bbox1.x, bbox2.x) - padding > Math.min(bbox1.x + bbox1.width, bbox2.x + bbox2.width)) || (Math.max(bbox1.y, bbox2.y) - padding > Math.min(bbox1.y + bbox1.height, bbox2.y + bbox2.height));\r\n    },\r\n    /**\n     * Natural cubic spline interpolation.\n     * This algorithm runs in linear time.\n     *\n     * @param {Array} points Array of numbers.\n     */\r\n    spline: function(points) {\r\n        var i, j,\r\n            ln = points.length,\r\n            nd, d, y, ny,\r\n            r = 0,\r\n            zs = new Float32Array(points.length),\r\n            result = new Float32Array(points.length * 3 - 2);\r\n        zs[0] = 0;\r\n        zs[ln - 1] = 0;\r\n        for (i = 1; i < ln - 1; i++) {\r\n            zs[i] = (points[i + 1] + points[i - 1] - 2 * points[i]) - zs[i - 1];\r\n            r = 1 / (4 - r);\r\n            zs[i] *= r;\r\n        }\r\n        for (i = ln - 2; i > 0; i--) {\r\n            r = 3.732050807568877 + 48.248711305964385 / (-13.928203230275537 + Math.pow(0.07179676972449123, i));\r\n            zs[i] -= zs[i + 1] * r;\r\n        }\r\n        ny = points[0];\r\n        nd = ny - zs[0];\r\n        for (i = 0 , j = 0; i < ln - 1; j += 3) {\r\n            y = ny;\r\n            d = nd;\r\n            i++;\r\n            ny = points[i];\r\n            nd = ny - zs[i];\r\n            result[j] = y;\r\n            result[j + 1] = (nd + 2 * d) / 3;\r\n            result[j + 2] = (nd * 2 + d) / 3;\r\n        }\r\n        result[j] = ny;",655724,49,"@private\n     *\n     * Calculates bezier curve control anchor points for a particular point in a path, with a\n     * smoothing curve applied. The smoothness of the curve is controlled by the 'value' parameter.\n     * Note that this algorithm assumes that the line being smoothed is normalized going from left\n     * to right; it makes special adjustments assuming this orientation",1293150,32,"prevX X coordinate of the previous point in the path\n     * @param {Number} prevY Y coordinate of the previous point in the path\n     * @param {Number} curX X coordinate of the current point in the path\n     * @param {Number} curY Y coordinate of the current point in the path\n     * @param {Number} nextX X coordinate of the next point in the path\n     * @param {Number} nextY Y coordinate of the next point in the path\n     * @param {Number} value A value to control the smoothness of the curve; this is used to\n     *                 divide the distance between points, so a value of 2 corresponds to\n     *                 half the distance between points (a very smooth line) while higher values\n     *                 result in less smooth curves. Defaults to 4.\n     * @return {Object} Object containing x1, y1, x2, y2 bezier control anchor points; x1 and y1\n     *                  are the control point for the curve toward the previous path point, and\n     *                  x2 and y2 are the control point for the curve toward the next path point.\n     */\r\n    getAnchors: function(prevX, prevY, curX, curY, nextX, nextY, value) {\r\n        value = value || 4;\r\n        var PI = Math.PI,\r\n            halfPI = PI / 2,\r\n            abs = Math.abs,\r\n            sin = Math.sin,\r\n            cos = Math.cos,\r\n            atan = Math.atan,\r\n            control1Length, control2Length, control1Angle, control2Angle, control1X, control1Y, control2X, control2Y, alpha;\r\n        // Find the length of each control anchor line, by dividing the horizontal distance\r\n        // between points by the value parameter.\r\n        control1Length = (curX - prevX) / value;\r\n        control2Length = (nextX - curX) / value;\r\n        // Determine the angle of each control anchor line. If the middle point is a vertical\r\n        // turnaround then we force it to a flat horizontal angle to prevent the curve from\r\n        // dipping above or below the middle point. Otherwise we use an angle that points\r\n        // toward the previous/next target point.\r\n        if ((curY >= prevY && curY >= nextY) || (curY <= prevY && curY <= nextY)) {\r\n            control1Angle = control2Angle = halfPI",114656,33,"control1Angle = atan((curX - prevX) / abs(curY - prevY));\r\n            if (prevY < curY) {\r\n                control1Angle = PI - control1Angle",775007,33,"trol2Angle = atan((nextX - curX) / abs(curY - nextY));\r\n            if (nextY < curY) {\r\n                control2Angle = PI - control2",2142192,42,"// Adjust the calculated angles so they point away from each other on the same line\r\n        alpha = halfPI - ((control1Angle + control2Angle) % (PI * 2)) / 2;\r\n        if (alpha > halfPI) {\r\n            alpha -= PI;\r\n        }\r\n        control1Angle += alpha;\r\n        control2Angle += alpha;\r\n        // Find the control anchor points from the angles and length\r\n        control1X = curX - control1Length * sin(control1Angle);\r\n        control1Y = curY + control1Length * cos(control1Angle);\r\n        control2X = curX + control2Length * sin(control2Angle);\r\n        control2Y = curY + control2Length * cos(control2Angle);\r\n        // One last adjustment, make sure that no control anchor point extends vertically past\r\n        // its target prev/next point, as that results in curves dipping above or below and\r\n        // bending back strangely. If we find this happening we keep the control angle but\r\n        // reduce the length of the control line so it stays within bounds.\r\n        if ((curY > prevY && control1Y < prevY) || (curY < prevY && control1Y > prevY)) {\r\n            control1X += abs(prevY - control1Y) * (control1X - curX) / (control1Y - curY);\r\n            control1Y = prevY;\r\n        }\r\n        if ((curY > nextY && control2Y < nextY) || (curY < nextY && control2Y > nextY)) {\r\n            control2X -= abs(nextY - control2Y) * (control2X - curX) / (control2Y - curY);\r\n            control2Y = nextY",986000,45,"1: control1X,\r\n            y1: control1Y,\r\n            x2: control2X,\r\n            y2: control2Y",112224,37,"Given coordinates of the points, calculates coordinates of a Bezier curve that goes through them.\n     * @param dataX x-coordinates of the points.\n     * @param dataY y-coordinates of the points.\n     * @param value A value to control the smoothness of the curve.\n     * @return {Object} Object holding two arrays, for x and y coordinates of the curve.\n     */\r\n    smooth: function(dataX, dataY, value) {\r\n        var ln = dataX.length,\r\n            prevX, prevY, curX, curY, nextX, nextY, x, y,\r\n            smoothX = [],\r\n            smoothY = [],\r\n            i, anchors;\r\n        for (i = 0; i < ln - 1; i++) {\r\n            prevX = dataX[i];\r\n            prevY = dataY[i];\r\n            if (i === 0) {\r\n                x = prevX;\r\n                y = prevY;\r\n                smoothX.push(x);\r\n                smoothY.push(y);\r\n        ",2100333,37,194432,32,"}",1807584,32,"X = dataX[i + 1];\r\n            curY = dataY[i + 1];\r\n            nextX = dataX[i + 2];\r\n            nextY = dataY[i + 2];\r\n            if (isNaN(nextX) || isNaN(nextY)) {\r\n                smoothX.push(x, curX, curX);\r\n                smoothY.push(y, curY, curY",832091,51,"    anchors = this.getAnchors(prevX, prevY, curX, curY, nextX, nextY, value);\r\n            smoothX.push(x, anchors.x1, curX);\r\n            smoothY.push(y, anchors.y1, curY);\r\n            x = anchors.x2;\r\n            y = anchors.y2",986000,44,"smoothX: smoothX,\r\n            smoothY: smoothY",112224,37,"@method\n     * @private\n     * Work around for iOS.\n     * Nested 3d-transforms seems to prevent the redraw inside it until some event is fired.\n     */\r\n    updateIOS: Ext.os.is.iOS ? function() {\r\n       ",305518,42,"id: 'frame-workaround',\r\n            style: 'position: absolute; top: 0px; bottom: 0px; left: 0px; right: 0px; background: rgba(0,0,0,0.001); z-index: 100000'\r\n        });\r\n        Ext.draw.Animator.schedule",2229162,34,"('frame-workaround').destroy();\r\n        });\r\n    } ",1644298,41,"raw.gradient.Gradient\n *\n * Creates a gradient.\n */\r\nExt.define('Ext.draw.gradient.Gradient', {\r\n    isGradient",1198586,53,"Array/Object} Defines the stops of the gradient.\n         */\r\n        stops: []\r\n    },\r\n    applyStops: function(newStops) {\r\n        var stops = [],\r\n            ln = newStops.length,\r\n            i, stop, color",1465968,51,"stop = newStops[i];\r\n            color = Ext.draw.Color.fly(stop.color || 'none');\r\n            stops.push({\r\n                offset: Math.min(1, Math.max(0, 'offset' in stop ? stop.offset : stop.position || 0)),\r\n                color: color.toString",2190016,40,"stops.sort(",959792,38,".offset - b.offset;\r\n        });\r\n        return stops;",1199263,40,"subClass, member) {\r\n        if (!member.alias && member.type) {\r\n            member.alias = 'gradient.' + member.type;",2228699,47,1353520,68,"@protected\n     * Generates the gradient for the given context.\n     * @param {Ext.draw.engine.SvgContext} ctx The context.\n     * @param {Object} bbox",1709520,38,"generateGradient",2176450,38,"draw.gradient.GradientDefinition",1650784,32,"urlStringRe: /^url\\(#([\\w\\-]+)\\)$/,\r\n    gradients: {},\r\n    add: function(gradients) {\r\n        var store = this.gradients,\r\n            i, n, gradient;\r\n        for (i = 0 , n = gradient",416868,37,"gradient = gradients[i]",953680,32,"gradient.id)) {\r\n                store[gradient.id] = gradient",1413072,41,"get: function(str) {\r\n        var store = this.gradients,\r\n            match = str.match(this.urlStringRe),\r\n            gradient;\r\n        if (match && match[1] && (gradient = store[match[1]])) {\r\n            return gradient || str;\r\n        }\r\n        return str",2048016,36,"@class Ext.draw.sprite.AttributeParser\n *\n * Parsers used for sprite attributes.\n */\r\nExt.define(\"Ext.draw.sprite.AttributeParser\"",2247229,32,"ttributeRe: /^url\\(#([a-zA-Z\\-]+)\\)$/,\r\n    \"default\": function(n) {\r\n        return n;\r\n    },\r\n    string: function(n) {\r\n        return String(n);\r\n    },\r\n    number: function(n) {\r\n        if (!isNaN(n)) {\r\n            return n;\r\n        }\r\n    },\r\n    angle: function(n) {\r\n        if (!isNaN(n)) {\r\n            n %= Math.PI * 2;\r\n            if (n < -Math.PI) {\r\n                n += Math.PI * 2",1776,34,"n > Math.PI) {\r\n                n -= Math.PI * 2",611840,37,"n;\r\n        }\r\n    },\r\n    data: function(n) {\r\n        if (Ext.isArray(n)) {\r\n            return n.slice();\r\n        } else if (n instanceof Float32Array) {\r\n            return new Float32Array(n);\r\n        }\r\n    },\r\n    bool: function(n) {\r\n        return !!n;\r\n    },\r\n    color: function(n) {\r\n        if (n instanceof Ext.draw.Color) {\r\n            return n.toString();\r\n        } else if (n instanceof Ext.draw.gradient.Gradient) {\r\n            return n;\r\n        } else if (!n) {\r\n            return 'none'",584191,35,"n)) {\r\n            n = Ext.draw.gradient.GradientDefinition.get(n",953679,33,"n)) {\r\n                return ",2116799,42,"n.type === 'linear'",584236,34,"('Ext.draw.gradient.Linear', n);\r\n        } else if (n.type === 'radial'",584236,34,"('Ext.draw.gradient.Radial', n);\r\n        } else if (n.type === 'pattern'",584236,34,"('Ext.draw.gradient.Pattern', n);\r\n        }\r\n    },\r\n    limited: function(low, hi) {\r\n        return (",126385,34,"isNaN(n) ? undefined : Math.min(Math.max(+n, low), hi);\r\n        });\r\n    },\r\n    limited01: function(n) {\r\n        return isNaN(n) ? undefined : Math.min(Math.max(+n, 0), 1);\r\n    },\r\n    enums: function() {\r\n        var enums = {},\r\n",116190,55,", 0)",243976,50,"rg",1933808,39,"nums[args[i]]",1435679,36,"(",126385,36,"in enums ? n : undefined;",2117230,47," Flyweight object to process the attribute of a sprite.\n */\r\nExt.define(\"Ext.draw.sprite.AttributeDefinition\", {",1574048,46,"Object} defaults Defines the default values of attributes.",1054174,32,1318976,42,"aliases Defines the aletrnative names for attributes.\n         */\r\n        aliase",1318973,45,"animationProcessors Defines the process used to animate between attributes.\n         */\r\n        animationP",181175,39,"@cfg {Object} processors Defines the preprocessing used on the attribute.\n         */\r\n        ",181174,40,"@cfg {Object} dirty Defines what other attributes need to be updated when an attribute is changed.\n         */\r\n        dirtyTrigge",181182,32,"@cfg {Object} updaters Defines the postprocessing used by the attribute.\n         */\r\n        updaters: {}\r\n    }",2114591,38,"processorRe: /^(\\w+)\\(([\\w\\-,]*)\\)$/",528768,55,1620744,52,1064227,40,", oldDefaults) {\r\n        oldDefaults = Ext.apply(oldDefaults || {}, this.normalize(defaults));\r\n        return oldDefaults;\r\n    },\r\n    applyAliases: function(aliases, oldAliases) {\r\n        return Ext.apply(oldAliases || {}, aliases);\r\n    },\r\n    applyProcessors: function(processors, oldProcessors) {\r\n        this.getAnimationProcessors();\r\n        var name,\r\n            result = oldProcessors || {},\r\n            defaultProcessor = Ext.draw.sprite.AttributeParser,\r\n            processorRe = this.self.processorRe,\r\n            animationProcessors = {},\r\n            anyAnimationProcessors, match, fn;\r\n        for (name in processors) {\r\n            fn = processors[name];\r\n            if (!Ext.isFunction(fn",1386457,39,"fn)) {\r\n                    match = fn.match(processorRe);\r\n    ",365859,50,"    fn = defaultProcessor[match[1]].apply(defaultProcessor, match[2].split(',')",147935,58,"animationProcessors[name] = fn;\r\n                        anyAnimationProcessors",2074000,34,"fn = defaultProcessor[fn",215808,44," else {\r\n",5054,42,172032,42,"}\r\n            result[name] = fn;\r\n        }\r\n        if (anyAnimationProcessors) {\r\n            this.setAnimationProcessors(animationProcesso",1431472,32,"result;\r\n    },\r\n    applyAnimationProcessors: function(animationProcessors, oldAnimationProcessors) {\r\n        var parser = Ext.draw.sprite.AnimationPars",1550845,32,"if (!oldAnimationProcessors) {\r\n            oldAnimationProcessors",560572,32,"var name in animationProcessors) {\r\n            item = animationProcessors[name];\r\n            if (item === 'none') {\r\n                oldAnimationProcessors[name] = null",127244,32,"String(item) && !(name in oldAnimationProcessors)) {\r\n                if (item in parser) {\r\n                    while (Ext.isString(parser[item])) {\r\n                        item = parser[item",215808,43,"    oldAnimationProcessors[name] = parser[item",172319,36," else if (Ext.isObject(item)) {\r\n                oldAnimationProcessors[name",1454523,34,"}\r\n        return oldAnimationProcessors;\r\n    },\r\n    applyDirtyTriggers: function(dirtyTriggers, oldDirtyTrigger) {\r\n        if (!oldDirtyTrigger) {\r\n            oldDirtyTrigger",560572,32,"var name in dirtyTriggers) {\r\n            oldDirtyTrigger[name] = dirtyTriggers[name].split(',');\r\n        }\r\n        return oldDirtyTrigger;\r\n    },\r\n    applyUpdaters: function(updaters, oldUpdaters) {\r\n        return Ext.apply(oldUpdaters || {}, updaters);\r\n    },\r\n    batchedNormalize: function(batchedChanges, reserveUnrecognized) {\r\n        if (!batchedChanges) {\r\n            return {};\r\n        }\r\n        var definition = this,\r\n            processors = definition.getProcessors(),\r\n            aliases = definition.getAliases(),\r\n            normalized = {},\r\n            i, ln, name, val, translation, rotation, scaling, matrix, subVal, split;\r\n        if ('rotation' in batchedChanges) {\r\n            rotation = batchedChanges.rotatio",114655,35,"otation = ('rotate' in batchedChanges) ? batchedChanges.rotate : undefined;\r\n        }\r\n        if ('scaling' in batchedChanges) {\r\n            scaling = batchedChanges.scaling",1334112,34,"caling = ('scale' in batchedChanges) ? batchedChanges.scale : undefined;\r\n        }\r\n        if ('translation' in batchedChanges) {\r\n            translation = batchedChanges.translatio",114655,34,"translation = ('translate' in batchedChanges) ? batchedChanges.translate : undefined",493408,33,"scaling",374060,33,"if (Ext.isNumber(scaling)) {\r\n                normalized.scalingX = scaling;\r\n                normalized.scalingY = scalin",173664,42,"if ('x' in scaling) {\r\n                    normalized.scalingX = scaling.",1169168,39,"if ('y' in scaling) {\r\n                    normalized.scalingY = scaling.y",254096,42,"'centerX' in scaling) {\r\n                    normalized.scalingCenterX = scaling.centerX",254096,42,"'centerY' in scaling) {\r\n                    normalized.scalingCenterY = scaling.centerY",552176,56,"if (typeof rotation",374060,33,"if (Ext.isNumber(rotation)) {\r\n                rotation = Ext.draw.Draw.rad(rotation);\r\n                normalized.rotationRads = rotation",1436960,45,"'rads' in rotation) {\r\n                    normalized.rotationRads = rotation.rads;\r\n                } else if ('degrees' in rot",2207952,34,"Ext.isArray(rotation.degrees)) {\r\n                        normalized.rotationRads = rotation.degrees.map(function(deg",218592,34,"eturn Ext.draw.Draw.rad(deg);\r\n    ",6012,41,220480,38,"normalized.rotationRads = Ext.draw.Draw.rad(rotation.degree",1542720,59,"    if ('centerX' in rotation) {\r\n                    normalized.rotationCenterX = rotation.centerX",254096,42,"'centerY' in rotation) {\r\n                    normalized.rotationCenterY = rotation.centerY",552176,56,"if (typeof translation",374060,33,"if ('x' in translation) {\r\n                normalized.translationX = translation.",721232,35,"'y' in translation) {\r\n                normalized.translationY = translation.y",1587824,41,"'matrix' in batchedChanges) {\r\n            matrix = Ext.draw.Matrix.create(batchedChanges.matrix);\r\n            split = matrix.split();\r\n            normalized.matrix = matrix;\r\n            normalized.rotationRads = split.rotation;\r\n            normalized.rotationCenterX = 0;\r\n            normalized.rotationCenterY = 0;\r\n            normalized.scalingX = split.scaleX;\r\n            normalized.scalingY = split.scaleY;\r\n            normalized.scalingCenterX = 0;\r\n            normalized.scalingCenterY = 0;\r\n            normalized.translationX = split.translateX;\r\n            normalized.translationY = split.translateY",560577,35,"batchedChanges) {\r\n            val = batchedChanges[name];\r\n            if (typeof val =",556960,35,"\r\n",5088,39,"} else if (Ext.isArray(val)) {\r\n                if (n",222539,39,"name = aliases[n",170784,38,"    if (name in processors) {\r\n                    normalized[name] = [];\r\n    ",290703,34,"val",92208,45,"    subVal = processors[name].call(this, val[i",71437,33,"typeof subVal !",556960,43,"    normalized[name][i] = subVal",340080,70," else if (reserveUnrecognized) {\r\n                    normalized[name] = va",131312,35,"} else {\r\n                if (n",222539,39,"name = aliases[n",170784,38,"    if (name in processors) {\r\n                    val = processors[name].call(this, val)",141344,34,"val !",556960,43,"normalized[name] = val",214368,43," else if (reserveUnrecognized) {\r\n                    normalized[name] = va",131312,35,"}\r\n        }\r\n        return normalized",430870,37,"the changes given via their processors before they are applied as attributes",397024,32,"changes The changes given.",1583789,40,"values.",431198,34,"changes, reserveUnrecognized) {\r\n        if (!changes) {\r\n            return {};\r\n        }\r\n        var definition = this,\r\n            processors = definition.getProcessors(),\r\n            aliases = definition.getAliases(),\r\n            translation = changes.translation || changes.translate,\r\n            normalized = {},\r\n            name, val, rotation, scaling, matrix, split;\r\n        if ('rotation' in changes) {\r\n            rotation = changes.rotatio",114655,35,"otation = ('rotate' in changes) ? changes.rotate : undefined;\r\n        }\r\n        if ('scaling' in changes) {\r\n            scaling = changes.scaling",1334112,34,"caling = ('scale' in changes) ? changes.scale : undefined;\r\n        }\r\n        if (translation) {\r\n            if ('x' in translation) {\r\n                normalized.translationX = translation.",721232,35,"'y' in translation) {\r\n                normalized.translationY = translation.y",2116800,42,"ypeof scaling",374060,33,"if (Ext.isNumber(scaling)) {\r\n                normalized.scalingX = scaling;\r\n                normalized.scalingY = scalin",173664,42,"if ('x' in scaling) {\r\n                    normalized.scalingX = scaling.",1169168,39,"if ('y' in scaling) {\r\n                    normalized.scalingY = scaling.y",254096,42,"'centerX' in scaling) {\r\n                    normalized.scalingCenterX = scaling.centerX",254096,42,"'centerY' in scaling) {\r\n                    normalized.scalingCenterY = scaling.centerY",552176,56,"if (typeof rotation",374060,33,"if (Ext.isNumber(rotation)) {\r\n                rotation = Ext.draw.Draw.rad(rotation);\r\n                normalized.rotationRads = rotation",1436960,45,"'rads' in rotation) {\r\n                    normalized.rotationRads = rotation.rads;\r\n                } else if ('degrees' in rotation) {\r\n                    normalized.rotationRads = Ext.draw.Draw.rad(rotation.degre",148143,41,"if ('centerX' in rotation) {\r\n                    normalized.rotationCenterX = rotation.centerX",254096,42,"'centerY' in rotation) {\r\n                    normalized.rotationCenterY = rotation.centerY",552176,56,"if ('matrix' in changes) {\r\n            matrix = Ext.draw.Matrix.create(changes.matrix);\r\n            split = matrix.split();\r\n            normalized.matrix = matrix;\r\n            normalized.rotationRads = split.rotation;\r\n            normalized.rotationCenterX = 0;\r\n            normalized.rotationCenterY = 0;\r\n            normalized.scalingX = split.scaleX;\r\n            normalized.scalingY = split.scaleY;\r\n            normalized.scalingCenterX = 0;\r\n            normalized.scalingCenterY = 0;\r\n            normalized.translationX = split.translateX;\r\n            normalized.translationY = split.translateY",560577,36,"hanges) {\r\n            val = changes[name];\r\n            if (typeof val =",556960,35,"\r\n",5088,39,"}\r\n            if (n",222539,35,"name = aliases",268751,36,"if (name in processors) {\r\n                val = processors[name].call(this, val)",665236,33," !",556960,39,"normalized[name] = va",131312,35,"} else if (reserveUnrecognized) {\r\n                normalized[name] = va",515599,45,"normalized;\r\n    },\r\n    setBypassingNormalization: function(attr, modifierStack, changes) {\r\n        return modifierStack.pushDown(attr, changes);\r\n    },\r\n    set: function(attr, modifierStack, changes) {\r\n        changes = this.normalize(changes);\r\n        return this.setBypassingNormalization(attr, modifierStack, changes);",1396016,34,"draw.modifier.Modifier\n *\n * Each sprite has a stack of modifiers. The resulting attributes of sprite is\n * the content of the stack top. When setting attributes to a sprite,\n * changes will be pushed-down though the stack of modifiers and pop-back the\n * additive changes; When modifier is triggered to change the attribute of a\n * sprite, it will pop-up the changes to the top.\n */\r\nExt.define(\"Ext.draw.modifier.Modifier\", {",1574048,46,"Ext.draw.modifier.Modifier} previous Previous modifier that receives\n         * the push-down changes.\n         */\r\n        previou",1430303,39,"Ext.draw.modifier.Modifier} next Next modifier that receives the\n         * pop-up changes.\n         */\r\n        nex",1052176,39,"Ext.draw.sprite.Sprite} sprite The sprite to which the modifier belongs.\n         */\r\n        sprite",835616,99,"updateNext: function(next) {\r\n        if (next) {\r\n            next.setPrevious(",1060510,37,"Prev: function(prev) {\r\n        if (prev) {\r\n            prev.setNext(",1880735,42,"Validate attribute set before use",397024,32,"attr The attribute to be validated. Note that it may be already initialized, so do\n     * not override properties that have already been used.\n     */\r\n    prepareAttributes: function(attr) {\r\n        if (this._previous) {\r\n            this._previous.prepareAttributes(attr",1240432,38,"Invoked when changes need to be popped up to the top",420833,40,"source attributes.\n     * @param {Object} changes The changes to be popped up.\n     */\r\n    popUp: function(attributes, changes) {\r\n        if (this._next) {\r\n            this._next.popUp(attributes, change",1206672,35,"Ext.apply(attributes, change",1485824,39,"Invoked when changes need to be pushed down to the sprite.\n     * @param {Object} attr The source attributes.\n     * @param {Object} changes The changes to make. This object might be changed unexpectedly inside the method.",461194,37,"pushDown: function(attr, changes) {\r\n        if (this._previous) {\r\n            return this._previous.pushDown(attr, change",1206672,35,"for (var name in changes) {\r\n                if (changes[name] === attr[name]",1462837,32,"changes[n",170784,60,"changes",851646,36,"class Ext.draw.modifier.Target\n * @extends Ext.draw.modifier.Modifier\n *\n * This is the destination modifier that has to be put at\n * the top of the modifier stack.\n *\n */\r\nExt.define(\"Ext.draw.modifier.Target\", {\r\n    extend: Ext.draw.modifier.Modifier,\r\n    alias: 'modifier.target',",405042,34,": 0\r\n    },\r\n    /**\n     * @inheritdoc\n     */\r\n    prepareAttributes: function(attr) {\r\n        if (this._previous) {\r\n            this._previous.prepareAttributes(attr);\r\n        }\r\n        // TODO: Investigate the performance hit for introducing an id\r\n        attr.attributeId = 'attribute-' + Ext.draw.modifier.Target.uniqueId++;\r\n        if (!attr.hasOwnProperty('canvasAttributes')) {\r\n            attr.bbox = {\r\n                plain: {\r\n                    dirty: true",274685,38,"transform: {\r\n                    dirty",1100939,39,"};\r\n            attr.dirty = true;\r\n            attr.dirtyFlags = {};\r\n            attr.canvasAttributes = {};\r\n            attr.matrix = new Ext.draw.Matrix();\r\n            attr.inverseMatrix = new Ext.draw.Matrix",1755872,55,"Applies the appropriate dirty flags from the modifier changes.\n     * @param {Object} attr The source attributes.\n     * @param {Object} changes The modifier changes.\n     */\r\n    setDirtyFlags: function(attr, changes) {\r\n        Ext.apply(attr, changes);\r\n        var sprite = this._sprite,\r\n            dirtyTriggers = sprite.self.def._dirtyTrigger",365407,35,"dirtyFlags = attr.dirtyFlags,\r\n            flags,\r\n            any = false,\r\n            triggers, trigger, i, ln, canvasNames;\r\n        for (name in changes) {\r\n            if ((triggers = dirtyTriggers[name])) {\r\n    ",340451,32,"    while ((trigger = triggers[i++])) {\r\n                    if (!(flags = dirtyFlags[trigger])) {\r\n                        flags = dirtyFlags[trigger] = [",215808,43,"    flags",560862,45,"}",560578,35,"hanges) {\r\n            any = true;\r\n",2247054,39,"if (!any",1125102,45,"// This can prevent sub objects to set duplicated attributes to\r\n        // context.\r\n        if (dirtyFlags.canvas) {\r\n            canvasNames = dirtyFlags.canvas;\r\n            delete dirtyFlags.canvas",292384,33,"canvasN",457375,41,"    name = canvasNames[i];\r\n                attr.canvasAttributes[name] = attr",268751,32,"}\r\n        // Spreading dirty flags to children\r\n        if (attr.hasOwnProperty('children')) {",1401680,32,"attr.children",92208,41,"Ext.apply(attr.children[i].dirtyFlags, dirtyFlags);\r\n                sprite.updateDirtyFlags(attr.children[i]",358736,38,"sprite.setDirty",1349184,33,"inheritdoc\n     */\r\n    popUp: function(attributes, changes) {\r\n        this.setDirtyFlags(attributes, changes);\r\n        this._sprite.updateDirtyFlags(attributes);\r\n    },\r\n    /**\n     * @inheritdoc\n     */\r\n    pushDown: function(attr, changes) {\r\n        if (this._previous) {\r\n            changes = this._previous.pushDown(attr, change",851443,32,"DirtyFlags(attr, changes);\r\n        this._sprite.updateDirtyFlags(attr);",1812525,32,"\r\n});\r\n\r\n(function() {\r\n    var pow = Math.pow,\r\n        sin = Math.sin,\r\n        cos = Math.cos,\r\n        sqrt = Math.sqrt,\r\n        pi = Math.PI,\r\n        easings, addEasing, poly, createPoly, easing, i, l;\r\n    //create polynomial easing equations\r\n    poly = [\r\n        'quad',\r\n        'cubic',\r\n        'quart',\r\n        'quint'\r\n    ];\r\n    //create other easing equations\r\n    easings = {\r\n        pow: function(p, x) {\r\n            return pow(p, x[0] || 6);\r\n        },\r\n        expo: function(p) {\r\n            return pow(2, 8 * (p - 1));\r\n        },\r\n        circ: function(p) {\r\n            return 1 - sqrt(1 - p * p);\r\n        },\r\n        sine: function(p) {\r\n            return 1 - sin((1 - p) * pi / 2);\r\n        },\r\n        back: function(p, n) {\r\n            n = n || 1.616;\r\n            return p * p * ((n + 1) * p - n);\r\n        },\r\n        bounce: function(p) {\r\n            var value;\r\n            for (var a = 0,\r\n                b = 1; 1; a += b , b /= 2) {\r\n                if (p >= (7 - 4 * a) / 11",187679,33,"b * b - pow((11 - 6 * a - 11 * p) / 4, 2)",650072,47,416240,37,"value;\r\n        },\r\n        elastic: function(p, x) {\r\n            return pow(2, 10 * --p) * cos(20 * p * pi * (x || 1) / 3);\r\n        }\r\n    };\r\n    //Add easeIn, easeOut, easeInOut options to all easing equations.\r\n    addEasing = function(easing, params) {\r\n        params = params && params.length ? params : [\r\n            params\r\n        ];\r\n        return Ext.apply(easing, {\r\n            easeIn: function(pos) {\r\n                return easing(pos, params",20752,32,"easeOut: function(pos) {\r\n                return 1 - easing(1 - pos, params",20752,32,"easeInOut: function(pos) {\r\n                return (pos <= 0.5) ? easing(2 * pos, params) / 2 : (2 - easing(2 * (1 - pos), params)) / 2",347855,35,"};\r\n    //Append the polynomial equations with easing support to the EasingPrototype.\r\n    createPoly = function(times) {\r\n        return function(p) {\r\n            return pow(p, times);\r\n        };\r\n    };\r\n    for (i = 0 , l = poly",607840,32,"easings[poly[i]] = createPoly(i + 2);\r\n    }\r\n    //Add linear interpolator\r\n    easings.linear = function(x) {\r\n        return x;\r\n    };\r\n    for (easing in easings) {\r\n        if (easings.hasOwnProperty(easing)) {\r\n            addEasing(easings[easing])",370073,37,"class\n     * Contains transition equations such as `Quad`, `Cubic`, `Quart`, `Quint`,\n     * `Expo`, `Circ`, `Pow`, `Sine`, `Back`, `Bounce`, `Elastic`, etc.\n     *\n     * Contains transition equations such as `Quad`, `Cubic`, `Quart`, `Quint`, `Expo`, `Circ`, `Pow`, `Sine`, `Back`, `Bounce`, `Elastic`, etc.\n     * Each transition also contains methods for applying this function as ease in, ease out or ease in and out accelerations.\n     *\n     *     var fx = Ext.create('Ext.draw.fx.Sprite', {\n     *         sprite: sprite,\n     *         duration: 1000,\n     *         easing: 'backOut'",191830,32,".define('Ext.draw.TimingFunctions",1003215,40,"easingMap: {\r\n            linear: easings.linear,\r\n            easeIn: easings.quad.easeIn,\r\n            easeOut: easings.quad.easeOut,\r\n            easeInOut: easings.quad.easeInOut,\r\n            backIn: easings.back,\r\n            backOut: function(x, n) {\r\n                return 1 - easings.back(1 - x, n",20752,32,"backInOut: function(x, n) {\r\n                if (x < 0.5",38768,32,"easings.back(x * 2, n) * 0.5",283744,49,"return 1 - easings.back((1 - x) * 2, n) * 0.5",106096,35,",\r\n            elasticIn: function(x, n) {\r\n                return 1 - easings.elastic(1 - x, n",20752,32,"elasticOut: easings.elastic,\r\n            bounceIn: easings.bounce,\r\n            bounceOut: function(x) {\r\n                return 1 - easings.bounce(1 - x",358736,34,"}, function() {\r\n        Ext.apply(this, easings);\r\n    });\r\n})();\r\n\r\n/**\n * @class Ext.draw.Animator\n *\n * Singleton class that manages the animation pool.\n */\r\nExt.define('Ext.draw.Animator",1650784,32,"frameCallbacks: {},\r\n    frameCallbackId: 0,\r\n    scheduled: 0,\r\n    frameStartTimeOffset: Date.now(),\r\n    animations: [],",1556600,38," Cross platform `animationTime` implementation.\n     *  @return {Number}\n     */\r\n    animationTim",724064,32,"Ext.AnimationQueue.frameStartTime - this.frameStartTime",987440,32,"Adds an animated object to the animation pool",397024,32,"animation The animation descriptor to add to the pool.\n     */\r\n    add",875308,33,"if (!this.contains(animation)) {\r\n            this.animations.push(animation);\r\n            Ext.draw.Animator.ignite();\r\n            if ('fireEvent",716934,35,2163936,63,923280,37,"Removes an animation from the pool.\n     * TODO: This is broken when called within `step`",124864,32,"animation The animation to remove from the pool",927072,32,"anim",1694272,46,"animations = me.animations",1162288,36," = animations.length;\r\n        for (; i < l; ++i) {\r\n            if (animations[i]",2169228,35,"animation",506122,33,"if ('fireEvent' in",2169232,35,2157140,45,87936,45,1413072,41,"/**\n     * Returns `true` or `false` whether it contains the given animation or not",397024,32,"animation The animation",572121,39,480701,33,"animation) {\r\n        return this.animations.indexOf(animation) > -1",575776,34,"`true` or `false` whether the pool is empty or not",1911232,40,"emp",1261088,33,"this.animations.length",1950768,32,"Given a frame time it will filter out finished animations from the pool",1293150,32,"frameTime The frame's start time, in milliseconds.\n     */\r\n    step: function(frameTim",1511760,42,"animations = me.animations,\r\n            animation",1162288,36,"n = animations.length",1506943,46,2163331,49,".step(frameTime);\r\n            if (!animation.animating) {\r\n                animation",506122,33,"i--;\r\n",169690,39,"if (animation.fireEvent",1407414,34,".fireEvent('animationend'",202576,53,"},\r\n    /**\n     * Register an one-time callback that will be called at the next frame",1711085,35,1931847,36," @return {String}\n     */\r\n    schedule: function(callback, scope) {\r\n",174053,40,"var id = 'frameCallback' + (this.frameCallbackId++);\r\n        if (Ext.isString(callback)) {\r\n            callback = scope[callback];\r\n        }\r\n        Ext.draw.Animator.frameCallbacks[id] = {\r\n            fn: callback",1299136,42,"once",1029966,33,"scheduled++;\r\n        Ext.draw.Animator.ignite()",406315,35,"/**\n     * Cancel a registered one-time callback\n     * @param {String} id\n     */\r\n    cancel: function(id) {\r\n        if (Ext.draw.Animator.frameCallbacks[id] && Ext.draw.Animator.frameCallbacks[id].once) {\r\n            this.scheduled--;\r\n            delete Ext.draw.Animator.frameCallbacks[id]",119440,37,"Register a recursive callback that will be called at every frame",1292688,35,1709484,53,"String}\n     */\r\n    addFrameC",351074,33,") {\r\n",174053,40,"if (Ext.isString(callback)) {\r\n            callback = scope[callback];\r\n        }\r\n        var id = 'frameCallback' + (this.frameCallbackId++);\r\n        Ext.draw.Animator.frameCallbacks[id] = {\r\n            fn: callback,\r\n",136415,34,"}",406315,35,"/**\n     * Unregister a recursive callback.\n     * @param {String} id\n     */\r\n    removeFrameCallback: function(id) {\r\n        delete Ext.draw.Animator.frameCallbacks[id]",1000160,48,"fireFrameCallbacks: function() {\r\n        var callbacks = this.frameCallbacks,\r\n            id, fn, cb;\r\n        for (id in callbacks) {\r\n            cb = callbacks[id];\r\n            fn = cb.fn",953680,32,"fn)) {\r\n                fn = cb.",1018480,39,"fn.call(cb.scope);\r\n            if (callbacks[id] && cb.once) {\r\n                this.scheduled--;\r\n                delete callbacks[id]",1413072,41,"handleFrame: function() {\r\n        this.step(this.animationTime());\r\n        this.fireFrameCallbacks();\r\n        if (!this.scheduled && this.empty()",2036171,36,"stop(this.handleFrame, this);\r\n    ",1559398,39,"}\r\n    },\r\n    ignite",2134846,34,"running) {\r\n    ",1558770,34,715711,38,"handleFrame, this);\r\n            Ext.draw.Draw.updateIOS(",1105856,36,"The Animation modifier.\n *\n * Sencha Touch allows users to use transitional animation on sprites. Simply set the duration\n * and easing in the animation modifier, then all the changes to the sprites will be animated.\n *\n * Also, you can use different durations and easing functions on different attributes by using\n * {@link #customDuration} and {@link #customEasings}.\n *\n * By default, an animation modifier will be created during the initialization of a sprite.\n * You can get the modifier of `sprite` by `sprite.fx`.\n *\n */\r\nExt.define(\"Ext.draw.modifier.Animation\"",1339246,74,"extend: Ext.draw.modifier.Modifier,\r\n    alias: 'modifier.animation",1210336,48,"Function} easing\n         * Default easing",1430265,32,"easing: function(x) {\r\n            return x",18784,39,"cfg {Number} duration\n         * Default duration time (ms).\n         */",712249,32,"/**\n         * @cfg {Object} customEasings Overrides the default easing function for defined attributes.\n         */\r\n        customEasing",1318973,45,"customDuration Overrides the default duration for defined attributes.\n         */\r\n        customDuration: {}",528768,36,") {\r\n        this.anyAnimation = false;\r\n        this.anySpecialAnimations = false;\r\n        this.animating = 0;\r\n        this.animatingPool = []",2090384,51,"/**\n     * @inheritdoc\n     */\r\n    prepareAttributes: function(attr) {\r\n        if (!attr.hasOwnProperty('timers')) {\r\n            attr.animating = false;\r\n            attr.timers = {};\r\n            attr.animationOriginal = Ext.Object.chain(attr);\r\n            attr.animationOriginal.upperLevel = att",1033560,32,"_previous) {\r\n            this._previous.prepareAttributes(attr.animationOriginal",1444352,33,"Sprite: function(sprite) {\r\n        // Apply the config that was configured in the sprite.\r\n        this.setConfig(sprite.config.fx)",882015,66,"anyAnimation = duration > 0",714355,60,"typeof easing =",1602977,35,"Ext.draw.TimingFunctions.easingMap[easing",1380944,34,"return easing;\r\n        }\r\n    },\r\n    applyCustomEasings: function(newCustomEasing, oldCustomEasing) {\r\n        oldCustomEasing = oldCustomEasing || {};\r\n        var attr, attrs, easing, i, ln;\r\n        for (attr in newCustomEasing) {\r\n            easing = newCustomEasing[attr];\r\n            attrs = attr.split(',');\r\n            if (typeof easing",1423502,34,"easing = Ext.draw.TimingFunctions.easingMap[easing]",179024,40," , ln = att",521135,43,"oldCustomEasing[attrs[i]] = easing",515600,44,"oldCustomEasing;\r\n    },\r\n    /**\n     * Set special easings on the given attributes. E.g.:\n     *\n     *     circleSprite.fx.setEasingOn('r', 'elasticIn",952239,33,"Array} attrs The source attribute(s).\n     * @param {String} easing The special easings.\n     */\r\n    setEasingOn: function(attrs, easing) {\r\n        attrs = Ext.Array.from(attrs).slice();\r\n        var customEasings = {}",1162288,36,"n = attrs.length",1506943,46,"customEasings[attrs[i]] = easing;\r\n        }\r\n        this.setCustomEasings(customEasings",548080,33," special easings on the given attributes.\n     * @param {String/Array} attrs The source attribute(s).\n     */\r\n    clearEasingOn: function(attrs) {\r\n        attrs = Ext.Array.from(attrs, true);",1924190,34,"ln = attrs.length",1506943,46,"delete this._customEasings[attrs[i]];\r\n        }\r\n    },\r\n    applyCustomDuration: function(newCustomDuration, oldCustomDuration) {\r\n        oldCustomDuration = oldCustomDuration || {};\r\n        var attr, duration, attrs, i, ln,\r\n            anySpecialAnimations = this.anySpecialAnimations;\r\n        for (attr in newCustomDuration) {\r\n            duration = newCustomDuration[attr];\r\n            attrs = attr.split(',');\r\n            anySpecialAnimations",348377,40,"att",521135,43,"oldCustomDuration[attrs[i]] = dura",1036047,46,"anySpecialAnimations = anySpecialAnimations;\r\n        return oldCustomDuration;\r\n    },\r\n    /**\n     * Set special duration on the given attributes. E.g.:\n     *\n     *     rectSprite.fx.setDurationOn('height', 2000",952240,32,"Array} attrs The source attributes.\n     * @param {Number} duration The special duration.\n     */\r\n    setDurationOn: function(attrs, duration) {\r\n        attrs = Ext.Array.from(attrs).slice();\r\n        var customDurations = {}",1162288,36,"n = attrs.length",1506943,46,"customDurations[attrs[i]] = duration;\r\n        }\r\n        this.setCustomDuration(customDurations",548080,33," special easings on the given attributes.\n     * @param {Object} attrs The source attributes.\n     */\r\n    clearDurationOn: function(attrs) {\r\n        attrs = Ext.Array.from(attrs, true);",1924190,34,"ln = attrs.length",1506943,46,"delete this._customDuration[attrs[i]]",1078160,52," Initializes Animator for the",800791,33,"} attributes The source attributes.\n     * @param {String} animating The animating flag.\n     */\r\n    setAnimating: function(attributes, anima",1482304,45,"i, j;\r\n        if (attributes.animating !== animating) {\r\n            attributes.animating = animating;\r\n            if (animating) {\r\n                me.animatingPool.push(attributes);\r\n                if (me.animating === 0) {\r\n                    Ext.draw.Animator.add(",289888,37,"    me.animating",2068687,43,"for (i = 0 , j = 0; i < me.animatingPool.",55615,32,"    if (me.animatingPool[i] !==",408095,32,"        me.animatingPool[j++] = me.animatingPool[i",215808,62,"me.animating = me.animatingPool.length = j",1413072,41,"/**\n     * @private\n     * Set the attr with given easing and duration.\n     * @param {Object} attr The attributes",926940,36,"changes The changes that popped up from lower modifier.\n     * @return {Object} The changes to pop up.\n     */\r\n    setAttrs: function(attr, changes) {\r\n        var timers = attr.timers,\r\n            parsers = this._sprite.self.def._animationProcessors,\r\n            defaultEasing = this._easing,\r\n            defaultDuration = this._duration,\r\n            customDuration = this._customDuration,\r\n            customEasings = this._customEasings,\r\n            anySpecial = this.anySpecialAnimations,\r\n            any = this.anyAnimation || anySpecial,\r\n            original = attr.animationOriginal,\r\n            ignite = false,\r\n            timer, name, newValue, startValue, parser, easing, duration;\r\n        if (!any) {\r\n            // If there is no animation enabled\r\n            // When applying changes to attributes, simply stop current animation\r\n            // and set the value.\r\n            for (name in changes) {\r\n                if (attr[name] === change",140142,32,"delete changes[nam",36672,51,"attr[name] = changes[n",170784,38,"    delete original[name];\r\n                delete timers",268751,43,"changes",114656,33,"// If any animation\r\n            for (name in changes) {\r\n                newValue = changes[name];\r\n                startValue = attr[name];\r\n                if (newValue !== startValue && any && startValue !== undefined && startValue !== null && (parser = parsers",92704,32,"// If this property is animating.\r\n                    // Figure out the desired duration and easing.\r\n                    easing = defaultEasing;\r\n                    duration = defaultDuration;\r\n                    if (anyS",617616,35,"// Deducing the easing function and duration\r\n",241078,32," in customEasing",149056,34,"easing = customEasings",149008,33,"}\r\n",241078,32," in customD",1391056,32,"        duration = customDuration",149008,33,285632,42,"    // If the property is animating\r\n                    if (",1391055,33,"    if (!timer",140142,36,"    timers[name] = {}",214288,54,"timer = timers",149008,33,"timer.start = 0;\r\n                        timer.easing = easing;\r\n                        timer.duration = duration;\r\n                        timer.compute = parser.compute;\r\n                        timer.serve = parser.serve || Ext.draw.Draw.reflectFn",241988,32,"arser.parseInitial",218592,33,"var initial = parser.parseInitial(startValue, newV",99120,36,"timer.source = initial[0",95088,32,"timer.target = initial[1];",99157,33,"if (parser.par",228960,35,"timer.source = parser.parse(startV",99120,36,"timer.target = parser.parse(newV",99120,32,241904,34,"    timer.source = startV",94638,35,"timer.target = newValu",537919,55,"// The animation started. Change to originalVal.\r\n                        timers[name] = timer;\r\n",2172759,32,"[name] = newValue",1415412,34,"changes",149008,33,"ignite",2074000,34,"\r\n",5080,55,241904,34,"delete original",135181,49," else {\r\n                    delete original[n",170784,38,"    // If the property is not animating.\r\n                delete timers",268751,32,"}\r\n        if (ignite && !attr.animating) {\r\n            this.setAnimating(attr, ",1083247,34,1812542,33,"@private\n     *\n     * Update attributes to current value according to current animation time.\n     * This method will not effect the values of lower layers, but may delete a\n     * value from it.\n     * @param {Object} attr The source attributes.\n     * @return {Object} the changes to popup.\n     */\r\n    updateAttributes: function(attr) {\r\n        if (!attr.animating) {\r\n            return {};\r\n        }\r\n        var changes = {},\r\n            any = false,\r\n            original = attr.animationOriginal,\r\n            timers = attr.timers,\r\n            now = Ext.draw.Animator.animationTime(),\r\n            name, timer, delta;\r\n        // If updated in the same frame, return.\r\n        if (attr.lastUpdate === now) {\r\n            return",560574,38,"timers) {\r\n            timer = timers[name];\r\n            if (!timer.start) {\r\n                timer.start = now;\r\n                delta = 0",515280,41,"delta = (now - timer.start) / timer.duration",1590128,35,"elta >= 1) {\r\n                changes[name] = original[name];\r\n                delete original[name];\r\n                delete timers[name",1801743,42,"changes[name] = timer.serve(timer.compute(timer.source, timer.target, timer.easing(delta), attr[name]));\r\n                any",1994432,44,"attr.lastUpdate = now;\r\n        this.setAnimating(attr, any);",1812525,50,"@inheritdoc\n     */\r\n    pushDown: function(attr, changes) {\r\n        changes = Ext.draw.modifier.Modifier.prototype.pushDown.call(this, attr.animationOriginal, changes);\r\n        return this.setAttrs(attr, changes);\r\n    },\r\n    /**\n     * @inheritdoc\n     */\r\n    popUp: function(attr, changes) {\r\n        attr = attr.upperLevel;\r\n        changes = this.setAttrs(attr, changes);\r\n        if (this._next) {\r\n            return this._next.popUp(attr, change",1206672,35,"return Ext.apply(attr, changes);\r\n        }\r\n    },\r\n    // This is called as an animated object in `Ext.draw.Animator`.\r\n    step",1998464,52,"pool = me.animatingPool.slice(),\r\n            attributes,",243990,35,"pool",244032,38,"ttributes = pool[i];\r\n            var changes = this.updateAttributes(attributes),\r\n                name;\r\n            // Looking for anything in changes\r\n            //noinspection LoopStatementThatDoesntLoopJS\r\n            for (name in changes) {\r\n                if (this._next) {\r\n                    this._next.popUp(attributes, chang",148143,41,651264,39,",\r\n    /**\n     * Stop all animations effected by this modifier\n     */",513328,34,"this.step",1532718,41,"pool = me.animatingPool",243976,49,"pool",92208,37,"pool[i].animating = false;\r\n        }\r\n        me.animatingPool.length = 0;\r\n        me.animating = 0;\r\n        Ext.draw.Animator.remove(me",1516000,51,"me = this;\r\n        me.animatingPool.length = 0;\r\n        me.animating = 0;",1396016,34,"draw.modifier.Highlight\n * @extends Ext.draw.modifier.Modifier\n *\n * Highlight is a modifier that will override the attributes\n * with its `highlightStyle` attributes when `highlighted` is true.\n */\r\nExt.define(\"Ext.draw.modifier.Highlight\", {\r\n    extend: Ext.draw.modifier.Modifier,\r\n    alias: 'modifier.highlight",1210336,48,"Boolean} enabled 'true' if the highlight is applied.\n         */\r\n        enabl",1790688,41,"Object} highlightStyle The style attributes of the highlight modifier.\n         */\r\n        highlightStyle: null\r\n    },\r\n    preFx: true,\r\n    applyHighlightStyle: function(style, oldStyle) {\r\n        oldStyle = oldStyle || {};\r\n        if (this.getSprite()) {\r\n            Ext.apply(oldStyle, this.getSprite().self.def.normalize(style)",2215824,38,"apply(oldStyle, sty",1059952,32,"oldStyle;\r\n    },\r\n    /**\n     * @inheritdoc\n     */\r\n    prepareAttributes: function(attr) {\r\n        if (!attr.hasOwnProperty('highlightOriginal')) {\r\n            attr.highlighted = false;\r\n            attr.highlightOriginal = Ext.Object.chain(attr",714957,32,"_previous) {\r\n            this._previous.prepareAttributes(attr.highlightOriginal",1444352,33,"Sprite: function(sprite, oldSprite) {\r\n        if (sprite) {\r\n            if (this.getHighlightStyle()) {\r\n                this._highlightStyle = sprite.self.def.normalize(this.getHighlightStyle",800223,38,"setHighlightStyle(sprite.config.highlightCfg);\r\n        }\r\n        // Before attaching to a sprite, register the highlight related\r\n        // attributes to its definition.\r\n        //\r\n        // TODO(zhangbei): Unfortunately this will effect all the sprites of the same type.\r\n        // As the redundant attributes would not effect performance, it is not yet a big problem.\r\n        var def = sprite.self.def;\r\n        this.setSprite(sprite);\r\n        def.setConfig({",2181391,43,"highlighted: false",873707,32,"ocessors: {\r\n                highlighted: 'boo",2110752,33,"liases: {\r\n                \"highlight\": \"highlighted\",\r\n                \"highlighting\": \"highlighted\"",2118276,33,"tyFlags: {},\r\n            updaters: {}",42158,38,"Filter modifier changes if overriding source attributes.\n     * @param {Object} attr The source attributes.\n     * @param {Object} changes The modifier changes.\n     * @return {*} The filtered changes.\n     */\r\n    filterChanges: function(attr, change",1330608,42,"name,\r\n            original = attr.highlightOriginal,\r\n            style = me.getHighlightStyle();\r\n        if (attr.highlighted) {\r\n            for (name in changes) {\r\n                if (style",367312,46,"// If it's highlighted, then save the changes to lower level\r\n                    // on overridden attributes.\r\n                    original[name] = changes[name];\r\n                    delete changes[n",170784,49,"}\r\n        for (name in changes) {\r\n            if (name !== 'highlighted' && original[name] === changes[name]) {\r\n                // If it's highlighted, then save the changes to lower level\r\n                // on overridden attributes.\r\n                delete changes",268751,32,1812524,51,"@inheritdoc\n     */\r\n    pushDown: function(attr, changes) {\r\n        var style = this.getHighlightStyle(),\r\n            original = attr.highlightOriginal,\r\n            oldHighlighted, name;\r\n",1613577,35,"'highlighted')) {\r\n            oldHighlighted = changes.highlighted;\r\n            // Hide `highlighted` and `highlightStyle` to underlying modifiers.\r\n            delete changes.highlighted;\r\n            if (this._previous) {\r\n                changes = this._previous.pushDown(original, change",110848,32,"changes = this.filterChanges(attr, changes);\r\n            if (oldHighlighted !== attr.highlighted) {\r\n                if (oldHighlighted) {\r\n                    // switching on\r\n                    // At this time, original should be empty.",240885,35,"style",1152322,32,"If changes[name] just changed the value in lower levels,\r\n",241078,32," in change",149056,34,"original[name] = changes",149008,33,241904,34,"    original[name] = attr",149008,33,"}\r\n                        if (original[name] !== style",140143,35,"    changes[name] = style",149008,33,285632,43," else {\r\n                    // switching off",240885,35,"style",282080,34,"(name in changes",5040,34,"changes[name] = original",149008,33,"}",1415413,33,"original",135181,63,"    // TODO: Need deletion API?\r\n                changes.highlighted = oldHighlighted",891232,52,"this._previous) {\r\n                changes = this._previous.pushDown(original, change",110848,32,"changes = this.filterChanges(attr, change",1419556,32,1812543,32,"@inheritdoc\n     */\r\n    popUp: function(attr, changes) {\r\n        changes = this.filterChanges(attr, changes);\r\n        Ext.draw.modifier.Modifier.prototype.popUp.call(this, attr, changes);\r\n    }\r\n});\r\n\r\n/**\n * A sprite is an object rendered in a drawing {@link Ext.draw.Surface}.\n * The Sprite class itself is an abstract class and is not meant to be used directly.\n * Every sprite in the Draw and Chart packages is a subclass of the Ext.draw.sprite.Sprite.\n * The standard Sprite subclasses are:\n *\n * * {@link Ext.draw.sprite.Path} - A sprite that represents a path.\n * * {@link Ext.draw.sprite.Rect} - A sprite that represents a rectangle.\n * * {@link Ext.draw.sprite.Circle} - A sprite that represents a circle.\n * * {@link Ext.draw.sprite.Sector} - A sprite representing a pie slice.\n * * {@link Ext.draw.sprite.Arc} - A sprite that represents a circular arc.\n * * {@link Ext.draw.sprite.Ellipse} - A sprite that represents an ellipse.\n * * {@link Ext.draw.sprite.EllipticalArc} - A sprite that represents an elliptical arc.\n * * {@link Ext.draw.sprite.Text} - A sprite that represents text.\n * * {@link Ext.draw.sprite.Image} -  A sprite that represents an image.\n * * {@link Ext.draw.sprite.Instancing} - A sprite that represents multiple instances based on the given template.\n * * {@link Ext.draw.sprite.Composite} - Represents a group of sprites.\n *\n * Sprites can be created with a reference to a {@link Ext.draw.Surface}\n *\n *      var drawComponent = Ext.create('Ext.draw.Component', {\n *          // ...\n *      });\n *\n *      var sprite = Ext.create('Ext.draw.sprite.Sprite', {\n *          type: 'circle',\n *          fill: '#ff0',\n *          surface: drawComponent.getSurface('main'),\n *          radius: 5\n *      });\n *\n * Sprites can also be added to the surface as a configuration object:\n *\n *      var sprite = drawComponent.getSurface('main').add({\n *          type: 'circle',\n *          fill: '#ff0',\n *          radius: 5\n *      });\n */\r\nExt.define('Ext.draw.sprite.Sprite', {\r\n    alias: 'sprite.sprite',",1317642,71,"isSprite: true",2114591,38,"def: {\r\n            processors: {\r\n",2170893,33,"    * @cfg {String} [strokeStyle=\"none\"] The color of the stroke (a CSS color value).\n    ",805983,33,"strokeStyle: \"color\",\r\n",2170893,33,"    * @cfg {String} [fillStyle=\"none\"] The color of the shape (a CSS color value).\n    ",805983,33,"fillStyle: \"color\",\r\n",2170893,33,"    * @cfg {Number} [strokeOpacity=1] The opacity of the stroke. Limited from 0 to 1.\n    ",805983,33,"strokeOpacity: \"limited01\",\r\n",2170893,33,"    * @cfg {Number} [fillOpacity=1] The opacity of the fill. Limited from 0 to 1.\n    ",805983,33,"fillOpacity: \"limited01\",\r\n",2170893,33,"    * @cfg {Number} [lineWidth=1] The width of the line stroke.\n    ",805983,33,"lineWidth: \"number\",\r\n",2170893,33,"    * @cfg {String} [lineCap=\"butt\"] The style of the line caps.\n    ",805983,33,"lineCap: \"enums(butt,round,square)\",\r\n",2170893,33,"    * @cfg {String} [lineJoin=\"miter\"] The style of the line join.\n    ",805983,33,"lineJoin: \"enums(round,bevel,miter)\",\r\n",2170893,33,"    * @cfg {Array} An array of non-negative numbers specifying a dash/space sequence.\n    ",805983,33,"lineDash: \"data\",\r\n",2170893,33,"    * @cfg {Number} A number specifying how far into the line dash sequence drawing commences.\n    ",805983,33,"lineDashOffset: \"number\",\r\n",2170893,33,"    * @cfg {Number} [miterLimit=1] Sets the distance between the inner corner and the outer corner where two lines meet.\n    ",805983,33,"miterLimit: \"number\",\r\n",2170893,33,"    * @cfg {String} [shadowColor=\"none\"] The color of the shadow (a CSS color value).\n    ",805983,33,"shadowColor: \"color\",\r\n",2170893,33,"    * @cfg {Number} [shadowOffsetX=0] The offset of the sprite's shadow on the x-axis.\n    ",805983,33,"shadowOffsetX: \"number\",\r\n",2170893,33,"    * @cfg {Number} [shadowOffsetY=0] The offset of the sprite's shadow on the y-axis.\n    ",805983,33,"shadowOffsetY: \"number\",\r\n",2170893,33,"    * @cfg {Number} [shadowBlur=0] The amount blur used on the shadow.\n    ",805983,33,"shadowBlur: \"number\",\r\n",2170893,33,"    * @cfg {Number} [globalAlpha=1] The opacity of the sprite. Limited from 0 to 1.\n    ",805983,33,"globalAlpha: \"limited01\",\r\n                globalCompositeOperation: \"enums(source-over,destination-over,source-in,destination-in,source-out,destination-out,source-atop,destination-atop,lighter,xor,copy)\",\r\n",2170893,33,"    * @cfg {Boolean} [hidden=false] Determines whether or not the sprite is hidden.\n    ",805983,33,"hidden: \"bool\",\r\n",2170893,33,"    * @cfg {Boolean} [transformFillStroke=false] Determines whether the fill and stroke are affected by sprite transformations.\n    ",805983,34,"ransformFillStroke: \"bool\",\r\n",2170893,33,"    * @cfg {Number} [zIndex=0] The stacking order of the sprite.\n    ",805983,33,"zIndex: \"number\",\r\n",2170893,33,"    * @cfg {Number} [translationX=0] The translation of the sprite on the x-axis.\n    ",805983,34,"ranslationX: \"number\",\r\n",2170893,33,"    * @cfg {Number} [translationY=0] The translation of the sprite on the y-axis.\n    ",805983,34,"ranslationY: \"number\",\r\n",2170893,33,"    * @cfg {Number} [rotationRads=0] The degree of rotation of the sprite.\n    ",805983,33,"rotationRads: \"number\",\r\n",2170893,33,"    * @cfg {Number} [rotationCenterX=null] The central coordinate of the sprite's scale operation on the x-axis.\n    ",805983,33,"rotationCenterX: \"number\",\r\n",2170893,33,"    * @cfg {Number} [rotationCenterY=null] The central coordinate of the sprite's rotate operation on the y-axis.\n    ",805983,33,"rotationCenterY: \"number\",\r\n",2170893,33,"    * @cfg {Number} [scalingX=1] The scaling of the sprite on the x-axis.\n    ",805983,33,"scalingX: \"number\",\r\n",2170893,33,"    * @cfg {Number} [scalingY=1] The scaling of the sprite on the y-axis.\n    ",805983,33,"scalingY: \"number\",\r\n",2170893,33,"    * @cfg {Number} [scalingCenterX=null] The central coordinate of the sprite's scale operation on the x-axis.\n    ",805983,33,"scalingCenterX: \"number\",\r\n",2170893,33,"    * @cfg {Number} [scalingCenterY=null] The central coordinate of the sprite's scale operation on the y-axis.\n    ",805983,33,"scalingCenterY: \"number\",\r\n                constrainGradients: \"bool\"",1103565,33,"ases: {\r\n                \"stroke\": \"strokeStyle\",\r\n                \"fill\": \"fillStyle\",\r\n                \"color\": \"fillStyle\",\r\n                \"stroke-width\": \"lineWidth\",\r\n                \"stroke-linecap\": \"lineCap\",\r\n                \"stroke-linejoin\": \"lineJoin\",\r\n                \"stroke-miterlimit\": \"miterLimit\",\r\n                \"text-anchor\": \"textAlign\",\r\n                \"opacity\": \"globalAlpha\",\r\n                translateX: \"translationX\",\r\n                translateY: \"translationY\",\r\n                rotateRads: \"rotationRads\",\r\n                rotateCenterX: \"rotationCenterX\",\r\n                rotateCenterY: \"rotationCenterY\",\r\n                scaleX: \"scalingX\",\r\n                scaleY: \"scalingY\",\r\n                scaleCenterX: \"scalingCenterX\",\r\n                scaleCenterY: \"scalingCenterY\"",105727,33,"aults: {\r\n                hidden: false,\r\n                zIndex: 0,\r\n                strokeStyle: \"none\",\r\n                fillStyle: \"none\",\r\n                lineWidth: 1,\r\n                lineDash: [],\r\n                lineDashOffset: 0,\r\n                lineCap: \"butt\",\r\n                lineJoin: \"miter\",\r\n                miterLimit: 1,\r\n                shadowColor: \"none\",\r\n                shadowOffsetX: 0,\r\n                shadowOffsetY: 0,\r\n                shadowBlur: 0,\r\n                globalAlpha: 1,\r\n                strokeOpacity: 1,\r\n                fillOpacity: 1,\r\n                transformFillStroke: false,\r\n                translationX: 0,\r\n                translationY: 0,\r\n                rotationRads: 0,\r\n                rotationCenterX: null,\r\n                rotationCenterY: null,\r\n                scalingX: 1,\r\n                scalingY: 1,\r\n                scalingCenterX: null,\r\n                scalingCenterY: null,\r\n                constrainGradients: false",2118276,33,"tyTriggers: {\r\n                hidden: \"canvas\",\r\n                zIndex: \"zIndex\",\r\n                globalAlpha: \"canvas\",\r\n                globalCompositeOperation: \"canvas\",\r\n                transformFillStroke: \"canvas\",\r\n                strokeStyle: \"canvas\",\r\n                fillStyle: \"canvas\",\r\n                strokeOpacity: \"canvas\",\r\n                fillOpacity: \"canvas\",\r\n                lineWidth: \"canvas\",\r\n                lineCap: \"canvas\",\r\n                lineJoin: \"canvas\",\r\n                lineDash: \"canvas\",\r\n                lineDashOffset: \"canvas\",\r\n                miterLimit: \"canvas\",\r\n                shadowColor: \"canvas\",\r\n                shadowOffsetX: \"canvas\",\r\n                shadowOffsetY: \"canvas\",\r\n                shadowBlur: \"canvas\",\r\n                translationX: \"transform\",\r\n                translationY: \"transform\",\r\n                rotationRads: \"transform\",\r\n                rotationCenterX: \"transform\",\r\n                rotationCenterY: \"transform\",\r\n                scalingX: \"transform\",\r\n                scalingY: \"transform\",\r\n                scalingCenterX: \"transform\",\r\n                scalingCenterY: \"transform\",\r\n                constrainGradients: \"canvas\"\r\n            },\r\n            updaters: {\r\n                \"bbox\": function(attrs) {\r\n                    attrs.bbox.plain",1808638,36,"attrs.bbox.transform",1808638,36,"if (attrs.rotationRads !== 0 && (attrs.rotationCenterX === null || attrs.rotationCenterY === null) || ((attrs.scalingX !== 1 || attrs.scalingY !== 1) && (attrs.scalingCenterX === null || attrs.scalingCenterY === null))",282080,34,"attrs.dirtyFlags.transform",218592,33,"attrs.dirtyFlags.transform = []",340080,70,",\r\n                \"zIndex\": function(attrs) {\r\n                    attrs.dirtyZIndex = true",274684,39,"\"transform\": function(attrs) {\r\n                    attrs.dirtyTransform = true;\r\n                    attrs.bbox.transform",1808638,32,2169392,34,1576416,37,"attr\n     * The visual attributes of the sprite, e.g. strokeStyle, fillStyle, lineWidth...\n     */\r\n    attr: {},\r\n    config: {\r\n        parent: null",1199263,53,") {\r\n        var initCfg = Class.superclass.self.def.initialConfig,\r\n            cfg;\r\n        if (member.inheritableStatics && member.inheritableStatics.def) {\r\n            cfg = Ext.merge({}, initCfg, member.inheritableStatics.def);\r\n            Class.def = Ext.create(\"Ext.draw.sprite.AttributeDefinition\", cfg);\r\n            delete member.inheritableStatics.def",114656,33,"Class.def = Ext.create(\"Ext.draw.sprite.AttributeDefinition\", initCfg);",2228699,47,"config) {\r\n        if (this.$className === 'Ext.draw.sprite.Sprite') {\r\n            throw 'Ext.draw.sprite.Sprite is an abstract class';\r\n        }",1876367,42,"var me = this;\r\n        me.id = config.id || Ext.id(null, 'ext-sprite-');\r\n        me.attr = {}",1620757,43,"var modifiers = Ext.Array.from(config.modifiers, true);\r\n        me.prepareModifiers(modifiers);\r\n        me.initializeAttributes();\r\n        me.setAttributes(me.self.def.getDefaults(), true);\r\n        me.setAttributes(config);\r\n    },\r\n    get",1261085,36,"this.attr.dirty;\r\n    },\r\n    setDirty: function(dirty) {\r\n        if ((this.attr.dirty = dirty)) {\r\n            if (this._parent) {\r\n                this._parent.setDirty(tru",358735,35,"},\r\n    addModifier: function(modifier, reinitializeAttribute",1286704,38,"if (!(modifier instanceof Ext.draw.modifier.Modifier)) {\r\n            modifier = Ext.factory(modifier, null, null, 'modifier');\r\n        }\r\n        modifier.setSprite(this);\r\n        if (modifier.preFx || modifier.config && modifier.config.preFx) {\r\n            if (me.fx.getPrevious()) {\r\n                me.fx.getPrevious().setNext(modifier",1878495,34,"ifier.setNext(me.fx",689264,37,"topModifier.getPrevious().setNext(modifier);\r\n            modifier.setNext(me.topModifier);\r\n        }\r\n        if (reinitializeAttributes) {\r\n            me.initializeAttributes",2008896,32,"odifier;\r\n    },\r\n    prepareModifiers: function(additionalModifiers) {\r\n        // Set defaults",1579968,41,"ifier, i, ln;\r\n        me.topModifier = new Ext.draw.modifier.Target({\r\n            sprite: me\r\n        });\r\n        // Link modifiers\r\n        me.fx = new Ext.draw.modifier.Animation({\r\n            sprit",1502089,32,"x.setNext(me.topModifier);\r\n        for (i = 0 , ln = additionalModifi",521134,40,"me.addModifier(additionalModifiers[i], ",2183276,32,"initializeAttribut",2028047,39,";\r\n        me.topModifier.prepareAttributes(me.attr);\r\n    },\r\n    updateDirtyFlags: function(attr",1330608,42,"dirtyFlags = attrs.dirtyFlags,\r\n            flags,\r\n            updaters = me.self.def._updaters,\r\n            any = false,\r\n            dirty",2086525,38,"do {\r\n            any = false;\r\n            for (flag in dirtyFlags) {\r\n                me.updateDirtyFlags",795798,33,"flags = dirtyFlags[flag];\r\n                delete dirtyFlags[flag];\r\n                if (updaters[flag]",174349,32,"s[flag].call(me, attrs, flag",148144,40,"any",188547,33,"me.updateDirtyFlags;\r\n            }\r\n            dirty = dirty || any;\r\n        } while (any);\r\n        if (dirty) {\r\n            me.setDirty(",838158,42,"Set attributes of the sprite",397024,32,"changes The content of the change.\n     * @param {Boolean} [bypassNormalization] `true` to avoid normalization of the given changes.\n     * @param {Boolean} [avoidCopy] `true` to avoid copying the `changes` object.\n     * The content of object may be destroyed.\n     */\r\n    setAttributes: function(changes, bypassNormalization, avoidCopy) {\r\n        var attributes = this.attr;\r\n        if (bypassNormalization) {\r\n            if (avoidCopy) {\r\n                this.topModifier.pushDown(attributes, chang",7696,44,"this.topModifier.pushDown(attributes, Ext.apply({}, changes)",891231,49,"this.topModifier.pushDown(attributes, this.self.def.normalize(change",951152,41,"et attributes of the sprite, assuming the names and values have already been\n     * normalized.\n     *\n     * @deprecated Use setAttributes directy with bypassNormalization argument being",1293072,33,"hanges The content of the change.\n     * @param {Boolean} [avoidCopy] `true` to avoid copying the `changes` object.\n     * The content of object may be destroyed.\n     */\r\n    setAttributesBypassingNormalization: function(changes, avoidCopy) {\r\n        return this.setAttributes(changes, true, avoidCop",929439,40,"bounding box for the given Sprite as calculated with the Canvas engin",335072,34,"[isWithoutTransform] Whether to calculate the bounding box with the current transforms or not.\n     */\r\n    getBBox: function(isWithoutTransform",449776,41,"attr = me.attr,\r\n            bbox = attr.bbox,\r\n            plain = bbox.plain,\r\n            transform = bbox.transform;\r\n        if (plain.dirty) {\r\n            me.updatePlainBBox(plain);\r\n            plain.dirty",2200992,34,"isWithoutTransform) {\r\n            return plai",114655,34,"me.applyTransformations();\r\n            if (transform.dirty) {\r\n                me.updateTransformedBBox(transform, plain);\r\n                transform.dirty",1165456,34,"    return transform",1078160,40,"otected\n     * Subclass will fill the plain object with `x`, `y`, `width`, `height` information of the plain bounding box of\n     * this sprite",397024,32,"plain Target object.\n     */\r\n    updatePlainBBox",1073801,34,"otected\n     * Subclass will fill the plain object with `x`, `y`, `width`, `height` information of the transformed\n     * bounding box of this sprite",397024,32,"transform Target",447933,32,"plain Auxiliary object providing information of plain object.\n     */\r\n    updateTransformedBBox: function(transform, plain) {\r\n        this.attr.matrix.transformBBox(plain, 0, transform);\r\n    },\r\n    /**\n     * Subclass can rewrite this function to gain better performance.\n     * @param {Boolean} isWithoutTransform",2046368,40,"BBoxCenter: function(isWithoutTransform) {\r\n        var bbox = this.getBBox(isWithoutTransform);\r\n        if (bbox",28493,43,"bbox.x + bbox.width * 0.5,\r\n                bbox.y + bbox.height * 0.5",2149050,48,"return",450047,68,"\r\n    },\r\n    /**\n     * Hide the sprite.\n     * @return {Ext.draw.sprite.Sprite",1246447,38,1083102,33,"attr.hidden = true;\r\n        this.setDirty(true",434528,49,"Show the sprite.\n     * @return {Ext.draw.sprite.Sprite",1408911,39,1082904,32,"attr.hidden = false;\r\n        this.setDirty(true",434528,49,"Applies sprite's attributes to the given context.\n     * @param {Object} ctx Context to apply sprite's attributes to.\n     * @param {Array} region The region of the context to be affected by gradients.\n     */\r\n    useAttributes: function(ctx, region) {\r\n        this.applyTransformations();\r\n        var attrs = this.attr,\r\n            canvasAttributes = attrs.canvasAttributes,\r\n            strokeStyle = canvasAttributes.strokeStyle,\r\n            fillStyle = canvasAttributes.fillStyle,\r\n            lineDash = canvasAttributes.lineDash,\r\n            lineDashOffset = canvasAttributes.lineDashOffset",2082332,32,"strokeStyle) {\r\n            if (strokeStyle.isGradient) {\r\n                ctx.strokeStyle = 'black';\r\n                ctx.strokeGradient = strokeStyl",2152704,42,"ctx.strokeGradient",1165456,35,"\r\n        if (fillStyle) {\r\n            if (fillStyle.isGradient) {\r\n                ctx.fillStyle = 'black';\r\n                ctx.fillGradient = fillStyl",2152704,42,"ctx.fillGradient",1165456,35,"\r\n        if (lineDash && ctx.setLineDash) {\r\n            ctx.setLineDash(lineDash);\r\n        }\r\n        if (lineDashOffset && typeof ctx.lineDashOffset === 'number') {\r\n            ctx.lineDashOffset = lineDashOffset",538287,33,"canvasAttributes) {\r\n            if (canvasAttributes[id] !== undefined && canvasAttributes[id] !== ctx[id]) {\r\n                ctx[id] = canvasAttributes[id]",1587824,41,"attrs.constrainGradients) {\r\n            ctx.setGradientBBox({\r\n                x: region[0],\r\n                y: region[1],\r\n                width: region[2],\r\n                height: region[3]",2168527,49,"ctx.setGradientBBox(this.getBBox(attrs.transformFillStroke",1331648,54,"\n     * Calculates forward and inverse transform matrices.\n     * @param {Boolean} force Forces recalculation of transform matrices even when sprite's transform attributes supposedly haven't changed.\n     */\r\n    applyTransformations",2087196,33,"!force && !this.attr.dirtyTransfor",1535533,46,394417,32," = me.attr,\r\n            center = me.getBBoxCenter(true),\r\n            centerX = center[0],\r\n            centerY = center[1],\r\n            x = attr.translationX,\r\n            y = attr.translationY,\r\n            sx = attr.scalingX,\r\n            sy = attr.scalingY === null ? attr.scalingX : attr.scalingY,\r\n            scx = attr.scalingCenterX === null ? centerX : attr.scalingCenterX,\r\n            scy = attr.scalingCenterY === null ? centerY : attr.scalingCenterY,\r\n            rad = attr.rotationRads,\r\n            rcx = attr.rotationCenterX === null ? centerX : attr.rotationCenterX,\r\n            rcy = attr.rotationCenterY === null ? centerY : attr.rotationCenterY,\r\n            cos = Math.cos(rad),\r\n            sin = Math.sin(rad);\r\n        if (sx === 1 && sy === 1) {\r\n            scx = 0;\r\n            scy = 0;\r\n        }\r\n        if (rad === 0) {\r\n            rcx = 0;\r\n            rcy = 0;\r\n        }\r\n        attr.matrix.elements = [\r\n            cos * sx,\r\n            sin * sy,\r\n            -sin * sx,\r\n            cos * sy,\r\n            scx + (rcx - cos * rcx - scx + rcy * sin) * sx + x,\r\n            scy + (rcy - cos * rcy - scy + rcx * -sin) * sy + y\r\n        ];\r\n        attr.matrix.inverse(attr.inverseMatrix);\r\n        attr.dirtyTransform = false;\r\n        attr.bbox.transform.dirty ",1560719,32,"Called before rendering.\n     */\r\n    preRender: Ext.emptyFn,\r\n    /**\n     * Render method.\n     * @param {Ext.draw.Surface} surface The surface.\n     * @param {Object} ctx A context object compatible with CanvasRenderingContext2D.\n     * @param {Array} region The clip region (or called dirty rect) of the current rendering. Not be confused\n     * with `surface.getRegion()`.\n     *\n     * @return {*} returns `false` to stop rendering in this frame. All the sprite haven't been rendered\n     * will have their dirty flag untouched.\n     */\r\n    render: Ext.emptyFn,",305471,41,580262,49," && !(parent instanceof Ext.draw.Surface)) {",580351,63,"if (parent) {\r\n            parent.renderFrame",1120224,39,"Removes the sprite and clears all listeners.",1643488,45,1818832,35,"r = me.topModifier,\r\n            curr;\r\n        while (modifier) {\r\n            curr = modifier;\r\n            modifier = modifier.getPrevious();\r\n            cur",1394748,33,"delete me.attr;\r\n        me",824268,33,"if (me.fireEvent('beforedestroy', me) !== fals",571946,32,"destroy', me",2079936,50,", function() {\r\n    this.def = Ext.create(\"Ext.draw.sprite.AttributeDefinition\", this.def);\r\n});\r\n\r\n(function() {\r\n    var PI2_3 = 2.0943951023931953,\r\n        /* 120 Deg */\r\n        abs = Math.abs,\r\n        sin = Math.cos,\r\n        cos = Math.cos,\r\n        acos = Math.acos,\r\n        sqrt = Math.sqrt,\r\n        exp = Math.exp,\r\n        log = Math.log",2221824,33," Singleton Class that provides methods to solve cubic equation.\n     */\r\n    Ext.define(\"Ext.draw.Solver\"",1003216,39,"/**\n         * Cubic root of number\n         * @param {Number} number\n         */\r\n        cubicRoot: function(number) {\r\n            if (number > 0) {\r\n                return exp(log(number) / 3);\r\n            } else if (number < 0) {\r\n                return -exp(log(-number) / 3",395584,42,"return 0",294352,53,"Returns the function f(x) = a * x + b and solver for f(x) = y\n         * @param {Number} a\n         * @param {Number} b\n         */\r\n        linearFunction:",108493,35,"result;\r\n            if (a === 0) {\r\n                result = function(",2116416,33,"b",6735,39,"result.solve = function(y) {\r\n                    // if y == d there should be a real root\r\n                    // but we can ignore it for geometry calculations.\r\n    ",64938,40,"    ",515279,44,"sult = function(",2116416,33,"a * t + b",6735,39,"result.solve = function(y",38768,32,"[\r\n                        (y - b) / a\r\n    ",1760239,36,"}",611840,37,"result",16624,46,"the function f(x) = a * x ^ 2 + b * x + c and solver for f(x) = y",1792950,39,"a\n         * @param {Number} b\n         * @param {Number} c\n         */\r\n        quadraticFunction: function(a, b, c) {\r\n            var result;\r\n            if (a === 0",224254,33,"linearFunction(b, c",395584,42,"// Quadratic equation.\r\n                result = function(",2116416,33,"(a * t + b) * t + c",6735,39,"var delta0temp = b * b - 4 * a * c,\r\n                    delta = function(y",53200,36,"delta0temp + 4 * a * y;",312713,47,"olveTemp0 = 1 / a * 0.5,\r\n                    solveTemp1 = -solveTemp0 * b;\r\n                solveTemp0 = abs(solveTemp0);\r\n                result.solve = function(y) {\r\n                    var deltaTemp = delta(y);\r\n                    if (deltaTemp",1996622,33,"return [",215808,43,"    deltaTemp = sqrt(deltaTemp);\r\n                    // have to distinct roots here.\r\n        ",65252,38,"        solveTemp1 - deltaTemp * solveTemp0,\r\n                        solveTemp1 + deltaTemp * solveTemp0\r\n    ",1760239,36,"}",611840,37,"result",16624,46,"the function f(x) = a * x^3 + b * x^2 + c * x + d and solver for f(x) = y\n         * @param {Number} a\n         * @param {Number} b\n         * @param {Number} c\n         * @param {Number} d\n         */\r\n        cubicFunction: function(a, b, c, d) {\r\n            var result;\r\n            if (a === 0",224254,33,"quadraticFunction(b, c, d",395584,42,"result = function(",2116416,33,"((a * t + b) * t + c) * t + d",6735,39,"var b_a_3 = b / a / 3,\r\n                    c_a = c / a,\r\n                    d_a = d / a,\r\n                    b2 = b_a_3 * b_a_3,\r\n                    deltaTemp0 = (b_a_3 * c_a - d_a) * 0.5 - b_a_3 * b2,\r\n                    deltaTemp1 = b2 - c_a / 3,\r\n                    deltaTemp13 = deltaTemp1 * deltaTemp1 * deltaTemp1;\r\n                if (deltaTemp1 === 0",1181670,32,"solve = function(y",53200,36,"[\r\n                            -b_a_3 + this.cubicRoot(deltaTemp0 * 2 + y / a)\r\n        ",1760239,36,286224,54,"if (deltaTemp1 > 0",103231,33,"deltaTemp1_2 = sqrt(deltaTemp1),",297728,32,"ltaTemp13_2 = deltaTemp1_2 * deltaTemp1_2 * deltaTemp1_2;\r\n                        deltaTemp1_2 += deltaTemp1_2",325008,46,"result.solve = function(y) {\r\n                        y /= a;\r\n                        var d0 = deltaTemp0 + y * 0.5,",297728,32,"ltaTemp = d0 * d0 - deltaTemp13",2055199,33,"ltaTemp >",2159712,38,"taTemp = sqrt(deltaTemp",228800,38,659152,36,"-b_a_3 + this.cubicRoot(d0 + deltaTemp) + this.cubicRoot(d0 - deltaTemp)\r\n            ",1760239,36,"        } else if (deltaTemp =",2159710,37,"var cr = this.cubicRoot(d0)",1211776,35,"root0 = -b_a_3 - c",104158,36,"d0 >=",1996624,39,"return",659152,36,"    root0",1212320,39,"root0",1212320,39,"-b_a_3 + 2 * cr",92768,34,95088,32,241904,34,65256,34,"                    -b_a_3 + 2 * cr",1212320,39,"root0",1212320,39,"root0",92768,34,95088,32,"}\r\n    ",10749,54,"    var theta = acos(d0 / deltaTemp13_2) / 3",1211776,35,"ra = deltaTemp1_2 * cos(theta) - b_a_3",1211776,35,"rb = deltaTemp1_2 * cos(theta + PI2_3) - b_a_3",1211776,35,"rc = deltaTemp1_2 * cos(theta - PI2_3) - b_a_3",104159,35,"ra < rb",218592,33,"    if (rb < rc",218592,33,65256,34,"                        ra",1212320,43,"rb",1212320,43,"rc",92768,38,95088,37," else if (ra < rc",218592,33,65256,34,"                        ra",1212320,43,"rc",1212320,43,"rb",92768,38,95088,37,94576,45,"return",659152,36,"        rc",1212320,43,"ra",1212320,43,"rb",92768,38,95088,68,94576,41,"if (ra < rc",218592,33,65256,34,"                        rb",1212320,43,"ra",1212320,43,"rc",92768,38,95088,37," else if (rb < rc",218592,33,65256,34,"                        rb",1212320,43,"rc",1212320,43,"ra",92768,38,95088,37,94576,45,"return",659152,36,"        rc",1212320,43,"rb",1212320,43,"ra",92768,38,95088,118,172320,49,1182318,36,"createBezierSolver: function(a, b, c, d) {\r\n            return this.cubicFunction(3 * (b - c) + d - a, 3 * (a - 2 * b + c), 3 * (b - a), a);\r\n        }\r\n    });\r\n})();\r\n\r\n/**\n * Class representing a path.\n * Designed to be compatible with [CanvasPathMethods](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvaspathmethods)\n * and will hopefully be replaced by the browsers' implementation of the Path object.\n */\r\nExt.define('Ext.draw.Path', {\r\n    statics: {\r\n        pathRe: /,?([achlmqrstvxz]),?/gi,\r\n        pathRe2: /-/gi,\r\n        pathSplitRe: /\\s|,/g\r\n    },\r\n    svgString: '',\r\n    /**\n     * Create a path from pathString\n     * @constructor\n     * @param {String} pathString",1566672,36,"pathStrin",2253663,42,"oords = [];\r\n        me.types = [];\r\n        me.cursor = null;\r\n        me.startX = 0;\r\n        me.startY = 0;\r\n        me.solvers = {};\r\n        if (pathString) {\r\n            me.fromSvgString(pathString",1240432,38,"Clear the path",931497,71,"coords.length = 0;\r\n        me.types.length = 0;\r\n        me.cursor = null;\r\n        me.startX = 0;\r\n        me.startY = 0;\r\n        me.solvers = {};\r\n        me.dirt",1579392,43,"/\r\n    dirt: function() {\r\n        this.svgString = '';\r\n    },\r\n    /**\n     * Move to a",973500,34,"x\n     * @param {Number} y\n     */\r\n    moveTo",1993680,41,";\r\n        if (!me.cursor) {\r\n            me.cursor = [\r\n                x,\r\n                y",450254,37,"me.coords.push(x, y);\r\n        me.types.push('M');\r\n        me.startX = x;\r\n        me.startY = y;\r\n        me.cursor[0] = x;\r\n        me.cursor[1] = y;\r\n        me.dirt();\r\n    },\r\n    /**\n     * A straight line to a",973500,34,"x\n     * @param {Number} y\n     */\r\n    lineTo",1993680,41,";\r\n        if (!me.cursor) {\r\n            me.cursor = [\r\n                x,\r\n                y\r\n            ];\r\n            me.coords.push(x, y);\r\n            me.types.push('M",469936,35,"me.coords.push(x, y);\r\n            me.types.push('L');\r\n        }\r\n        me.cursor[0] = x;\r\n        me.cursor[1] = y;\r\n        me.dirt();\r\n    },\r\n    /**\n     * A cubic bezier curve to a",973500,34,"cx1\n     * @param {Number} cy1\n     * @param {Number} cx2\n     * @param {Number} cy2\n     * @param {Number} x\n     * @param {Number} y\n     */\r\n    bezierCurveTo: function(cx1, cy1, cx2, cy2, x, y",1486240,41,"!me.cursor) {\r\n            me.moveTo(cx1, cy1);\r\n        }\r\n        me.coords.push(cx1, cy1, cx2, cy2, x, y);\r\n        me.types.push('C');\r\n        me.cursor[0] = x;\r\n        me.cursor[1] = y;\r\n        me.dirt();\r\n    },\r\n    /**\n     * A quadratic bezier curve to a",973500,34,"cx\n     * @param {Number} cy\n     * @param {Number} x\n     * @param {Number} y\n     */\r\n    quadraticCurveTo: function(cx, cy, x, y",1486240,41,"!me.cursor) {\r\n            me.moveTo(cx, cy);\r\n        }\r\n        me.bezierCurveTo((me.cursor[0] * 2 + cx) / 3, (me.cursor[1] * 2 + cy) / 3, (x * 2 + cx) / 3, (y * 2 + cy) / 3",993695,33,"Close this path with a straight line.\n     */\r\n    closePath",1998464,37,";\r\n        if (me.cursor) {\r\n            me.types.push('Z');\r\n            me.dir",1120223,40,"Create a elliptic arc curve compatible with SVG's arc to instruction.\n     *\n     * The curve start from (`x1`, `y1`) and ends at (`x2`, `y2`). The ellipse\n     * has radius `rx` and `ry` and a rotation of `rotation`.\n     * @param {Number} x1\n     * @param {Number} y1\n     * @param {Number} x2\n     * @param {Number} y2\n     * @param {Number} [rx]\n     * @param {Number} [ry]\n     * @param {Number} [rotation]\n     */\r\n    arcTo: function(x1, y1, x2, y2, rx, ry, rota",687933,41,"if (ry",1900511,32,"y = rx;\r\n        }\r\n        if (rotation",1900511,32,"otation = 0;\r\n        }\r\n        if (!me.cursor) {\r\n            me.moveTo(x1, y1);",1900528,46,"rx === 0 || ry === 0) {\r\n            me.lineTo(x1, y1);",1102304,42,"x2 -= x1;\r\n        y2 -= y1;\r\n        var x0 = me.cursor[0] - x1,\r\n            y0 = me.cursor[1] - y1,\r\n            area = x2 * y0 - y2 * x0,\r\n            cos, sin, xx, yx, xy, yy,\r\n            l0 = Math.sqrt(x0 * x0 + y0 * y0),\r\n            l2 = Math.sqrt(x2 * x2 + y2 * y2),\r\n            dist, cx, cy;\r\n        // cos rx, -sin ry , x1 - cos rx x1 + ry sin y1\r\n        // sin rx, cos ry, -rx sin x1 + y1 - cos ry y1\r\n        if (area === 0) {\r\n            me.lineTo(x1, y1);",1900528,46,"ry !== rx) {\r\n            cos = Math.cos(rotation);\r\n            sin = Math.sin(rotation);\r\n            xx = cos / rx;\r\n            yx = sin / ry;\r\n            xy = -sin / rx;\r\n            yy = cos / ry;\r\n            var temp = xx * x0 + yx * y0;\r\n            y0 = xy * x0 + yy * y0;\r\n            x0 = temp;\r\n            temp = xx * x2 + yx * y2;\r\n            y2 = xy * x2 + yy * y2;\r\n            x2 = temp",114656,33,"x0 /= rx;\r\n            y0 /= ry;\r\n            x2 /= rx;\r\n            y2 /= ry;\r\n        }\r\n        cx = x0 * l2 + x2 * l0;\r\n        cy = y0 * l2 + y2 * l0;\r\n        dist = 1 / (Math.sin(Math.asin(Math.abs(area) / (l0 * l2)) * 0.5) * Math.sqrt(cx * cx + cy * cy));\r\n        cx *= dist;\r\n        cy *= dist;\r\n        var k0 = (cx * x0 + cy * y0) / (x0 * x0 + y0 * y0),\r\n            k2 = (cx * x2 + cy * y2) / (x2 * x2 + y2 * y2);\r\n        var cosStart = x0 * k0 - cx,\r\n            sinStart = y0 * k0 - cy,\r\n            cosEnd = x2 * k2 - cx,\r\n            sinEnd = y2 * k2 - cy,\r\n            startAngle = Math.atan2(sinStart, cosStart),\r\n            endAngle = Math.atan2(sinEnd, cosEnd);\r\n        if (area > 0) {\r\n            if (endAngle < startAngle) {\r\n                endAngle += Math.PI * 2",891232,52,"startAngle < endAngle) {\r\n                startAngle += Math.PI * 2",1587824,41,"ry !== rx) {\r\n            cx = cos * cx * rx - sin * cy * ry + x1;\r\n            cy = sin * cy * ry + cos * cy * ry + y1;\r\n            me.lineTo(cos * rx * cosStart - sin * ry * sinStart + cx, sin * rx * cosStart + cos * ry * sinStart + cy);\r\n            me.ellipse(cx, cy, rx, ry, rotation, startAngle, endAngle, area < 0",689264,34,"cx = cx * rx + x1;\r\n            cy = cy * ry + y1;\r\n            me.lineTo(rx * cosStart + cx, ry * sinStart + cy);\r\n            me.ellipse(cx, cy, rx, ry, rotation, startAngle, endAngle, area < 0",1240432,38,"Create an elliptic arc.\n     *\n     * See [the whatwg reference of ellipse](http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-ellipse)",1293150,32,"cx\n     * @param {Number} cy\n     * @param {Number} radiusX\n     * @param {Number} radiusY\n     * @param {Number} rotation\n     * @param {Number} startAngle\n     * @param {Number} endAngle\n     * @param {Number} anticlockwise\n     */\r\n    ellipse: function(cx, cy, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwis",1511760,42,"coords = me.coords,\r\n            start = coords.length,\r\n            count, i, j;\r\n        if (endAngle - startAngle >= Math.PI * 2) {\r\n            me.ellipse(cx, cy, radiusX, radiusY, rotation, startAngle, startAngle + Math.PI, anticlockwise);\r\n            me.ellipse(cx, cy, radiusX, radiusY, rotation, startAngle + Math.PI, endAngle, anticlockwise);",1900528,46,"!anticlockwise) {\r\n            if (endAngle < startAngle) {\r\n                endAngle += Math.PI * 2",775007,32,"unt = me.approximateArc(coords, cx, cy, radiusX, radiusY, rotation, startAngle, endAngle",689264,34,"if (startAngle < endAngle) {\r\n                startAngle += Math.PI * 2",775007,32,"unt = me.approximateArc(coords, cx, cy, radiusX, radiusY, rotation, endAngle, startAngle);\r\n            for (i = start , j = coords.length - 2; i < j; i += 2 , j -= 2) {\r\n                var temp = coords[i];\r\n                coords[i] = coords[j];\r\n                coords[j] = temp;\r\n                temp = coords[i + 1];\r\n                coords[i + 1] = coords[j + 1];\r\n                coords[j + 1] = temp",2013936,42,"me.cursor) {\r\n            me.cursor = [\r\n                coords[coords.length - 2],\r\n                coords[coords.length - 1]\r\n            ];\r\n            me.types.push('M",469936,35,"me.cursor[0] = coords[coords.length - 2];\r\n            me.cursor[1] = coords[coords.length - 1];\r\n            me.types.push('L'",458960,32,"2; i < count; i += 6) {\r\n            me.types.push('C');\r\n        }\r\n        me.dirt(",403248,33," an circular arc",1293150,32,"x\n     * @param {Number} y\n     * @param {Number} radius\n     * @param {Number} startAngle\n     * @param {Number} endAngle\n     * @param {Number} anticlockwise\n     */\r\n    arc: function(x, y, radius, startAngle, endAngle, anticlockwise) {\r\n        this.ellipse(x, y, radius, radius, 0, startAngle, endAngle, anticlockwise);\r\n    },\r\n    /**\n     * Draw a rectangle and close it",1293150,32,"x\n     * @param {Number} y\n     * @param {Number} width\n     * @param {Number} height\n     */\r\n    rect: function(x, y, width, height) {\r\n        if (width == 0 || height == ",1022416,46,"var me = this;\r\n        me.moveTo(x, y);\r\n        me.lineTo(x + width, y);\r\n        me.lineTo(x + width, y + height);\r\n        me.lineTo(x, y + height);\r\n        me.closePath",1579392,44,"@param {Array} result\n     * @param {Number} cx\n     * @param {Number} cy\n     * @param {Number} rx\n     * @param {Number} ry\n     * @param {Number} phi\n     * @param {Number} theta1\n     * @param {Number} theta2",1412271,38,"approximateArc: function(result, cx, cy, rx, ry, phi, theta1, theta2) {\r\n        var cosPhi = Math.cos(phi),\r\n            sinPhi = Math.sin(phi),\r\n            cosTheta1 = Math.cos(theta1),\r\n            sinTheta1 = Math.sin(theta1),\r\n            xx = cosPhi * cosTheta1 * rx - sinPhi * sinTheta1 * ry,\r\n            yx = -cosPhi * sinTheta1 * rx - sinPhi * cosTheta1 * ry,\r\n            xy = sinPhi * cosTheta1 * rx + cosPhi * sinTheta1 * ry,\r\n            yy = -sinPhi * sinTheta1 * rx + cosPhi * cosTheta1 * ry,\r\n            rightAngle = Math.PI / 2,\r\n            count = 2,\r\n            exx = xx,\r\n            eyx = yx,\r\n            exy = xy,\r\n            eyy = yy,\r\n            rho = 0.547443256150549,\r\n            temp, y1, x3, y3, x2, y2;\r\n        theta2 -= theta1;\r\n        if (theta2 < 0) {\r\n            theta2 += Math.PI * 2;\r\n        }\r\n        result.push(xx + cx, xy + cy);\r\n        while (theta2 >= rightAngle) {\r\n            result.push(exx + eyx * rho + cx, exy + eyy * rho + cy, exx * rho + eyx + cx, exy * rho + eyy + cy, eyx + cx, eyy + cy);\r\n            count += 6;\r\n            theta2 -= rightAngle;\r\n            temp = exx;\r\n            exx = eyx;\r\n            eyx = -temp;\r\n            temp = exy;\r\n            exy = eyy;\r\n            eyy = -temp;\r\n        }\r\n        if (theta2) {\r\n            y1 = (0.3294738052815987 + 0.012120855841304373 * theta2) * theta2;\r\n            x3 = Math.cos(theta2);\r\n            y3 = Math.sin(theta2);\r\n            x2 = x3 + y1 * y3;\r\n            y2 = y3 - y1 * x3;\r\n            result.push(exx + eyx * y1 + cx, exy + eyy * y1 + cy, exx * x2 + eyx * y2 + cx, exy * x2 + eyy * y2 + cy, exx * x3 + eyx * y3 + cx, exy * x3 + eyy * y3 + cy);\r\n            count += 6",1566877,60,"[http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes](http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes)\n     * @param {Number} rx\n     * @param {Number} ry\n     * @param {Number} rotation Differ from svg spec, this is radian.\n     * @param {Number} fA\n     * @param {Number} fS\n     * @param {Number} x2\n     * @param {Number} y2\n     */\r\n    arcSvg: function(rx, ry, rotation, fA, fS, x2, y2) {\r\n        if (rx < 0) {\r\n            rx = -rx;\r\n        }\r\n        if (ry < 0) {\r\n            ry = -ry",1460120,50,"x1 = me.cursor[0],\r\n            y1 = me.cursor[1],\r\n            hdx = (x1 - x2) / 2,\r\n            hdy = (y1 - y2) / 2,\r\n            cosPhi = Math.cos(rotation),\r\n            sinPhi = Math.sin(rotation),\r\n            xp = hdx * cosPhi + hdy * sinPhi,\r\n            yp = -hdx * sinPhi + hdy * cosPhi,\r\n            ratX = xp / rx,\r\n            ratY = yp / ry,\r\n            lambda = ratX * ratX + ratY * ratY,\r\n            cx = (x1 + x2) * 0.5,\r\n            cy = (y1 + y2) * 0.5,\r\n            cpx = 0,\r\n            cpy = 0;\r\n        if (lambda >= 1) {\r\n            lambda = Math.sqrt(lambda);\r\n            rx *= lambda;\r\n            ry *= lambda;\r\n        } else // me gives lambda == cpx == cpy == 0;\r\n        {\r\n            lambda = Math.sqrt(1 / lambda - 1);\r\n            if (fA === fS) {\r\n                lambda = -lambda;\r\n            }\r\n            cpx = lambda * rx * ratY;\r\n            cpy = -lambda * ry * ratX;\r\n            cx += cosPhi * cpx - sinPhi * cpy;\r\n            cy += sinPhi * cpx + cosPhi * cpy;\r\n        }\r\n        var theta1 = Math.atan2((yp - cpy) / ry, (xp - cpx) / rx),\r\n            deltaTheta = Math.atan2((-yp - cpy) / ry, (-xp - cpx) / rx) - theta1;\r\n        if (fS) {\r\n            if (deltaTheta <= 0) {\r\n                deltaTheta += Math.PI * 2",891232,52,"deltaTheta >= 0) {\r\n                deltaTheta -= Math.PI * 2",515104,38,"e.ellipse(cx, cy, rx, ry, rotation, theta1, theta1 + deltaTheta, 1 - fS);\r\n    },\r\n    /**\n     * Feed the path from svg path",40845,32,"pathString\n     */\r\n    fromSvgString: function(pathString) {\r\n        if (!pathStr",2224416,52,"me = this,\r\n            parts,\r\n            paramCounts = {\r\n                a: 7,\r\n                c: 6,\r\n                h: 1,\r\n                l: 2,\r\n                m: 2,\r\n                q: 4,\r\n                s: 4,\r\n                t: 2,\r\n                v: 1,\r\n                z: 0,\r\n                A: 7,\r\n                C: 6,\r\n                H: 1,\r\n                L: 2,\r\n                M: 2,\r\n                Q: 4,\r\n                S: 4,\r\n                T: 2,\r\n                V: 1,\r\n                Z",877632,33,"lastCommand = '',\r\n            lastControlX, lastControlY,\r\n            lastX = 0,\r\n            lastY = 0,\r\n            part = false,\r\n            i, partLength, relative;\r\n        // Split the string to items.\r\n        if (Ext.isString(pathString)) {\r\n            parts = pathString.replace(Ext.draw.Path.pathRe, \" $1 \").replace(Ext.draw.Path.pathRe2, \" -\").split(Ext.draw.Path.pathSplitRe",394544,35,"pathString)) {\r\n            parts = pathString.join(',').split(Ext.draw.Path.pathSplitRe);\r\n        }\r\n        // Remove empty entries\r\n        for (i = 0 , partLength = 0; i < parts.",939223,32,"parts[i] !== '') {\r\n                parts[partLength++] = part",925644,41,"parts.length = partLength;\r\n        me.clear();\r\n        for (i = 0; i < parts.length; ) {\r\n            lastCommand = part;\r\n",217614,42,"relative = (part.toUpperCase() !== part);\r\n            i++;\r\n            switch (part) {\r\n                case 'M':\r\n                    me.moveTo(lastX = +parts[i], lastY = +parts[i + 1]);\r\n                    i += 2;\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".lineTo(lastX = +parts[i], lastY = +parts[i + 1]);\r\n                        i += 2",143903,47,"break;\r\n                case 'L':\r\n                    me.lineTo(lastX = +parts[i], lastY = +parts[i + 1]);\r\n                    i += 2;\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".lineTo(lastX = +parts[i], lastY = +parts[i + 1]);\r\n                        i += 2",143903,47,"break;\r\n                case 'A':\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".arcSvg(+parts[i], +parts[i + 1], +parts[i + 2] * Math.PI / 180, +parts[i + 3], +parts[i + 4], lastX = +parts[i + 5], lastY = +parts[i + 6]);\r\n                        i += 7",143903,47,"break;\r\n                case 'C':\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".bezierCurveTo(+parts[i], +parts[i + 1], lastControlX = +parts[i + 2], lastControlY = +parts[i + 3], lastX = +parts[i + 4], lastY = +parts[i + 5]);\r\n                        i += 6",143903,47,"break;\r\n                case 'Z':\r\n                    me.closePath()",650072,52,"'m':\r\n                    me.moveTo(lastX += +parts[i], lastY += +parts[i + 1]);\r\n                    i += 2;\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".lineTo(lastX += +parts[i], lastY += +parts[i + 1]);\r\n                        i += 2",143903,47,"break;\r\n",822006,47,"me.lineTo(lastX += +parts[i], lastY += +parts[i + 1]);\r\n                    i += 2;\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".lineTo(lastX += +parts[i], lastY += +parts[i + 1]);\r\n                        i += 2",143903,47,"break;\r\n                case 'a':\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".arcSvg(+parts[i], +parts[i + 1], +parts[i + 2] * Math.PI / 180, +parts[i + 3], +parts[i + 4], lastX += +parts[i + 5], lastY += +parts[i + 6]);\r\n                        i += 7",143903,47,820787,55,"while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".bezierCurveTo(lastX + (+parts[i]), lastY + (+parts[i + 1]), lastControlX = lastX + (+parts[i + 2]), lastControlY = lastY + (+parts[i + 3]), lastX += +parts[i + 4], lastY += +parts[i + 5]);\r\n                        i += 6",143903,47,"break;\r\n                case 'z':\r\n                    me.closePath()",650072,52,"'s':\r\n                    if (!(lastCommand === 'c' || lastCommand === 'C' || lastCommand === 's' || lastCommand === 'S')) {\r\n                        lastControlX = lastX;\r\n                        lastControlY = lastY",143903,47,"while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".bezierCurveTo(lastX + lastX - lastControlX, lastY + lastY - lastControlY, lastControlX = lastX + (+parts[i]), lastControlY = lastY + (+parts[i + 1]), lastX += +parts[i + 2], lastY += +parts[i + 3]);\r\n                        i += 4",143903,47,"break;\r\n                case 'S':\r\n                    if (!(lastCommand === 'c' || lastCommand === 'C' || lastCommand === 's' || lastCommand === 'S')) {\r\n                        lastControlX = lastX;\r\n                        lastControlY = lastY",143903,47,"while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".bezierCurveTo(lastX + lastX - lastControlX, lastY + lastY - lastControlY, lastControlX = +parts[i], lastControlY = +parts[i + 1], lastX = (+parts[i + 2]), lastY = (+parts[i + 3]));\r\n                        i += 4",143903,47,"break;\r\n                case 'q':\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".quadraticCurveTo(lastControlX = lastX + (+parts[i]), lastControlY = lastY + (+parts[i + 1]), lastX += +parts[i + 2], lastY += +parts[i + 3]);\r\n                        i += 4",143903,47,"break;\r\n                case 'Q':\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".quadraticCurveTo(lastControlX = +parts[i], lastControlY = +parts[i + 1], lastX = +parts[i + 2], lastY = +parts[i + 3]);\r\n                        i += 4",143903,47,"break;\r\n",820541,47,"if (!(lastCommand === 'q' || lastCommand === 'Q' || lastCommand === 't' || lastCommand === 'T')) {\r\n                        lastControlX = lastX;\r\n                        lastControlY = lastY",143903,47,"while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".quadraticCurveTo(lastControlX = lastX + lastX - lastControlX, lastControlY = lastY + lastY - lastControlY, lastX += +parts[i + 1], lastY += +parts[i + 2]);\r\n                        i += 2",143903,47,"break;\r\n                case 'T':\r\n                    if (!(lastCommand === 'q' || lastCommand === 'Q' || lastCommand === 't' || lastCommand === 'T')) {\r\n                        lastControlX = lastX;\r\n                        lastControlY = lastY",143903,47,"while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".quadraticCurveTo(lastControlX = lastX + lastX - lastControlX, lastControlY = lastY + lastY - lastControlY, lastX = (+parts[i + 1]), lastY = (+parts[i + 2]));\r\n                        i += 2",143903,47,"break;\r\n                case 'h':\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".lineTo(lastX += +parts[i], lastY);\r\n        ",340678,38,822574,48,"    case 'H':\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".lineTo(lastX = +parts[i], lastY);\r\n        ",340678,38,822574,48,"    case 'v':\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".lineTo(lastX, lastY += +parts[i]);\r\n        ",340678,38,822574,48,"    case 'V':\r\n                    while (i < partLength && !paramCounts.hasOwnProperty(parts[i]",148318,32,".lineTo(lastX, lastY = +parts[i]);\r\n        ",340678,38,822574,59,344496,43,"param {Number} x1\n     * @param {Number} y1\n     * @param {Number} x2\n     * @param {Number} y2\n     * @param {Number} x\n     * @param {Number} y",1412271,38,"rayTestLine: function(x1, y1, x2, y2, x, y) {\r\n        var cx;\r\n        if (y1 === y2) {\r\n            if (y === y1) {\r\n                if (Math.min(x1, x2) <= x && x <= Math.max(x1, x2",38767,33,"-1",381280,36,"else {\r\n",68057,39,"}\r\n        }\r\n        if (y1 < y && y < y2 || y2 < y && y < y1) {\r\n            cx = (y - y1) * (x2 - x1) / (y2 - y1) + x1;\r\n            if (cx === x) {\r\n",67999,40,"} else if (cx < x) {\r\n",68057,39,173680,33,"1",891232,48,"return 0",1078160,52," @param {Number} x1\n     * @param {Number} y1\n     * @param {Number} x2\n     * @param {Number} y2\n     * @param {Number} x3\n     * @param {Number} y3\n     * @param {Number} x4\n     * @param {Number} y4\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} idx\n     * @return {*}\n     */\r\n    rayTestCubicBezier: function(x1, y1, x2, y2, x3, y3, x4, y4, x, y, idx) {\r\n        if (Math.min(x1, x2, x3, x4) <= x && x <= Math.max(x1, x2, x3, x4)) {\r\n            if (Math.min(y1, y2, y3, y4) <= y && y <= Math.max(y1, y2, y3, y4)) {\r\n    ",116158,44,"    solver = me.solvers[idx] || (me.solvers[idx] = Ext.draw.Solver.createBezierSolver(x1, x2, x3, x4)),\r\n                    result = solver.solve(y);\r\n                return (+(x <= result[0] && 0 <= result[0] && result[0] <= 1)) + (+(x <= result[1] && 0 <= result[1] && result[1] <= 1)) + (+(x <= result[2] && 0 <= result[2] && result[2] <= 1)",437168,45,"0;\r\n    },\r\n    /**\n     * Test whether the given point is on or inside the path.\n     * @param {Number} x\n     * @param {Number} y",499872,39,"isPointInPath",1993680,56,"i, j,\r\n",1014922,36,"test = 0,\r\n            types = me.types,\r\n            coords = me.coords,\r\n            ln = types.length,\r\n            firstX = null,\r\n            firstY = null,\r\n            lastX = 0,\r\n            lastY = 0;\r\n        for (i = 0 , j",217584,34,"switch (types[i]) {\r\n                case 'M':\r\n                    if (firstX",679039,34,"    test = me.rayTestLine(firstX, firstY, lastX, lastY, x, y",71438,32,"test",1996622,37,"count += 1;\r\n    ",10749,54,"    count += test",340080,51,";\r\n                    firstX = lastX = coords[j];\r\n                    firstY = lastY = coords[j + 1];\r\n                    j += 2",650072,52,"'L':\r\n                    test = me.rayTestLine(lastX, lastY, coords[j], coords[j + 1], x, y);\r\n                    if (test",1996622,33,195690,35,";\r\n                    count += test;\r\n                    lastX = coords[j];\r\n                    lastY = coords[j + 1];\r\n                    j += 2",650072,52,"'C':\r\n                    test = me.rayTestCubicBezier(lastX, lastY, coords[j], coords[j + 1], coords[j + 2], coords[j + 3], coords[j + 4], coords[j + 5], x, y, i);\r\n                    if (test",1996622,33,195690,35,";\r\n                    count += test;\r\n                    lastX = coords[j + 4];\r\n                    lastY = coords[j + 5];\r\n                    j += 6",650072,52,"'Z':\r\n    ",832095,58,"return count % 2 === 1;\r\n    },\r\n    /**\n     * Clone this path.\n     * @return {Ext.draw.Path",942670,72,"path = new Ext.draw.Path();\r\n        path.coords = me.coords.slice(0);\r\n        path.types = me.types.slice(0);\r\n        path.cursor = me.cursor ? me.cursor.slice(0) : null;\r\n        path.startX = me.startX;\r\n        path.startY = me.startY;\r\n        path.svgString = me.svgString;\r\n        return path;\r\n    },\r\n    /**\n     * Transform the current path by a matrix.\n     * @param {Ext.draw.Matrix} matrix\n     */\r\n    transform: function(matrix) {\r\n        if (matrix.isIdentity",1486303,47,"var xx = matrix.getXX(),\r\n            yx = matrix.getYX(),\r\n            dx = matrix.getDX(),\r\n            xy = matrix.getXY(),\r\n            yy = matrix.getYY(),\r\n            dy = matrix.getDY(),\r\n            coords = this.coords",1162288,36,"n = coords.length,\r\n            x, y;\r\n        for (; i < ln; i += 2) {\r\n            x = coords[i];\r\n            y = coords[i + 1];\r\n            coords[i] = x * xx + y * yx + dx;\r\n            coords[i + 1] = x * xy + y * yy + dy;\r\n        }\r\n        this.dirt(",1897376,35,"bounding box of this matrix.\n     * @param {Object} [target] Optional object to receive the result.",1822836,32,"Object with x, y, width and height\n     */\r\n    getDimension",2071336,34,"!",28187,32,"{}",372736,33,"ypes || !this.types.length) {\r\n            target.x = 0;\r\n            target.y = 0;\r\n            target.width = 0;\r\n            target.height = 0;\r\n            return target;\r\n        }\r\n        target.left = Infinity;\r\n        target.top = Infinity;\r\n        target.right = -Infinity;\r\n        target.bottom = -Infinity;",1924190,34,"j = 0,\r\n            types = this.types,\r\n            coords = this.coords,\r\n            ln = types.length,\r\n            x, y",1506943,46,"switch (types[i]) {\r\n                case 'M':\r\n                case 'L':\r\n                    x = coords[j];\r\n                    y = coords[j + 1];\r\n                    target.left = Math.min(x, target.left);\r\n                    target.top = Math.min(y, target.top);\r\n                    target.right = Math.max(x, target.right);\r\n                    target.bottom = Math.max(y, target.bottom);\r\n                    j += 2",650072,52,"'C':\r\n                    this.expandDimension(target, x, y, coords[j], coords[j + 1], coords[j + 2], coords[j + 3], x = coords[j + 4], y = coords[j + 5]);\r\n                    j += 6;\r\n    ",832095,58,"target.x = target.left;\r\n        target.y = target.top;\r\n        target.width = target.right - target.left;\r\n        target.height = target.bottom - target.top;",2071544,38,"/**\n     * Get the bounding box as if the path is transformed by a matrix.\n     *\n     * @param {Ext.draw.Matrix} matrix\n     * @param {Object} [target] Optional object to receive the result.\n     *",449311,35,"with x, y, width and height.\n     */\r\n    getDimensionWithTransform: function(matrix, target) {\r\n        if (!this.types || !this.types.length) {",2101276,46,"target",139695,35,"target.x = 0;\r\n            target.y = 0;\r\n            target.width = 0;\r\n            target.height = 0;\r\n            return target;\r\n        }\r\n        target.left = Infinity;\r\n        target.top = Infinity;\r\n        target.right = -Infinity;\r\n        target.bottom = -Infinity;\r\n        var xx = matrix.getXX(),\r\n            yx = matrix.getYX(),\r\n            dx = matrix.getDX(),\r\n            xy = matrix.getXY(),\r\n            yy = matrix.getYY(),\r\n            dy = matrix.getDY",398640,37,"j = 0,\r\n            types = this.types,\r\n            coords = this.coords,\r\n            ln = types.length,\r\n            x, y",1506943,46,"switch (types[i]) {\r\n                case 'M':\r\n                case 'L':\r\n                    x = coords[j] * xx + coords[j + 1] * yx + dx;\r\n                    y = coords[j] * xy + coords[j + 1] * yy + dy;\r\n                    target.left = Math.min(x, target.left);\r\n                    target.top = Math.min(y, target.top);\r\n                    target.right = Math.max(x, target.right);\r\n                    target.bottom = Math.max(y, target.bottom);\r\n                    j += 2",650072,52,"'C':\r\n                    this.expandDimension(target, x, y, coords[j] * xx + coords[j + 1] * yx + dx, coords[j] * xy + coords[j + 1] * yy + dy, coords[j + 2] * xx + coords[j + 3] * yx + dx, coords[j + 2] * xy + coords[j + 3] * yy + dy, x = coords[j + 4] * xx + coords[j + 5] * yx + dx, y = coords[j + 4] * xy + coords[j + 5] * yy + dy);\r\n                    j += 6;\r\n    ",832095,63,28187,32,"{};\r\n        }\r\n        target.x = target.left;\r\n        target.y = target.top;\r\n        target.width = target.right - target.left;\r\n        target.height = target.bottom - target.top;",2071544,38,"/**\n     * @private\n     * Expand the rect by the bbox of a bezier curve",397024,32,"target\n     * @param {Number} x1\n     * @param {Number} y1\n     * @param {Number} cx1\n     * @param {Number} cy1\n     * @param {Number} cx2\n     * @param {Number} cy2\n     * @param {Number} x2\n     * @param {Number} y2\n     */\r\n    expandDimension: function(target, x1, y1, cx1, cy1, cx2, cy2, x2, y2",449776,41,"l = target.left,\r\n            r = target.right,\r\n            t = target.top,\r\n            b = target.bottom,\r\n            dim = me.dim || (me.dim = []);\r\n        me.curveDimension(x1, cx1, cx2, x2, dim);\r\n        l = Math.min(l, dim[0]);\r\n        r = Math.max(r, dim[1]);\r\n        me.curveDimension(y1, cy1, cy2, y2, dim);\r\n        t = Math.min(t, dim[0]);\r\n        b = Math.max(b, dim[1]);\r\n        target.left = l;\r\n        target.right = r;\r\n        target.top = t;\r\n        target.bottom = b",979376,42,"Determine the curve\n     * @param {Number} a\n     * @param {Number} b\n     * @param {Number} c\n     * @param {Number} d\n     * @param {Number} dim\n     */\r\n    curveDimension: function(a, b, c, d, dim) {\r\n        var qa = 3 * (-a + 3 * (b - c) + d),\r\n            qb = 6 * (a - 2 * b + c),\r\n            qc = -3 * (a - b),\r\n            x, y,\r\n            min = Math.min(a, d),\r\n            max = Math.max(a, d),\r\n            delta;\r\n        if (qa === 0) {\r\n            if (qb === 0) {\r\n                dim[0] = min;\r\n                dim[1] = max;",1963661,40," else {\r\n                x = -qc / qb;\r\n                if (0 < x && x < 1) {\r\n                    y = this.interpolate(a, b, c, d, x);\r\n    ",1015210,36,"y);\r\n    ",1015253,36,1453920,69,"delta = qb * qb - 4 * qa * qc;\r\n            if (delta >= 0) {\r\n                delta = Math.sqrt(delta);\r\n                x = (delta - qb) / 2 / qa;\r\n                if (0 < x && x < 1) {\r\n                    y = this.interpolate(a, b, c, d, x);\r\n    ",1015210,36,"y);\r\n    ",1015253,36,1453920,36,"    if (delta > 0) {\r\n                    x -= delta / qa;\r\n                    if (0 < x && x < 1) {\r\n                        y = this.interpolate(a, b, c, d, x);",73504,32,"Math.min(min, y);",74511,32,"Math.max(max, y",300016,59,"\r\n        }\r\n        dim[0] = min;\r\n        dim[1] = max",979376,41,"\n     * Returns `a * (1 - t) ^ 3 + 3 * b (1 - t) ^ 2 * t + 3 * c (1 - t) * t ^ 3 + d * t ^ 3",543584,33,"a\n     * @param {Number} b\n     * @param {Number} c\n     * @param {Number} d\n     * @param {Number} t",1412271,38,"interpolate: function(a, b, c, d, t) {\r\n        if (t === 0) {\r\n            return a;\r\n        }\r\n        if (t === 1) {",646592,34,"\r\n        var rate = (1 - t) / t;\r\n        return t * t * t * (d + rate * (3 * c + rate * (3 * b + rate * a)));\r\n    },\r\n    /**\n     * Reconstruct path from cubic bezier curve stripes.\n     * @param {Array} stripes\n     */\r\n    fromStripes: function(stripe",1330608,42,"i = 0,\r\n            ln = stripes.length,\r\n            j, ln2, stripe;\r\n        me.clear()",1506943,46,"stripe = stripes[i];\r\n            me.coords.push.apply(me.coords, stripe);\r\n            me.types.push('M');\r\n            for (j = 2 , ln2 = stripe.length; j < ln2; j += 6) {\r\n                me.types.push('C",21152,35,"    if (!me.cursor) {\r\n            me.cursor = [];\r\n        }\r\n        me.cursor[0] = me.coords[me.coords.length - 2];\r\n        me.cursor[1] = me.coords[me.coords.length - 1];\r\n        me.dir",1921935,34,"rt path to bezier curve stripes.\n     * @param {Array} [target] The optional array to receive the result",2046367,38,"toStripe",2071599,35,"stripes = target || [],\r\n            curr, x, y, lastX, lastY, startX, startY, i, j,\r\n            types = this.types,\r\n            coords = this.coords,\r\n            ln = types.length;\r\n        for (i = 0 , j",217584,34,"switch (types[i]) {\r\n                case 'M':\r\n                    curr = [\r\n                        startX = lastX = coords[j++],\r\n                        startY = lastY = coords[j++]\r\n    ",1760239,36,"    stripes.push(curr)",650072,52,"'L':\r\n                    x = coords[j++];\r\n                    y = coords[j++];\r\n                    curr.push((lastX + lastX + x) / 3, (lastY + lastY + y) / 3, (lastX + x + x) / 3, (lastY + y + y) / 3, lastX = x, lastY = y)",650072,52,"'C':\r\n                    curr.push(coords[j++], coords[j++], coords[j++], coords[j++], lastX = coords[j++], lastY = coords[j++])",650072,52,"'Z':\r\n                    x = startX;\r\n                    y = startY;\r\n                    curr.push((lastX + lastX + x) / 3, (lastY + lastY + y) / 3, (lastX + x + x) / 3, (lastY + y + y) / 3, lastX = x, lastY = y);\r\n    ",832095,58,"return stripe",1590704,43,"Update cache for svg string of this path.\n     */\r\n    updateSvgString",1558508,34," = [],\r\n            types = this.types,\r\n            coords = this.coords,\r\n            ln = type",1611567,43,"j",1514414,50,"switch (types[i]) {\r\n                case 'M':",1181673,34,"'M' + coords[j] + ',' + coords[j + 1]);\r\n                    j += 2",650072,52,"'L':",1181673,34,"'L' + coords[j] + ',' + coords[j + 1]);\r\n                    j += 2",650072,52,"'C':",1181673,34,"'C' + coords[j] + ',' + coords[j + 1] + ' ' + coords[j + 2] + ',' + coords[j + 3] + ' ' + coords[j + 4] + ',' + coords[j + 5]);\r\n                    j += 6",650072,52,"'Z':",1181673,34,"'Z');\r\n    ",832095,58,"this.svgString = result",397582,41," an svg path string for this path.",37917,38,1098079,32,"if (!this.svgString) {\r\n            this.updateSvgString",724000,35,".svgString;",1396016,34,"draw.sprite.Path\n * @extends Ext.draw.sprite.Sprite\n *\n * A sprite that represents a path.\n *\n *     @example preview miniphone\n *     var component = new Ext.draw.Component({\n *       items: [{\n *         type: 'path',\n *         path: 'M75,75 c0,-25 50,25 50,0 c0,-25 -50,25 -50,0',\n *         fillStyle: 'blue'\n *       }]",1202879,32,"setLayout('fit');\n *     Ext.Viewport.add(component);\n */\r\nExt.define('Ext.draw.sprite.Path', {\r\n    extend: Ext.draw.sprite.Sprite,\r\n    alias: 'sprite.path',\r\n    type: 'path'",2114591,38,"def: {\r\n            processors: {\r\n",2170893,33,"    * @cfg {String} path The SVG based path string used by the sprite.\n    ",805983,33,"path: function(n, o) {\r\n                    if (!(n instanceof Ext.draw.Path)) {\r\n                        n = new Ext.draw.Path(n",160448,47,"return n",106096,35,",\r\n            aliases: {\r\n                d: 'path'",2118276,33,"tyTriggers: {\r\n                path: 'bbo",1028597,32,"updaters: {\r\n                path: function(attr) {\r\n                    var path = attr.path;\r\n                    if (!path || path.bindAttr !== attr) {\r\n                        path = new Ext.draw.Path();\r\n                        path.bindAttr = attr;\r\n                        attr.path = path",325008,46,"path.clear();\r\n                    this.updatePath(path, attr);\r\n                    attr.dirtyFlags.bbox = [\r\n                        'path'\r\n    ",1760239,36,2169392,34,",\r\n    updatePlainBBox: function(plain) {\r\n        if (this.attr.path) {\r\n            this.attr.path.getDimension(plain",1444352,33,"TransformedBBox: function(transform) {\r\n        if (this.attr.path) {\r\n            this.attr.path.getDimensionWithTransform(this.attr.matrix, transform);\r\n        }\r\n    },\r\n    render: function(surface, ctx) {\r\n        var mat = this.attr.matrix,\r\n            attr = this.attr;\r\n        if (!attr.path || attr.path.coord",1413625,59,"mat.toContext(ctx);\r\n        ctx.appendPath(attr.path);\r\n        ctx.fillStroke(attr",1241950,33," the path.\n     * @param {Ext.draw.Path} path An empty path to draw on using path API.\n     * @param {Object} attr The attribute object. Note: DO NOT use the `sprite.attr` instead of this\n     * if you want to work with instancing.\n     */\r\n    updatePath: function(path, attr) {}\r\n});\r\n\r\n/**\n * @class Ext.draw.sprite.Circle\n * @extends Ext.draw.sprite.Path\n *\n * A sprite that represents a circle.\n *\n *     @example preview miniphone\n *     new Ext.draw.Component({\n *",902144,34,"items: [{\n *         type: 'circle',\n *         cx: 100,\n *         cy: 100,\n *         r: 25,\n *         fillStyle: 'blue'\n *       }",1112426,32,"\"Ext.draw.sprite.Circle\", {\r\n    extend: Ext.draw.sprite.Path,\r\n    alias: 'sprite.circle',\r\n    type: 'circle'",2114591,38,"def: {\r\n            processors: {\r\n",2170893,33,"    * @cfg {Number} [cx=0] The center coordinate of the sprite on the x-axis.\n    ",805983,33,"cx: \"number\",\r\n",2170893,33,"    * @cfg {Number} [cy=0] The center coordinate of the sprite on the y-axis.\n    ",805983,33,"cy: \"number\",\r\n",2170893,33,"    * @cfg {Number} [r=0] The radius of the sprite.\n    ",805983,33,"r: \"number\"",1103565,33,"ases: {\r\n                radius: \"r\",\r\n                x: \"cx\",\r\n                y: \"cy\",\r\n                centerX: \"cx\",\r\n                centerY: \"cy\"",105727,33,"aults: {\r\n                cx: 0,\r\n                cy: 0,\r\n                r",877632,33,"dirtyTriggers: {\r\n                cx: 'path',\r\n                cy: 'path',\r\n                r: 'path'",924224,40,"updatePlainBBox: function(plain) {\r\n        var attr = this.attr,\r\n            cx = attr.cx,\r\n            cy = attr.cy,\r\n            r = attr.r;\r\n        plain.x = cx - r;\r\n        plain.y = cy - r;\r\n        plain.width = r + r;\r\n        plain.height = r + r;\r\n    },\r\n    updateTransformedBBox: function(transform) {\r\n        var attr = this.attr,\r\n            cx = attr.cx,\r\n            cy = attr.cy,\r\n            r = attr.r,\r\n            matrix = attr.matrix,\r\n            scalesX = matrix.getScaleX(),\r\n            scalesY = matrix.getScaleY(),\r\n            w, h;\r\n        w = scalesX * r;\r\n        h = scalesY * r;\r\n        transform.x = matrix.x(cx, cy) - w;\r\n        transform.y = matrix.y(cx, cy) - h;\r\n        transform.width = w + w;\r\n        transform.height = h + h;\r\n    },\r\n    updatePath: function(path, attr) {\r\n        path.arc(attr.cx, attr.cy, attr.r, 0, Math.PI * 2, false);",1396016,34,"draw.sprite.Arc\n * @extend Ext.draw.sprite.Circle\n * \n *  A sprite that represents a circular arc.\n *\n *     @example preview miniphone\n *     var component = new Ext.draw.Component({\n *       items: [{\n *         type: 'arc',\n *         cx: 100,\n *         cy: 100,\n *         r: 25,\n *         fillStyle: 'blue',\n *         startAngle: 0,\n *         endAngle: Math.PI,\n *         anticlockwise: true\n *       }]",1202879,32,"setLayout('fit');\n *     Ext.Viewport.add(component);\n */\r\nExt.define(\"Ext.draw.sprite.Arc\", {\r\n    extend: Ext.draw.sprite.Circle,\r\n    alias: 'sprite.arc',\r\n    type: 'arc'",2114591,38,"def: {\r\n            processors: {\r\n",2170893,33,"    * @cfg {Number} [startAngle=0] The beginning angle of the arc.\n    ",805983,33,"startAngle: \"number\",\r\n",2170893,33,"    * @cfg {Number} [endAngle=Math.PI*2] The ending angle of the arc.\n    ",805983,33,"endAngle: \"number\",\r\n",2170893,33,"    * @cfg {Boolean} [anticlockwise=false] Determines whether or not the arc is drawn clockwise.\n    ",805983,33,"anticlockwise: \"bool\"",1103565,33,"ases: {\r\n                from: \"startAngle\",\r\n                to: \"endAngle\",\r\n                start: \"startAngle\",\r\n                end: \"endAngle\"",105727,33,"aults: {\r\n                startAngle: 0,\r\n                endAngle: Math.PI * 2,\r\n                anticlockwise: false",2118276,33,"tyTriggers: {\r\n                startAngle: 'path',\r\n                endAngle: 'path',\r\n                anticlockwise: 'path'",924224,40,"updatePath: function(path, attr) {\r\n        path.arc(attr.cx, attr.cy, attr.r, attr.startAngle, attr.endAngle, attr.anticlockwise);",1396016,34,"draw.sprite.Composite\n * @extends Ext.draw.sprite.Sprite\n * \n * Represents a group of sprites.\n */\r\nExt.define('Ext.draw.sprite.Composite', {\r\n    extend: Ext.draw.sprite.Sprite,\r\n    alias: 'sprite.composite',\r\n    type: 'composite'",2237840,51,894521,32,"sprites = [];\r\n        this.sprites.map = {}",1452784,32," sprite to the composite.\n     * @param {Ext.draw.sprite.Sprite|Object} sprite\n     */\r\n    add: function(sprite) {\r\n        if (!(sprite instanceof Ext.draw.sprite.Sprite)) {\r\n            sprite = Ext.create('sprite.' + sprite.type, sprite);\r\n            sprite.setParent(this);\r\n        }\r\n        var oldTransformations = sprite.applyTransformations",485786,39,"attr = me.attr;\r\n        sprite.applyTransformations = function() {\r\n            if (sprite.attr.dirtyTransform) {\r\n                attr.dirtyTransform = true;\r\n                attr.bbox.plain",1808638,32,"attr.bbox.transform.d",1769680,37,"    oldTransformations.call(sprite);\r\n        };\r\n        this.sprites.push(sprite);\r\n        this.sprites.map[sprite.id] = sprite.getId();\r\n        attr.bbox.plain.dirty = true;\r\n        attr.bbox.transform.dirty = true;\r\n        return sprite",1452784,32," list of sprites to the composite.\n     * @param {Ext.draw.sprite.Sprite[]|Object[]|Ext.draw.sprite.Sprite|Object} sprites\n     */\r\n    addAll: function(sprites) {\r\n        if (sprites.isSprite || sprites.type) {\r\n            this.add(sprites",394544,37,"rites)) {\r\n",19111,36,"while (i < sprites.length) {\r\n                this.add(sprites[i++]",358736,34,"},\r\n    /**\n     * Updates the bounding box of the composite, which contains the bounding box of all sprites in the composite.\n     */\r\n    updatePlainBBox: function(plai",452144,42,"left = Infinity,\r\n            right = -Infinity,\r\n            top = Infinity,\r\n            bottom = -Infinity,\r\n            sprite, bbox,",243990,35,"me.sprit",241280,39,"sprite = me.sprites[i];\r\n            sprite.applyTransformations();\r\n            bbox = sprite.getBBox();\r\n            if (left > bbox.x) {\r\n                left = bbox.",721232,35,"right < bbox.x + bbox.width) {\r\n                right = bbox.x + bbox.width",408144,35,"op > bbox.y) {\r\n                top = bbox.y",1776,34,"bottom < bbox.y + bbox.height) {\r\n                bottom = bbox.y + bbox.height",515104,37,"plain.x = left;\r\n        plain.y = top;\r\n        plain.width = right - left;\r\n        plain.height = bottom - top;\r\n    },\r\n    /**\n     * Renders all sprites contained in the composite to the surface.\n     */\r\n    render: function(surface, ctx, region) {\r\n        var mat = this.attr.matri",2016576,32,"mat.toContext(ctx);\r\n        for (i = 0 , ln = this.sprit",241280,39,"surface.renderSprite(this.sprites[i], region",1105856,36,"@class Ext.draw.sprite.Ellipse\n * @extends Ext.draw.sprite.Path\n * \n * A sprite that represents an ellipse.\n *\n *     @example preview miniphone\n *     var component = new Ext.draw.Component({\n *       items: [{\n *         type: 'ellipse',\n *         cx: 100,\n *         cy: 100,\n *         rx: 40,\n *         ry: 25,\n *         fillStyle: 'blue'\n *       }]",1202879,32,"setLayout('fit');\n *     Ext.Viewport.add(component);\n */\r\nExt.define(\"Ext.draw.sprite.Ellipse\", {\r\n    extend: Ext.draw.sprite.Path,\r\n    alias: 'sprite.ellipse',\r\n    type: 'circle'",2114591,38,"def: {\r\n            processors: {\r\n",2170893,33,"    * @cfg {Number} [cx=0] The center coordinate of the sprite on the x-axis.\n    ",805983,33,"cx: \"number\",\r\n",2170893,33,"    * @cfg {Number} [cy=0] The center coordinate of the sprite on the y-axis.\n    ",805983,33,"cy: \"number\",\r\n",2170893,33,"    * @cfg {Number} [rx=1] The radius of the sprite on the x-axis.\n    ",805983,33,"rx: \"number\",\r\n",2170893,33,"    * @cfg {Number} [ry=1] The radius of the sprite on the y-axis.\n    ",805983,33,"ry: \"number\",\r\n",2170893,33,"    * @cfg {Number} [axisRotation=0] The rotation of the sprite about its axis.\n    ",805983,33,"axisRotation: \"number\"",1103565,33,"ases: {\r\n                radius: \"r\",\r\n                x: \"cx\",\r\n                y: \"cy\",\r\n                centerX: \"cx\",\r\n                centerY: \"cy\",\r\n                radiusX: \"rx\",\r\n                radiusY: \"ry\"",105727,33,"aults: {\r\n                cx: 0,\r\n                cy: 0,\r\n                rx: 1,\r\n                ry: 1,\r\n                axisRotation",877632,33,"dirtyTriggers: {\r\n                cx: 'path',\r\n                cy: 'path',\r\n                rx: 'path',\r\n                ry: 'path',\r\n                axisRotation: 'path'",924224,40,"updatePlainBBox: function(plain) {\r\n        var attr = this.attr,\r\n            cx = attr.cx,\r\n            cy = attr.cy,\r\n            rx = attr.rx,\r\n            ry = attr.ry;\r\n        plain.x = cx - rx;\r\n        plain.y = cy - ry;\r\n        plain.width = rx + rx;\r\n        plain.height = ry + ry;\r\n    },\r\n    updateTransformedBBox: function(transform) {\r\n        var attr = this.attr,\r\n            cx = attr.cx,\r\n            cy = attr.cy,\r\n            rx = attr.rx,\r\n            ry = attr.ry,\r\n            rxy = ry / rx,\r\n            matrix = attr.matrix.clone(),\r\n            xx, xy, yx, yy, dx, dy, w, h;\r\n        matrix.append(1, 0, 0, rxy, 0, cy * (1 - rxy));\r\n        xx = matrix.getXX();\r\n        yx = matrix.getYX();\r\n        dx = matrix.getDX();\r\n        xy = matrix.getXY();\r\n        yy = matrix.getYY();\r\n        dy = matrix.getDY();\r\n        w = Math.sqrt(xx * xx + yx * yx) * rx;\r\n        h = Math.sqrt(xy * xy + yy * yy) * rx;\r\n        transform.x = cx * xx + cy * yx + dx - w;\r\n        transform.y = cx * xy + cy * yy + dy - h;\r\n        transform.width = w + w;\r\n        transform.height = h + h;\r\n    },\r\n    updatePath: function(path, attr) {\r\n        path.ellipse(attr.cx, attr.cy, attr.rx, attr.ry, attr.axisRotation, 0, Math.PI * 2, false);",1396016,34,"draw.sprite.EllipticalArc\n * @extends Ext.draw.sprite.Ellipse\n *\n * A sprite that represents an elliptical arc.\n *\n *     @example preview miniphone\n *     var component = new Ext.draw.Component({\n *       items: [{\n *         type: 'ellipticalArc',\n *         cx: 100,\n *         cy: 100,\n *         rx: 40,\n *         ry: 25,\n *         fillStyle: 'blue',\n *         startAngle: 0,\n *         endAngle: Math.PI,\n *         anticlockwise: true\n *       }]",1202879,32,"setLayout('fit');\n *     Ext.Viewport.add(component);\n */\r\nExt.define(\"Ext.draw.sprite.EllipticalArc\", {\r\n    extend: Ext.draw.sprite.Ellipse,\r\n    alias: 'sprite.ellipticalArc',\r\n    type: 'ellipticalArc'",2114591,38,"def: {\r\n            processors: {\r\n",2170893,33,"    * @cfg {Number} [startAngle=0] The beginning angle of the arc.\n    ",805983,33,"startAngle: \"number\",\r\n",2170893,33,"    * @cfg {Number} [endAngle=Math.PI*2] The ending angle of the arc.\n    ",805983,33,"endAngle: \"number\",\r\n",2170893,33,"    * @cfg {Boolean} [anticlockwise=false] Determines whether or not the arc is drawn clockwise.\n    ",805983,33,"anticlockwise: \"bool\"",1103565,33,"ases: {\r\n                from: \"startAngle\",\r\n                to: \"endAngle\",\r\n                start: \"startAngle\",\r\n                end: \"endAngle\"",105727,33,"aults: {\r\n                startAngle: 0,\r\n                endAngle: Math.PI * 2,\r\n                anticlockwise: false",2118276,33,"tyTriggers: {\r\n                startAngle: 'path',\r\n                endAngle: 'path',\r\n                anticlockwise: 'path'",924224,40,"updatePath: function(path, attr) {\r\n        path.ellipse(attr.cx, attr.cy, attr.rx, attr.ry, attr.axisRotation, attr.startAngle, attr.endAngle, attr.anticlockwise);",1396016,34,"draw.sprite.Rect\n * @extends Ext.draw.sprite.Path\n *\n * A sprite that represents a rectangle.\n *\n *     @example preview miniphone\n *     var component = new Ext.draw.Component({\n *       items: [{\n *         type: 'rect',\n *         x: 50,\n *         y: 50,\n *         width: 50,\n *         height: 50,\n *         fillStyle: 'blue'\n *       }]",1202879,32,"setLayout('fit');\n *     Ext.Viewport.add(component);\n */\r\nExt.define('Ext.draw.sprite.Rect', {\r\n    extend: Ext.draw.sprite.Path,\r\n    alias: 'sprite.rect',\r\n    type: 'rect'",2114591,38,"def: {\r\n            processors: {\r\n",2170893,33,"    * @cfg {Number} [x=0] The position of the sprite on the x-axis.\n    ",805983,33,"x: 'number',\r\n",2170893,33,"    * @cfg {Number} [y=0] The position of the sprite on the y-axis.\n    ",805983,33,"y: 'number',\r\n",2170893,33,"    * @cfg {Number} [width=1] The width of the sprite.\n    ",805983,33,"width: 'number',\r\n",2170893,33,"    * @cfg {Number} [height=1] The height of the sprite.\n    ",805983,33,"height: 'number',\r\n",2170893,33,"    * @cfg {Number} [radius=0] The radius of the rounded corners.\n    ",805983,33,"radius: 'number'",1103565,33,"ases: {},\r\n            dirtyTriggers: {\r\n                x: 'path',\r\n                y: 'path',\r\n                width: 'path',\r\n                height: 'path',\r\n                radius: 'path'",105727,33,"ault",2117881,49,",\r\n                width: 1,\r\n                height: 1,\r\n                radius: 0",924224,40,"updatePlainBBox: function(plain) {\r\n        var attr = this.attr;\r\n        plain.x = attr.x;\r\n        plain.y = attr.y;\r\n        plain.width = attr.width;\r\n        plain.height = attr.height;\r\n    },\r\n    updateTransformedBBox: function(transform, plain) {\r\n        this.attr.matrix.transformBBox(plain, this.attr.radius, transform);\r\n    },\r\n    updatePath: function(path, attr) {\r\n        var x = attr.x,\r\n            y = attr.y,\r\n            width = attr.width,\r\n            height = attr.height,\r\n            radius = Math.min(attr.radius, Math.abs(attr.height) * 0.5, Math.abs(attr.width) * 0.5);\r\n        if (radius === 0) {\r\n            path.rect(x, y, width, heigh",2215823,35,"path.moveTo(x + radius, y);\r\n            path.arcTo(x + width, y, x + width, y + height, radius);\r\n            path.arcTo(x + width, y + height, x, y + height, radius);\r\n            path.arcTo(x, y + height, x, y, radius);\r\n            path.arcTo(x, y, x + radius, y, radius",1105856,36,"@class Ext.draw.sprite.Image\n * @extends Ext.draw.sprite.Rect\n * \n * A sprite that represents an image.\n */\r\nExt.define(\"Ext.draw.sprite.Image\", {\r\n    extend: Ext.draw.sprite.Rect,\r\n    alias: 'sprite.image',\r\n    type: 'image',\r\n    statics: {\r\n        imageLoaders: {}\r\n    }",2114591,38,"def: {\r\n            processors: {\r\n",2170893,33,"    * @cfg {String} [src=''] The image source of the sprite.\n    ",805983,33,"src: 'stri",2263357,33,"defaults: {\r\n                src: '',\r\n    ",753193,38,"    height: null",924224,40,"render: function(surface, ctx",449776,41,"attr = me.attr,\r\n            mat = attr.matrix,\r\n            src = attr.src,\r\n            x = attr.x,\r\n            y = attr.y,\r\n            width = attr.width,\r\n            height = attr.height,\r\n            loadingStub = Ext.draw.sprite.Image.imageLoaders[src],\r\n            imageLoader, i;\r\n        if (loadingStub && loadingStub.done) {\r\n            mat.toContext(ctx);\r\n            ctx.drawImage(loadingStub.image, x, y, width || loadingStub.width, height || loadingStub.width);\r\n        } else if (!loadingStub) {\r\n            imageLoader = new Image();\r\n            loadingStub = Ext.draw.sprite.Image.imageLoaders[src] = {\r\n                image: imageLoader,\r\n                done: false,\r\n                pendingSprites: [\r\n    ",1545885,32,"    ],\r\n                pendingSurfaces: [\r\n                    surface",815149,34,";\r\n            imageLoader.width = width;\r\n            imageLoader",2086894,32,"mageLoader.onload",143824,33,"if (!loadingStub.done) {\r\n                    loadingStub.done = true;\r\n",1996155,36,"loadingStub.pendingSprites.",55615,32,"        loadingStub.pendingSprites[i].setDirty(tr",410576,45,"    for (i in loadingStub.pendingSurfaces) {\r\n                        loadingStub.pendingSurfaces[i].renderFrame",2055040,44,280186,32,"mageLoader.src = src",114656,33,"Ext.Array.include(loadingStub.pendingSprites, me);",258517,32,"loadingStub.pendingSurfaces, surface",1105856,36,"@class Ext.draw.sprite.Instancing\n * @extends Ext.draw.sprite.Sprite\n *\n * Sprite that represents multiple instances based on the given template.\n */\r\nExt.define(\"Ext.draw.sprite.Instancing\", {\r\n    extend: Ext.draw.sprite.Sprite,\r\n    alias: 'sprite.instancing',\r\n    type: 'instancing",1210336,48,"Object} [template=null] The sprite template used by all",1566397,33,"template: null\r\n    },\r\n    instances",506750,35,"config) {\r\n        this.instance",837048,32,1687758,40,"    if (config && config.template) {\r\n            this.setTemplate(config.template",1064208,32,"Template: function(template) {\r\n        if (!(template instanceof Ext.draw.sprite.Sprite)) {\r\n            template = Ext.create(template.xclass || \"sprite.\" + template.type, template);\r\n        }\r\n        template.setParent(this);\r\n        template.attr.children = [];\r\n        this.instances = [];\r\n        this.position = 0;",2174876,33,1677246,32,"sprite instance.\n     * ",1280,35,"configuration of the",1799344,34,"[data]\n     * @param {Boolean} [bypassNormalization] 'true' to bypass attribute normaliza",917576,32,"voidCopy] 'true' to avoid copying.\n     * @return {Object} The attributes of the instance.\n     */\r\n    createInstance: function(config, data, bypassNormalization, avoidCopy) {\r\n        var template = this.getTemplate(),\r\n            originalAttr = template.attr,\r\n            attr = Ext.Object.chain(originalAttr);\r\n        template.topModifier.prepareAttributes(attr);\r\n        template.attr = attr;\r\n        template.setAttributes(config, bypassNormalization, avoidCopy);\r\n        attr.data = data;\r\n        this.instances.push(attr);\r\n        template.attr = originalAttr;\r\n        this.position++;\r\n        originalAttr.children.push(attr);\r\n        return attr;\r\n    },\r\n    /**\n     * Not supported.\n     * ",1913638,39,"BBo",360542,32,1462349,32,"turns the bounding box for the",1892579,36,1463584,40,"of the instance.\n     * @param {Boolean} [isWithoutTransform] 'true' to not apply sprite transforms to the bounding box.\n     * @return {Object} The bounding box for the instance.\n     */\r\n    getBBoxFor: function(index, isWithoutTransform) {\r\n        var template = this.getTemplate(),\r\n            originalAttr = template.attr,\r\n            bbox;\r\n        template.attr = this.instances[index];\r\n        bbox = template.getBBox(isWithoutTransform);\r\n        template.attr = originalAttr;\r\n        return bbox",2198772,32,"surface, ctx, clipRegion, reg",1688912,44,"mat = me.attr.matrix,\r\n            template = me.getTemplate(),\r\n            originalAttr = template.attr,\r\n            instances = me.instances,\r\n            i,\r\n            ln = me.position;\r\n        mat.toContext(ctx);\r\n        template.preRender(surface, ctx, clipRegion, region);\r\n        template.useAttributes(ctx, region",1889376,52,"if (instances[i].dirtyZIndex) {",832093,60,1445472,41,"f (instances[i].hidden) {\r\n",511215,34,1461872,38,"ctx.save();\r\n            template.attr = instances[i];\r\n            template.applyTransformations();\r\n            template.useAttributes(ctx, region);\r\n            template.render(surface, ctx, clipRegion, region);\r\n            ctx.restore();\r\n        }\r\n        template.attr = originalAttr",459920,35,"attributes for the",1892579,37,1534878,40,"of the instance\n     * @param {Object} changes the attributes to change\n     * @param {Boolean} [bypassNormalization] 'true' to avoid attribute normalization\n     */\r\n    setAttributesFor: function(index, changes, bypassNormalization) {\r\n        var template = this.getTemplate(),\r\n            originalAttr = template.attr,\r\n            attr = this.instances[index];\r\n        template.attr = attr",2266048,34,"bypassNormalization) {\r\n                changes = Ext.apply({}, chang",7696,44,"changes = template.self.def.normalize(change",110848,32,"template.topModifier.pushDown(attr, changes);\r\n            template.updateDirtyFlags(attr);\r\n        } finally {\r\n            template.attr = originalAttr",719552,57,1043101,32,"instances.length = 0;\r\n        this.instances = null;\r\n        if (this.getTemplate()) {\r\n            this.getTemplate()",735932,38,"Ext.define('Ext.draw.sprite.Line', {\r\n    extend: Ext.draw.sprite.Sprite,\r\n    alias: 'sprite.line',\r\n    type: 'line'",2114591,38,"def: {\r\n            processors: {\r\n                fromX: 'number',\r\n                fromY: 'number',\r\n                toX: 'number',\r\n                toY: 'number'",105727,33,"aults: {\r\n                fromX: 0,\r\n                fromY: 0,\r\n                toX: 1,\r\n                toY",2181438,35,"},\r\n    render: function(surface, ctx, clipRegion) {\r\n        var attr = this.attr,\r\n            matrix = this.attr.matrix;\r\n        matrix.toContext(ctx);\r\n        ctx.beginPath();\r\n        ctx.moveTo(attr.fromX, attr.fromY);\r\n        ctx.lineTo(attr.toX, attr.toY);\r\n        ctx.stroke();",1396016,34,"draw.sprite.Sector\n * @extends Ext.draw.sprite.Path\n * \n * A sprite representing a pie slice.\n */\r\nExt.define('Ext.draw.sprite.Sector', {\r\n    extend: Ext.draw.sprite.Path,\r\n    alias: 'sprite.sector',\r\n    type: 'sector'",2114591,38,"def: {\r\n            processors: {\r\n",2170893,33,"    * @cfg {Number} [centerX=0] The center coordinate of the sprite on the x-axis.\n    ",805983,33,"centerX: 'number',\r\n",2170893,33,"    * @cfg {Number} [centerY=0] The center coordinate of the sprite on the y-axis.\n    ",805983,33,"centerY: 'number',\r\n",2170893,33,"    * @cfg {Number} [startAngle=0] The starting angle of the sprite.\n    ",805983,33,"startAngle: 'number',\r\n",2170893,33,"    * @cfg {Number} [endAngle=0] The ending angle of the sprite.\n    ",805983,33,"endAngle: 'number',\r\n",2170893,33,"    * @cfg {Number} [startRho=0] The starting point of the radius of the sprite.\n    ",805983,33,"startRho: 'number',\r\n",2170893,33,"    * @cfg {Number} [endRho=150] The ending point of the radius of the sprite.\n    ",805983,33,"endRho: 'number',\r\n",2170893,33,"    * @cfg {Number} [margin=0] The margin of the sprite from the center of pie.\n    ",805983,33,"margin: 'number'",1103565,33,"ases: {\r\n                rho: 'endRh",1283828,32,"dirtyTriggers: {\r\n                centerX: 'path,bbox',\r\n                centerY: 'path,bbox',\r\n                startAngle: 'path,bbox',\r\n                endAngle: 'path,bbox',\r\n                startRho: 'path,bbox',\r\n                endRho: 'path,bbox',\r\n                margin: 'path,bbox'",105727,33,"aults: {\r\n                centerX: 0,\r\n                centerY: 0,\r\n                startAngle: 0,\r\n                endAngle: 0,\r\n                startRho: 0,\r\n                endRho: 150,\r\n                margin: 0,\r\n                path: 'M 0,0'",924224,40,"updatePath: function(path, attr) {\r\n        var startAngle = Math.min(attr.startAngle, attr.endAngle),\r\n            endAngle = Math.max(attr.startAngle, attr.endAngle),\r\n            midAngle = (startAngle + endAngle) * 0.5,\r\n            margin = attr.margin,\r\n            centerX = attr.centerX,\r\n            centerY = attr.centerY,\r\n            startRho = Math.min(attr.startRho, attr.endRho),\r\n            endRho = Math.max(attr.startRho, attr.endRho);\r\n        if (margin) {\r\n            centerX += margin * Math.cos(midAngle);\r\n            centerY += margin * Math.sin(midAngle);\r\n        }\r\n        path.moveTo(centerX + startRho * Math.cos(startAngle), centerY + startRho * Math.sin(startAngle));\r\n        path.lineTo(centerX + endRho * Math.cos(startAngle), centerY + endRho * Math.sin(startAngle));\r\n        path.arc(centerX, centerY, endRho, startAngle, endAngle, false);\r\n        path.lineTo(centerX + startRho * Math.cos(endAngle), centerY + startRho * Math.sin(endAngle));\r\n        path.arc(centerX, centerY, startRho, endAngle, startAngle, true",1278341,39,"to provide a way to *approximately* measure the dimension of texts without a drawing context.\n */\r\nExt.define(\"Ext.draw.TextMeasurer\", {\r\n    singleton: true,\r\n    measureDiv: null,\r\n    measureCache: {},\r\n    /**\n     * @private Measure the size of a text with specific font by using DOM to measure it.\n     * Could be very expensive therefore should be used lazily",674779,38,"param {String} font",449311,35,"with `width` and `height` properties",449534,33,"width",449535,38,"\n     */\r\n    actualMeasureText: function(text, font) {\r\n        var me = Ext.draw.TextMeasurer,\r\n            measureDiv = me.measureDiv,\r\n            FARAWAY = 100000",829769,34,"!measureDiv) {\r\n            var par",798828,48,"style: {\r\n                        \"overflow\": \"hidden\",\r\n                        \"position\": \"relative\",\r\n                        \"float\": \"left\",\r\n                        // DO NOT REMOVE THE QUOTE OR IT WILL BREAK COMPRESSOR\r\n                        \"width\": 0,\r\n                        \"height\": 0",144032,41,"});\r\n            me.measureDiv = measureDiv = Ext.Element.create({});\r\n            measureDiv.setStyle({\r\n                \"position\": 'absolute',\r\n                \"x\": FARAWAY,\r\n                \"y\": FARAWAY,\r\n                \"z-index\": -FARAWAY,\r\n                \"white-space\": \"nowrap\",\r\n                \"display\": 'block',\r\n                \"padding\": 0,\r\n                \"margin\"",871450,34,"Ext.getBody().appendChild(parent);\r\n            parent.appendChild(measureDiv);\r\n        }\r\n        if (font) {\r\n            measureDiv.setStyle({\r\n                font: font,\r\n                lineHeight: 'normal'",1286240,38,"measureDiv.setText('(' + text + ')');\r\n        size = measureDiv.getSize();\r\n        measureDiv.setText('()');\r\n        size.width -= measureDiv.getSize().width;",428371,47,"Measure a single-line text with specific font.\n     * This will split the text to characters and add up their size.\n     * That may *not* be the exact size of the text as it is displayed",674779,38,"param {String} font",449311,35,"with `width` and `height` properties",449534,33,"width",449535,38,"\n     */\r\n    measureTextSingleLine: function(text, font) {\r\n        text = text.toString();\r\n        var cache = this.measureCache,\r\n            chars = text.split(''),\r\n            width = 0,\r\n            height = 0,\r\n            cachedItem, charactor, i, ln, size;\r\n        if (!cache[font]) {\r\n            cache[font",517607,33," = cache[font];\r\n        if (cache[text]) {\r\n            return cache[tex",1087647,34," , ln = cha",521135,39,"charactor = chars[i];\r\n            if (!(cachedItem = cache[charactor])) {\r\n                size = this.actualMeasureText(charactor, font);\r\n                cachedItem = cache[charactor] = size;\r\n            }\r\n            width += cachedItem.width;\r\n",2001389,38,"cachedItem.",448661,36,"cache[text] = {\r\n",450444,39,"height: height",112224,37,"Measure a text with specific font.\n     * This will split the text to lines and add up their size.\n     * That may *not* be the exact size of the text as it is displayed",674779,38,"param {String} font",449311,35,"with `width`, `height` and `sizes` properties",449534,33,"width",449535,38,"\n     * @return {Array} return.sizes Results of individual line measurements, in case of multiline text.\n     */\r\n    measureText: function(text, font) {\r\n        var lines = text.split('\\n'),\r\n            ln = lines.length,\r\n            height = 0,\r\n            width = 0,\r\n            line, i, sizes",2101022,47,"this.measureTextSingleLine(text, font);\r\n        }\r\n        sizes = []",1465968,51,"line = this.measureTextSingleLine(lines[i], font);\r\n            sizes.push(line);\r\n            height += line.height;\r\n            width = Math.max(width, line.width",1157744,45,"width: width,\r\n            height: height,\r\n            sizes: sizes",1842203,36,"class Ext.draw.sprite.Text\n * @extends Ext.draw.sprite.Sprite\n *\n * A sprite that represents text.\n *\n *     @example preview miniphone\n *     var component = new Ext.draw.Component({\n *       items: [{\n *         type: 'text',\n *         x: 50,\n *         y: 50,\n *         text: 'Sencha',\n *         fontSize: 18,\n *         fillStyle: 'blue'\n *       }]",1202879,32,"setLayout('fit');\n *     Ext.Viewport.add(component);\n */\r\nExt.define(\"Ext.draw.sprite.Text\", {\r\n    extend: Ext.draw.sprite.Sprite,\r\n    alias: 'sprite.text',\r\n    type: 'text',\r\n    lineBreakRe: /\\n/g",2114591,38,"shortHand1Re: /'(.*)'/g,\r\n        shortHand2Re: / /g,\r\n        shortHand3Re: /\\s*,\\s*/g,\r\n        shortHand4Re: /\\$\\$\\$\\$/g,\r\n        def: {\r\n            processors: {\r\n",2170893,33,"    * @cfg {Number} [x=0] The position of the sprite on the x-axis.\n    ",805983,33,"x: \"number\",\r\n",2170893,33,"    * @cfg {Number} [y=0] The position of the sprite on the y-axis.\n    ",805983,33,"y: \"number\",\r\n",2170893,33,"    * @cfg {String} [text=''] The text represented in the sprite.\n    ",805983,34,"ext: \"string\",\r\n",2170893,33,"    * @cfg {String/Number} [fontSize='10px'] The size of the font displayed.\n    ",805983,33,"fontSize: function(n) {\r\n                    if (!isNaN(n)",53200,36,"+n + 'px';",71552,33,"n.match(Ext.dom.Element.unitRe)",53200,36,"n",214368,43,",\r\n",2170893,33,"    * @cfg {String} [fontStyle=''] The style of the font displayed. {normal, italic, oblique}\n    ",805983,33,"fontStyle: \"enums(,italic,oblique)\",\r\n",2170893,33,"    * @cfg {String} [fontVariant=''] The variant of the font displayed. {normal, small-caps}\n    ",805983,33,"fontVariant: \"enums(,small-caps)\",\r\n",2170893,33,"    * @cfg {String} [fontWeight=''] The weight of the font displayed. {normal, bold, bolder, lighter}\n    ",805983,33,"fontWeight: (function(fontWeight",36624,33,"function(n",282080,34,"n",218592,34,"eturn \"\";",99157,33,"if (n === 'normal",218591,35,"eturn '';",99157,33,"if (!isNaN(n",5040,34,"n = +n",104159,35,"100 <= n && n <= 90",855184,34,"    return n",218768,58,"} else if (n in fontWeight",149056,34,"return ",1146224,51,"};\r\n                })({\r\n                    \"normal\": true,\r\n                    \"bold\": true,\r\n                    \"bolder\": true,\r\n                    \"lighter\": true\r\n                }),\r\n",2170893,33,"    * @cfg {String} [fontFamily='sans-serif'] The family of the font displayed.\n    ",805983,33,"fontFamily: \"string\",\r\n",2170893,33,"    * @cfg {String} [textAlign='start'] The alignment of the text displayed. {left, right, center, start, end}\n    ",805983,34,"extAlign: (function(textAlign",36624,33,"function(n",282080,33,"n === 'middle",218591,35,"eturn 'center';",99157,33,"if (!n",218592,34,"eturn \"center\";",99157,33,"if (!Ext.isString(n",5040,34,"return undefined;",99157,33,"if (n in textAlign",149056,34,"return ",1146224,51,"};\r\n                })({\r\n                    \"left\": true,\r\n                    \"right\": true,\r\n                    \"center\": true,\r\n                    \"start\": true,\r\n                    \"end\": true\r\n                }),\r\n",2170893,33,"    * @cfg {String} [textBaseline=\"alphabetic\"] The baseline of the text displayed. {top, hanging, middle, alphabetic, ideographic, bottom}\n    ",805983,34,"extBaseline: (function(textBaselin",36623,34,"function(n",282080,33,"n",53423,39,"    return \"alphabetic\";",99157,33,"if (n in textBaseline",149056,34,"return n;",99157,33,"if (n === 'center",218591,35,"eturn 'middle",818896,52,";\r\n                })({\r\n                    \"top\": true,\r\n                    \"hanging\": true,\r\n                    \"middle\": true,\r\n                    \"alphabetic\": true,\r\n                    \"ideographic\": true,\r\n                    \"bottom\": true\r\n                }),\r\n",2170893,33,"    * @cfg {String} [font='10px sans-serif'] The font displayed.\n    ",805983,33,"font: \"string\"",1103565,33,"ases: {\r\n                \"font-size\": \"fontSize\",\r\n                \"font-family\": \"fontFamily\",\r\n                \"font-weight\": \"fontWeight\",\r\n                \"font-variant\": \"fontVariant\",\r\n                \"text-anchor\": \"textAlign\"",105727,33,"aults: {\r\n                fontStyle: '',\r\n                fontVariant: '',\r\n                fontWeight: '',\r\n                fontSize: '10px',\r\n                fontFamily: 'sans-serif',\r\n                font: '10px sans-serif',\r\n                textBaseline: \"alphabetic\",\r\n                textAlign: \"start\",\r\n                strokeStyle: 'rgba(0, 0, 0, 0)',\r\n                divBased: true,\r\n                fillStyle: '#000',",2117885,45,",\r\n                text: ''",2118276,33,"tyTriggers: {\r\n                fontStyle: 'font,bbox',\r\n                fontVariant: 'font,bbox',\r\n                fontWeight: 'font,bbox',\r\n                fontSize: 'font,bbox',\r\n                fontFamily: 'font,bbox',\r\n                font: 'font-short-hand,bbox,canvas',\r\n                textBaseline: 'bbox',\r\n                textAlign: 'bbox',\r\n                x: \"bbox\",\r\n                y: \"bbox\",\r\n                text: \"bbox\"\r\n            },\r\n            updaters: {\r\n                \"font-short-hand\": (",2057528,32,"            return function(attrs",1152322,32,"TODO: Do this according to http://www.w3.org/TR/CSS21/fonts.html#font-shorthand\r\n                        var value = attrs.font",103328,32,"arts, part, i, ln, dispKey;",297620,34,"value.replace(Ext.draw.sprite.Text.shortHand1Re, function(a, arg1",218592,34,"eturn arg1.replace(Ext.draw.sprite.Text.shortHand2Re, '$$$$');\r\n    ",6012,41,"        value = value.replace(Ext.draw.sprite.Text.shortHand3Re, ',');\r\n",216534,32,"value",1180828,38,"attrs",218763,32,220288,68,212463,46,"        dispKey = dispatcher[part",257904,36,"dispKey",218592,33,"    attrs[dispKey] = par",820608,32,"} else if (part.match(Ext.dom.Element.unitR",710896,35,"    attrs.fontSize = par",820608,32,241904,34,"        attrs.fontFamily = part.replace(Ext.draw.sprite.Text.shortHand4Re, ' ",93456,60,1039108,33,"etAttributes(attrs, true",143902,44,"})({\r\n                    \"italic\": \"fontStyles\",\r\n                    \"oblique\": \"fontStyles\",\r\n                    \"bold\": \"fontWeights\",\r\n                    \"bolder\": \"fontWeights\",\r\n                    \"lighter\": \"fontWeights\",\r\n                    \"100\": \"fontWeights\",\r\n                    \"200\": \"fontWeights\",\r\n                    \"300\": \"fontWeights\",\r\n                    \"400\": \"fontWeights\",\r\n                    \"500\": \"fontWeights\",\r\n                    \"600\": \"fontWeights\",\r\n                    \"700\": \"fontWeights\",\r\n                    \"800\": \"fontWeights\",\r\n                    \"900\": \"fontWeights\",\r\n                    \"small-caps\": \"fontVariant\"\r\n                }),\r\n                \"font\": function(attrs) {\r\n                    var font = '';\r\n                    if (attrs.fontWeight) {\r\n                        font += attrs.fontWeight + ' '",325008,46,"if (attrs.fontVariant) {\r\n                        font += attrs.fontVariant + ' '",325008,46,"if (attrs.fontSize) {\r\n                        font += attrs.fontSize + ' '",325008,46,"if (attrs.fontFamily) {\r\n                        font += attrs.fontFamily + ' '",325008,46,"this.setAttributes({\r\n                        font: font.substr(0, font.length - 1)\r\n                    }",1041389,42,2228699,47,"config) {\r\n        Ext.draw.sprite.Sprite.prototyp",1325343,47,"updatePlainBBox: function(plai",452144,42,"attr = me.attr,\r\n            x = attr.x,\r\n            y = attr.y,\r\n            dx = [],\r\n            font = attr.font,\r\n            text = attr.text,\r\n            baseline = attr.textBaseline,\r\n            alignment = attr.textAlign,\r\n            size = Ext.draw.TextMeasurer.measureText(text, font),\r\n            sizes = size.sizes,\r\n            height = size.height,\r\n            width = size.width,\r\n            ln = sizes ? sizes.length : 0,\r\n            i = 0;\r\n        switch (baseline) {\r\n            case 'hanging':\r\n            case 'top':",468381,43,"'ideographic':\r\n            case 'bottom':\r\n                y -= height",468380,44,"'alphabetic':\r\n                y -= height * 0.8",468380,44,"'middle':\r\n            case 'center':\r\n                y -= height * 0.5",468380,35,"}\r\n        switch (alignment) {\r\n            case 'end':\r\n            case 'right':\r\n                x -= width",98586,62,"dx.push(width - sizes[i].width",6734,40,"break;\r\n            case 'middle':\r\n            case 'center':\r\n                x -= width * 0.5",98586,62,"dx.push((width - sizes[i].width) * 0.5",6734,40,"break;\r\n        }\r\n        attr.textAlignOffsets = dx;\r\n        plain.x = x;\r\n        plain.y = y;\r\n        plain.width = width;\r\n        plain.height = height",420089,55,"setAttributes({\r\n            text: text",1128025,33,"setElementStyles: function(element, styles) {\r\n        var stylesCache = element.stylesCache || (element.stylesCache = {}),\r\n            style = element.dom.style",397352,76,"Cache[name] !== styles[name]) {\r\n                stylesCache[name] = style[name] = styles",268751,32,"}\r\n    },\r\n    render: function(surface, ctx) {\r\n        var attr = this.attr,\r\n            mat = Ext.draw.Matrix.fly(attr.matrix.elements.slice(0)),\r\n            bbox = this.getBBox(true),\r\n            dx = attr.textAlignOffsets,\r\n            x, y, i, lines;\r\n        if (attr.text",1413626,58,"lines = attr.text.split('\\n');\r\n        // Simulate textBaseline and textAlign.\r\n        x = attr.bbox.plain.x;\r\n        y = attr.bbox.plain.y;\r\n        mat.toContext(ctx);\r\n        for (i = 0; i < lines.",939223,32,"ctx.fillStyle !",473254,34,"        ctx.fillText(lines[i], x + (dx[i] || 0), y + bbox.height / lines.length * i",563072,35,"ctx.strokeStyle !",473254,34,"        ctx.strokeText(lines[i], x + (dx[i] || 0), y + bbox.height / lines.length * i",358736,34,"}\r\n});\r\n\r\n/**\n * Linear gradient.\n *\n *     @example preview miniphone\n *     var component = new Ext.draw.Component({\n *       items: [{\n *         type: 'circle',\n *         cx: 50,\n *         cy: 50,\n *         r: 100,\n *         fillStyle: {\n *           type: 'linear',\n *           degrees: 0,\n *           stop",904511,39,"offset: 0,\n *               color: 'white",1396816,54,"offset: 1,\n *               color: 'blue'\n *             }\n *",1658591,33,"  }]",1202879,32,"setLayout('fit');\n *     Ext.Viewport.add(component);\n */\r\nExt.define(\"Ext.draw.gradient.Linear\", {\r\n    extend: Ext.draw.gradient.Gradient,\r\n    type: 'linear",1210336,48,"Number} The degree of rotation of the gradient.\n         */\r\n        degrees: 0\r\n    },\r\n    setAngle: function(angle) {\r\n        this.setDegrees(angle);\r\n    },\r\n    /**\n     * @inheritdoc\n     */\r\n    generateGradient: function(ctx, bbox) {\r\n        var angle = Ext.draw.Draw.rad(this.getDegrees()),\r\n            cos = Math.cos(angle),\r\n            sin = Math.sin(angle),\r\n            w = bbox.width,\r\n            h = bbox.height,\r\n            cx = bbox.x + w * 0.5,\r\n            cy = bbox.y + h * 0.5,\r\n            stops = this.getStops(),\r\n            ln = stops.length,\r\n            gradient, l, i;\r\n        if (!isNaN(cx) && !isNaN(cy) && h > 0 && w > 0) {\r\n            l = (Math.sqrt(h * h + w * w) * Math.abs(Math.cos(angle - Math.atan(h / w)))) / 2;\r\n            gradient = ctx.createLinearGradient(cx + cos * l, cy + sin * l, cx - cos * l, cy - sin * l)",1463327,59,"gradient.addColorStop(stops[i].offset, stops[i].color",292544,38,"gradient;\r\n        }\r\n        return 'none';\r\n    }\r\n});\r\n\r\n/**\n * Radial gradient.\n *\n *     @example preview miniphone\n *     var component = new Ext.draw.Component({\n *       items: [{\n *         type: 'circle',\n *         cx: 50,\n *         cy: 50,\n *         r: 100,\n *         fillStyle: {\n *           type: 'radial',\n *           start: {\n *             x: 0,\n *             y: 0,\n *             r: 0\n *           },\n *           end: {\n *             x: 0,\n *             y: 0,\n *             r: 1\n *           },\n *           stop",904511,39,"offset: 0,\n *               color: 'white",1396816,54,"offset: 1,\n *               color: 'blue'\n *             }\n *",1658591,33,"  }]",1202879,32,"setLayout('fit');\n *     Ext.Viewport.add(component);\n */\r\nExt.define(\"Ext.draw.gradient.Radial\", {\r\n    extend: Ext.draw.gradient.Gradient,\r\n    type: 'radial",1210336,48,"Object} start The starting circle of the gradient.\n         */\r\n        start",977344,40,",\r\n            r: 0",1277360,43,"Object} end The ending circle of the gradient.\n         */\r\n        end",977344,40,",\r\n            r: 1\r\n        }\r\n    },\r\n    applyStart: function(newStart, oldStart) {\r\n        if (!oldStart) {\r\n            return newStart;\r\n        }\r\n        var circle = {\r\n                x: oldStart.x,\r\n                y: oldStart.y,\r\n                r: oldStart.r\r\n            };\r\n        if ('x' in newStart) {\r\n            circle.x = newStart.x;\r\n        } else if ('centerX' in newStart) {\r\n            circle.x = newStart.centerX;\r\n        }\r\n        if ('y' in newStart) {\r\n            circle.y = newStart.y;\r\n        } else if ('centerY' in newStart) {\r\n            circle.y = newStart.centerY;\r\n        }\r\n        if ('r' in newStart) {\r\n            circle.r = newStart.r;\r\n        } else if ('radius' in newStart) {\r\n            circle.r = newStart.radius;\r\n        }\r\n        return circle;\r\n    },\r\n    applyEnd: function(newEnd, oldEnd) {\r\n        if (!oldEnd) {\r\n            return newEnd;\r\n        }\r\n        var circle = {\r\n                x: oldEnd.x,\r\n                y: oldEnd.y,\r\n                r: oldEnd.r\r\n            };\r\n        if ('x' in newEnd) {\r\n            circle.x = newEnd.x;\r\n        } else if ('centerX' in newEnd) {\r\n            circle.x = newEnd.centerX;\r\n        }\r\n        if ('y' in newEnd) {\r\n            circle.y = newEnd.y;\r\n        } else if ('centerY' in newEnd) {\r\n            circle.y = newEnd.centerY;\r\n        }\r\n        if ('r' in newEnd) {\r\n            circle.r = newEnd.r;\r\n        } else if ('radius' in newEnd) {\r\n            circle.r = newEnd.radius;\r\n        }\r\n        return circle;\r\n    },\r\n    /**\n     * @inheritdoc\n     */\r\n    generateGradient: function(ctx, bbox) {\r\n        var start = this.getStart(),\r\n            end = this.getEnd(),\r\n            w = bbox.width * 0.5,\r\n            h = bbox.height * 0.5,\r\n            x = bbox.x + w,\r\n            y = bbox.y + h,\r\n            gradient = ctx.createRadialGradient(x + start.x * w, y + start.y * h, start.r * Math.max(w, h), x + end.x * w, y + end.y * h, end.r * Math.max(w, h)),\r\n            stops = this.getStops(),\r\n            ln = stop",1456542,75,"gradient.addColorStop(stops[i].offset, stops[i].col",502853,32,"gradient",1278342,38,"to calculate [affine transformation](http://en.wikipedia.org/wiki/Affine_transformation) matrix.\n *\n * This class is compatible with SVGMatrix except:\n *\n *   1. Ext.draw.Matrix is not read only.\n *   2. Using Number as its components rather than floats.\n *\n * Using this class to reduce the severe numeric problem with HTML Canvas and SVG transformation.\n *\n */\r\nExt.define('Ext.draw.Matrix', {",708732,41,"@static\n         * Return the affine matrix that transform two points (x0, y0) and (x1, y1) to (x0p, y0p) and (x1p, y1p)\n         * @param {Number} x0\n         * @param {Number} y0\n         * @param {Number} x1\n         * @param {Number} y1\n         * @param {Number} x0p\n         * @param {Number} y0p\n         * @param {Number} x1p\n         * @param {Number} y1p\n         */\r\n        createAffineMatrixFromTwoPair: function(x0, y0, x1, y1, x0p, y0p, x1p, y1p) {\r\n            var dx = x1 - x0,\r\n                dy = y1 - y0,\r\n                dxp = x1p - x0p,\r\n                dyp = y1p - y0p,\r\n                r = 1 / (dx * dx + dy * dy),\r\n                a = dx * dxp + dy * dyp,\r\n                b = dxp * dy - dx * dyp,\r\n                c = -a * x0 - b * y0,\r\n                f = b * x0 - a * y0;\r\n            return new this(a * r,-b * r,b * r,a * r,c * r + x0p,f * r + y0p",137888,39,"@static\n         * Return the affine matrix that transform two points (x0, y0) and (x1, y1) to (x0p, y0p) and (x1p, y1p)\n         * @param {Number} x0\n         * @param {Number} y0\n         * @param {Number} x1\n         * @param {Number} y1\n         * @param {Number} x0p\n         * @param {Number} y0p\n         * @param {Number} x1p\n         * @param {Number} y1p\n         */\r\n        createPanZoomFromTwoPair: function(x0, y0, x1, y1, x0p, y0p, x1p, y1p) {",146794,61,"return this.createPanZoomFromTwoPair.apply(this, x0.concat(y0",643200,32,"var dx = x1 - x0,\r\n                dy = y1 - y0,\r\n                cx = (x0 + x1) * 0.5,\r\n                cy = (y0 + y1) * 0.5,\r\n                dxp = x1p - x0p,\r\n                dyp = y1p - y0p,\r\n                cxp = (x0p + x1p) * 0.5,\r\n                cyp = (y0p + y1p) * 0.5,\r\n                r = dx * dx + dy * dy,\r\n                rp = dxp * dxp + dyp * dyp,\r\n                scale = Math.sqrt(rp / r",663712,32,"scale,0,0,scale,cxp - scale * cx,cyp - scale * cy",137888,39,"@static\n         * Create a flyweight to wrap the given array.\n         * The flyweight will directly refer the object and the elements can be changed by other",158105,32,"Do not hold the instance of flyweight matrix",63472,39,"elements\n         * @return {Ext.draw.Matrix}\n         */\r\n        fly",613438,33,"flyMatrix = null,\r\n                simplefly = function(elements) {\r\n                    flyMatrix.elements = elements;\r\n                    return flyMatrix",6735,35,"return function(elements) {\r\n                if (!flyMatrix) {\r\n                    flyMatrix = new Ext.draw.Matrix",1791840,36,"    flyMatrix.elements = elements;\r\n                Ext.draw.Matrix.fly = simplefly;\r\n                return flyMatrix",636205,51,"    * @static\n         * Create a matrix from `mat`. If `mat` is already a matrix, returns it.\n         * @param {Mixed} mat\n         * @return {Ext.draw.Matrix}",178798,39,"mat) {\r\n            if (mat instanceof",826452,33,"mat",611840,37,"new this(",1612191,41,"Create an affine transform matrix",1293150,32,"xx Coefficient from x to x\n     * @param {Number} xy Coefficient from x to y\n     * @param {Number} yx Coefficient from y to x\n     * @param {Number} yy Coefficient from y to y\n     * @param {Number} dx Offset of x\n     * @param {Number} dy Offset of y",1566672,36,"xx, xy, yx, yy, dx, dy) {\r\n        if (xx && xx.length === 6) {\r\n            this.elements = xx.slice();\r\n        } else if (xx",899686,36,"elements = [\r\n                xx,\r\n                xy,\r\n                yx,\r\n                yy,\r\n                dx,\r\n                dy",2149050,53,"elements = [\r\n",45209,36,"0,",450049,38,"1,",450049,66,"\r\n    },\r\n    /**\n     * Prepend a matrix onto the curr",1138037,33,"given transform will come after the current one",1293150,32,"xx Coefficient from x to x.\n     * @param {Number} xy Coefficient from x to y.\n     * @param {Number} yx Coefficient from y to x.\n     * @param {Number} yy Coefficient from y to y.\n     * @param {Number} dx Offset of x.\n     * @param {Number} dy Offset of y.\n     * @return {Ext.draw.Matrix} this\n     */\r\n    prepend: function(xx, xy, yx, yy, dx, dy",1514316,33,"elements,\r\n            xx0 = elements[0],\r\n            xy0 = elements[1],\r\n            yx0 = elements[2],\r\n            yy0 = elements[3],\r\n            dx0 = elements[4],\r\n            dy0 = elements[5];\r\n        elements[0] = xx * xx0 + yx * xy0;\r\n        elements[1] = xy * xx0 + yy * xy0;\r\n        elements[2] = xx * yx0 + yx * yy0;\r\n        elements[3] = xy * yx0 + yy * yy0;\r\n        elements[4] = xx * dx0 + yx * dy0 + dx;\r\n        elements[5] = xy * dx0 + yy * dy0 + dy",455200,48,"Prepend a matrix onto the curr",1138037,33,"given transform will come after the current one.\n     * @param {Ext.draw.Matrix} matrix\n     * @return {Ext.draw.Matrix} this\n     */\r\n    prependMatrix: function(matrix) {\r\n        return this.prepend.apply(this, matrix.ele",1083503,32,"Postpend a matrix onto the curr",1138037,33,"given transform will come before the current one",1293150,32,"xx Coefficient from x to x.\n     * @param {Number} xy Coefficient from x to y.\n     * @param {Number} yx Coefficient from y to x.\n     * @param {Number} yy Coefficient from y to y.\n     * @param {Number} dx Offset of x.\n     * @param {Number} dy Offset of y.\n     * @return {Ext.draw.Matrix} this\n     */\r\n    append: function(xx, xy, yx, yy, dx, dy",1514316,33,"elements,\r\n            xx0 = elements[0],\r\n            xy0 = elements[1],\r\n            yx0 = elements[2],\r\n            yy0 = elements[3],\r\n            dx0 = elements[4],\r\n            dy0 = elements[5];\r\n        elements[0] = xx * xx0 + xy * yx0;\r\n        elements[1] = xx * xy0 + xy * yy0;\r\n        elements[2] = yx * xx0 + yy * yx0;\r\n        elements[3] = yx * xy0 + yy * yy0;\r\n        elements[4] = dx * xx0 + dy * yx0 + dx0;\r\n        elements[5] = dx * xy0 + dy * yy0 + dy0",455200,48,"Postpend a matrix onto the curr",1138037,33,"given transform will come before the current one.\n     *\n     * @param {Ext.draw.Matrix} matrix\n     * @return {Ext.draw.Matrix} this\n     */\r\n    appendMatrix: function(matrix) {\r\n        return this.append.apply(this, matrix.ele",1083503,32,"Set the elements of a Matrix\n     * @param {Number} xx\n     * @param {Number} xy\n     * @param {Number} yx\n     * @param {Number} yy\n     * @param {Number} dx\n     * @param {Number} dy\n     * @return {Ext.draw.Matrix",421034,34,"xx, xy, yx, yy, dx, dy",1514316,33,"elements;\r\n        elements[0] = xx;\r\n        elements[1] = xy;\r\n        elements[2] = yx;\r\n        elements[3] = yy;\r\n        elements[4] = dx;\r\n        elements[5] = dy",455200,48,"Return a new matrix represents the opposite transformation of the current one.\n     *\n     * @param {Ext.draw.Matrix} [target] A target matrix. If present, it will receive\n     * the result of inversion to avoid creating a new object.\n     *\n     * @return {Ext.draw.Matrix}\n     */\r\n    inverse",2071600,34,500444,39,"a = elements[0],\r\n            b = elements[1],\r\n            c = elements[2],\r\n            d = elements[3],\r\n            e = elements[4],\r\n            f = elements[5],\r\n            rDim = 1 / (a * d - b * c);\r\n        a *= rDim;\r\n        b *= rDim;\r\n        c *= rDim;\r\n        d *= rDim;\r\n        if (target) {\r\n            target.set(d, -b, -c, a, c * f - d * e, b * e - a * f);\r\n            return targ",1585808,42,"new Ext.draw.Matrix(d,-b,-c,a,c * f - d * e,b * e - a * f",1240432,38,"Translate the matrix",1293150,32,"x\n     * @param {Number} y\n     * @param {Boolean} [prepend] If `true`, this will transformation be prepended to the matrix.\n     * @return {Ext.draw.Matrix} this\n     */",714828,32,"prepend) {\r\n        if (prepend",183395,33,"end(1, 0, 0, 1, x, ",1467887,42,"this.append(1, 0, 0, 1, x, y",1240432,38,"Scale the matrix",1293150,32,"sx\n     * @param {Number} sy\n     * @param {Number} scx\n     * @param {Number} scy\n     * @param {Boolean} [prepend] If `true`, this will transformation be prepended to the matrix.\n     * @return {Ext.draw.Matrix} this\n     */\r\n    scale: function(sx, sy, scx, scy, prepend",1205536,37,"// null or undefined\r\n        if (sy == null) {\r\n            sy = sx;\r\n        }\r\n        if (scx === undefined) {\r\n            scx = 0;\r\n        }\r\n        if (scy === undefined) {\r\n            scy = 0;\r\n        }\r\n        if (prepend) {\r\n            return me.prepend(sx, 0, 0, sy, scx - scx * sx, scy - scy * s",1467887,42,"me.append(sx, 0, 0, sy, scx - scx * sx, scy - scy * sy",1244464,39,"otate the matrix",1293150,32,"angle Radians to rotate\n     * @param {Number|null} rcx Center of rotation.\n     * @param {Number|null} rcy Center of rotation.\n     * @param {Boolean} [prepend] If `true`, this will transformation be prepended to the matrix.\n     * @return {Ext.draw.Matrix} this\n     */\r\n    rotate: function(angle, rcx, rcy, prepen",1900240,42,"cos = Math.cos(angle),\r\n            sin = Math.sin(angle);\r\n        rcx = rcx || 0;\r\n        rcy = rcy || 0;\r\n        if (prepend) {\r\n            return me.prepend(cos, sin, -sin, cos, rcx - cos * rcx + rcy * sin, rcy - cos * rcy - rcx * sin",1467888,41,"me.append(cos, sin, -sin, cos, rcx - cos * rcx + rcy * sin, rcy - cos * rcy - rcx * si",924880,40,"otate the matrix by the angle of a vector",1293150,32,"x\n     * @param {Number} y\n     * @param {Boolean} [prepend] If `true`, this will transformation be prepended to the matrix.\n     * @return {Ext.draw.Matrix} this\n     */\r\n    rotateFromVector: function(x, y, prepen",1900240,43," = Math.sqrt(x * x + y * y),\r\n            cos = x / d,\r\n            sin = y / d;\r\n        if (prepend) {\r\n            return me.prepend(cos, sin, -sin, cos, 0, 0",1467888,41,"me.append(cos, sin, -sin, cos, 0, 0",1240432,38,"Clone this matrix.\n     * @return {Ext.draw.Matrix",942670,44,"return new Ext.draw.Matrix(this.ele",1083503,32,"Horizontally flip the matrix\n     * @return {Ext.draw.Matrix} this\n     */\r\n    flipX",860336,36,"append(-1, 0, 0, 1, 0, 0);\r\n    },\r\n    /**\n     * Vertically flip the matrix\n     * @return {Ext.draw.Matrix} this\n     */\r\n    flipY",860336,36,"append(1, 0, 0, -1, 0, 0);\r\n    },\r\n    /**\n     * Skew the matrix\n     * @param {Number} angle\n     * @return {Ext.draw.Matrix} this\n     */\r\n    skewX: function(angle) {\r\n        return this.append(1, Math.tan(angle), 0, -1, 0, 0);\r\n    },\r\n    /**\n     * Skew the matrix\n     * @param {Number} angle\n     * @return {Ext.draw.Matrix} this\n     */\r\n    skewY: function(angle) {\r\n        return this.append(1, 0, Math.tan(angle), -1, 0, 0",1244870,32," the matrix to identical.\n     * @return {Ext.draw.Matrix",1260210,49,"return this.set(1, 0, 0, 1, 0, 0",1694112,43,"Split Matrix to `{{devicePixelRatio,c,0},{b,devicePixelRatio,0},{0,0,1}}.{{xx,0,dx},{0,yy,dy},{0,0,1}}`\n     * @return {Object} Object with b,c,d=devicePixelRatio,xx,yy,dx,dy\n     */\r\n    precisionCompensate: function(devicePixelRatio, comp",1514316,33,"elements,\r\n            x2x = elements[0],\r\n            x2y = elements[1],\r\n            y2x = elements[2],\r\n            y2y = elements[3],\r\n            newDx = elements[4],\r\n            newDy = elements[5],\r\n            r = x2y * y2x - x2x * y2y;\r\n        comp.b = devicePixelRatio * x2y / x2x;\r\n        comp.c = devicePixelRatio * y2x / y2y;\r\n        comp.d = devicePixelRatio;\r\n        comp.xx = x2x / devicePixelRatio;\r\n        comp.yy = y2y / devicePixelRatio;\r\n        comp.dx = (newDy * x2x * y2x - newDx * x2x * y2y) / r / devicePixelRatio;\r\n        comp.dy = (newDx * x2y * y2y - newDy * x2x * y2y) / r / devicePixelRatio",979376,42,"Split Matrix to `{{1,c,0},{b,d,0},{0,0,1}}.{{xx,0,dx},{0,xx,dy},{0,0,1}}`\n     * @return {Object} Object with b,c,d,xx,yy=xx,dx,dy\n     */\r\n    precisionCompensateRect: function(devicePixelRatio, comp",1514316,33,"elements,\r\n            x2x = elements[0],\r\n            x2y = elements[1],\r\n            y2x = elements[2],\r\n            y2y = elements[3],\r\n            newDx = elements[4],\r\n            newDy = elements[5],\r\n            yxOnXx = y2x / x2x;\r\n        comp.b = devicePixelRatio * x2y / x2x;\r\n        comp.c = devicePixelRatio * yxOnXx;\r\n        comp.d = devicePixelRatio * y2y / x2x;\r\n        comp.xx = x2x / devicePixelRatio;\r\n        comp.yy = x2x / devicePixelRatio;\r\n        comp.dx = (newDy * y2x - newDx * y2y) / (x2y * yxOnXx - y2y) / devicePixelRatio;\r\n        comp.dy = -(newDy * x2x - newDx * x2y) / (x2y * yxOnXx - y2y) / devicePixelRatio;\r\n    },\r\n    /**\n     * Transform point returning the x component of the result.\n     * @param {Number} x\n     * @param {Number} y\n     * @return {Number} x component of the result.\n     */\r\n    x",1993680,32,"elements = this.elements;\r\n        return x * elements[0] + y * elements[2] + elements[4];\r\n    },\r\n    /**\n     * Transform point returning the y component of the result.\n     * @param {Number} x\n     * @param {Number} y\n     * @return {Number} y component of the result.\n     */\r\n    y",1993680,32,"elements = this.elements;\r\n        return x * elements[1] + y * elements[3] + elements[5]",1072672,50,"Number} i\n     * @param {Number} j",37917,38,"get: function(i, j) {\r\n        return +this.elements[i + j * 2].toFixed(4",1093948,32,"form a point to a new array.\n     * @param {Array} point",2046368,37,"transformPoint: function(point",1514316,33,"elements",443646,33,"point[0] * elements[0] + point[1] * elements[2] + elements[4],\r\n            point[0] * elements[1] + point[1] * elements[3] + elements[5",444288,38,"@param {Object} bbox Given as `{x: Number, y: Number, width: Number, height: Number}`.\n     * @param {Number} [radius]\n     * @param {Object} [target] Optional target object to recieve the result.\n     * Recommended to use it for better gc.",1822836,32,"Object with x, y, width and height.\n     */\r\n    transformBBox: function(bbox, radius, target",1514316,33,"elements,\r\n            l = bbox.x,\r\n            t = bbox.y,\r\n            w0 = bbox.width * 0.5,\r\n            h0 = bbox.height * 0.5,\r\n            xx = elements[0],\r\n            xy = elements[1],\r\n            yx = elements[2],\r\n            yy = elements[3],\r\n            cx = l + w0,\r\n            cy = t + h0,\r\n            w, h, scales;\r\n        if (radius) {\r\n            w0 -= radius;\r\n            h0 -= radius;\r\n            scales = [\r\n                Math.sqrt(elements[0] * elements[0] + elements[2] * elements[2]),\r\n                Math.sqrt(elements[1] * elements[1] + elements[3] * elements[3])\r\n            ];\r\n            w = Math.abs(w0 * xx) + Math.abs(h0 * yx) + Math.abs(scales[0] * radius);\r\n            h = Math.abs(w0 * xy) + Math.abs(h0 * yy) + Math.abs(scales[1] * radiu",1206672,35,"w = Math.abs(w0 * xx) + Math.abs(h0 * yx);\r\n            h = Math.abs(w0 * xy) + Math.abs(h0 * yy);\r\n        }",2071647,38,"target = {};\r\n        }\r\n        target.x = cx * xx + cy * yx + elements[4] - w;\r\n        target.y = cx * xy + cy * yy + elements[5] - h;\r\n        target.width = w + w;\r\n        target.height = h + h;",2071544,38,"/**\n     * Transform a list for points.\n     *\n     * __Note:__ will change the original list but not points inside it.\n     * @param {Array} list\n     * @return {Array} list\n     */\r\n    transformList: function(list",1514316,33,"elements,\r\n            xx = elements[0],\r\n            yx = elements[2],\r\n            dx = elements[4],\r\n            xy = elements[1],\r\n            yy = elements[3],\r\n            dy = elements[5],\r\n            ln = list.length,\r\n            p, i",1465968,51,"p = list[i];\r\n            list[i] = [\r\n                p[0] * xx + p[1] * yx + dx,\r\n                p[0] * xy + p[1] * yy + dy",2041134,44,"list",1342666,45,"this matrix is an identity matrix (no transform)",1911232,42,"Identit",719584,36,"s = this.elements;\r\n        return elements[0] === 1 && elements[1] === 0 && elements[2] === 0 && elements[3] === 1 && elements[4] === 0 && elements[5]",1950768,32,"Determines if this matrix has the same values as another matrix.\n     * @param {Ext.draw.Matrix} matrix",499872,39,"equals: function(matrix",1514316,33,"elements,\r\n            elements2 = matrix.elements;\r\n        return elements[0] === elements2[0] && elements[1] === elements2[1] && elements[2] === elements2[2] && elements[3] === elements2[3] && elements[4] === elements2[4] && elements[5] === elements2[5]",112704,34,"n array of elements by horizontal order (xx,yx,dx,yx,yy,dy)",2046367,38,"toArra",719584,36,"s = this.elements",443646,33,"elements[0],\r\n            elements[2],\r\n            elements[4],\r\n            elements[1],\r\n            elements[3],\r\n            elements[5",444288,38,"Create an array of elements by vertical order (xx,xy,yx,yy,dx,dy).\n     * @return {Array|String}\n     */\r\n    toVerticalArray",860336,36,"elements.slice();\r\n    },\r\n    /**\n     * Get an array of elements.\n     * The numbers are rounded to keep only 4 decimals",2046367,38,1098079,32,"var me = this",443646,33,"me.get(0, 0),\r\n            me.get(0, 1),\r\n            me.get(1, 0),\r\n            me.get(1, 1),\r\n            me.get(2, 0),\r\n            me.get(2, 1)\r\n        ].join(',",397949,32,"y the matrix to a drawing context.\n     * @param {Object} ctx\n     * @return {Ext.draw.Matrix} this\n     */\r\n    toContext: function(ctx) {\r\n        ctx.transform.apply(ctx, this.elements",434528,49,"Return a string that can be used as transform attribute in SVG.",37917,38,"toSvg",1036991,35,"s = this.elements;\r\n        // The reason why we cannot use `.join` is the `1e5` form is not accepted in svg.\r\n        return \"matrix(\" + elements[0].toFixed(9) + ',' + elements[1].toFixed(9) + ',' + elements[2].toFixed(9) + ',' + elements[3].toFixed(9) + ',' + elements[4].toFixed(9) + ',' + elements[5].toFixed(9) + \")\"",1897008,34,"x scale of the matrix.",1412271,41,"ScaleX",1036991,35,"s = this.elements;\r\n        return Math.sqrt(elements[0] * elements[0] + elements[2] * elements[2]",1897376,35,"y scale of the matrix.",1412271,41,"ScaleY",1036991,35,"s = this.elements;\r\n        return Math.sqrt(elements[1] * elements[1] + elements[3] * elements[3]);\r\n    },\r\n    /**\n     * Get x-to-x component of the matrix",1412271,41,"XX",860336,36,"elements",442922,32," x-to-y component of the matrix.",1412271,41,"XY",860336,36,"elements",443256,32," y-to-x component of the matrix.",1412271,41,"YX",860336,36,"elements[2];\r\n    },\r\n    /**\n     * Get y-to-y component of the matrix.",1412271,41,"YY",860336,36,"elements[3];\r\n    },\r\n    /**\n     * Get offset x component of the matrix.",1412271,41,"DX",860336,36,"elements[4];\r\n    },\r\n    /**\n     * Get offset y component of the matrix.",1412271,41,"DY",860336,36,"elements[5];\r\n    },\r\n    /**\n     * Split matrix into Translate, Scale, Shear, and Rotat",1888896,40,"split",1242799,38,"elements,\r\n            xx = el[0],\r\n            xy = el[1],\r\n            yx = el[2],\r\n            yy = el[3],\r\n            out = {\r\n                translateX: el[4],\r\n                translateY: el[5]\r\n            };\r\n        out.scaleX = Math.sqrt(xx * xx + yx * yx);\r\n        out.shear = (xx * xy + yx * yy) / out.scaleX;\r\n        xy -= out.shear * xx;\r\n        yy -= out.shear * yx;\r\n        out.scaleY = Math.sqrt(xy * xy + yy * yy);\r\n        out.shear /= out.scaleY;\r\n        out.rotation = -Math.atan2(yx / out.scaleX, xy / out.scaleY);\r\n        out.isSimple = Math.abs(out.shear) < 1.0E-9 && (!out.rotation || Math.abs(out.scaleX - out.scaleY) < 1.0E-9);\r\n        return out;\r\n    }\r\n}, function() {\r\n    function registerName(properties, name, i) {\r\n        properties[name] = {\r\n",344910,47,"return this.elements[i",225200,32,"set: function(val",777626,33,"s[i] = val",2168288,34,"}\r\n    // Compatibility with SVGMatrix\r\n    //",376845,38,"SVGMatrix\r\n    if (Object.defineProperties) {\r\n        var properties",1797407,42,"Number} a Get x-to-x component of the matrix. Avoid using it for performance consideration.\n         * Use {@link #getXX",7550,32,"registerName(properties, 'a', 0);\r\n        // TODO: Help me finish this.\r\n        registerName(properties, 'b', 1);\r\n        registerName(properties, 'c', 2);\r\n        registerName(properties, 'd', 3);\r\n        registerName(properties, 'e', 4);\r\n        registerName(properties, 'f', 5);\r\n        Object.defineProperties(this.prototype, properties);\r\n    }\r\n    /**\n     * Postpend a matrix onto the curr",1138037,33,"given transform will come before the current one.\n     *\n     * @method\n     * @param {Ext.draw.Matrix} matrix\n     * @return {Ext.draw.Matrix} this\n     */\r\n    this.prototype.multiply = this.prototype.appendMatrix;\r\n});\r\n\r\n/**\n * A Surface is an interface to render methods inside a draw {@link Ext.draw.Component}.\n * A Surface contains methods to render sprites, get bounding boxes of sprites, add\n * sprites to the canvas, initialize other graphic components, etc. One of the most used\n * methods for this class is the `add` method, to add Sprites to the surface.\n *\n * Most of the Surface methods are abstract and they have a concrete implementation\n * in Canvas or SVG engines.\n *\n * A Surface instance can be accessed as a property of a draw component. For example:\n *\n *     drawComponent.getSurface('main').add({\n *         type: 'circle',\n *         fill: '#ffc',\n *         radius: 100,\n *         x: 100,\n *         y: 100\n *     });\n *\n * The configuration object passed in the `add` method is the same as described in the {@link Ext.draw.sprite.Sprite}\n * class document",1041899,34,"drawComponent.getSurface('main').add([\n *         {\n *             type: 'circle',\n *             radius: 10,\n *             fill: '#f00',\n *             x: 10,\n *             y: 10",1595984,43,"type: 'circle',\n *             radius: 10,\n *             fill: '#0f0',\n *             x: 50,\n *             y: 50",1595984,43,"type: 'circle',\n *             radius: 10,\n *             fill: '#00f',\n *             x: 100,\n *             y: 100",1595984,43,"type: 'rect',\n *             radius: 10,\n *             x: 10,\n *             y: 10",1595984,43,"type: 'rect',\n *             radius: 10,\n *             x: 50,\n *             y: 50",1595984,43,"type: 'rect',\n *             radius: 10,\n *             x: 100,\n *             y: 100\n *         }\n *     ]);\n *\n */\r\nExt.define('Ext.draw.Surface",1042254,46,"surface',\r\n    defaultIdPrefix: 'ext-surface-',\r\n    /**\n     * The reported device pixel density.\n     */\r\n    devicePixelRatio: window.devicePixelRatio || 1",708731,42,"Stably sort the list of sprites by their zIndex.\n         * TODO: Improve the performance. Reduce gc impact.\n         * @param {Array} list\n         */\r\n        stableSort: function(list) {\r\n            if (list.length < 2",3982,57,"var keys = {},\r\n                sortedKeys",1178563,50,", ln, zIndex",348384,37,92208,41,"zIndex = list[i].attr.zIndex;\r\n                if (!keys[zIndex]) {\r\n                    keys[zIndex] = [\r\n                        list[i]\r\n    ",1760239,36,"} else {\r\n                    keys[zIndex].push(list[i",1794896,36,"}\r\n            sortedKeys = Ext.Object.getKeys(keys)",67845,40,"return a - b",339589,32,"for (i = 0 , ln = sortedKey",285216,42,"result.push.apply(result, keys[sortedKeys[i]",1878960,32,2048396,59,"    list[i] = result[i]",1413072,41,1221776,39,"{Array}\n         * The region of the surface related to its component.\n         */\r\n        reg",1347136,36,"cfg {Object}\n         * Background sprite config of the surface.",1205218,32,913568,38,"Array}\n         * Array of sprite",1566397,33,"item",1341199,37,"Boolean}\n         * Indicates whether the surface needs redraw.\n         */\r\n        dirty: false\r\n    },\r\n    dirtyPredecessor: 0",1057216,75,"predecessors = [];\r\n        me.successors = [];\r\n        // The `pendingRenderFrame` flag is used to indicate that `predecessors` (surfaces that should render first)\r\n        // are dirty, and to call `renderFrame` when all `predecessors` have their `renderFrame` called\r\n        // (i.e. not dirty anymore).\r\n        me.pendingRenderFrame = false",571870,36,2197018,54,"me.matrix = new Ext.draw.Matrix();\r\n        me.inverseMatrix = me.matrix.inverse(me.inverseMatrix);\r\n        me.resetTransform();\r\n    },\r\n    /**\n     * Round the number to align to the pixels on device.\n     * @param {Number} num The number to align.\n     * @return {Number} The resultant alignment.\n     */\r\n    roundPixel: function(num",2232138,36,"devicePixelRatio * num) / this.devicePixelRatio;\r\n    },\r\n    /**\n     * Mark the surface to render after another surface is updated.\n     * @param {Ext.draw.Surface} surface The surface to wait for.\n     */\r\n    waitFor: function(surfac",1511760,42,"predecessors = me.predecessors;\r\n        if (!Ext.Array.contains(predecessors, surface)) {\r\n            predecessors.push(surface);\r\n            surface.successors.push(me);\r\n            if (surface._dirty) {\r\n                me.dirtyPredecessor++",1413072,41,"setDirty: function(dirty) {\r\n        if (this._dirty !== dirty) {\r\n            var successors = this.successors,\r\n                successor, i,\r\n                ln = successor",288463,67,"successor = successors[i];\r\n                if (dirty) {\r\n                    successor.dirtyPredecessor++;\r\n                    successor.setDirty(tr",540527,52,"successor.dirtyPredecessor--",1774036,34,"or.dirtyPredecessor === 0 && successor.pendingRenderFr",2172896,32,"successor.renderFrame",2055040,44,780207,35,"_dirty = dirty",714597,32,"lement: function(newElement, oldElement) {\r\n        if (oldElement) {\r\n            oldElement.set(newE",2215818,40,"oldElement = Ext.Element.create(new",2079929,35,"setDirty(true);\r\n        return oldElement;\r\n    },\r\n    applyBackground: function(background, oldBackground) {\r\n        this.setDirty(true);\r\n        if (Ext.isString(background)) {\r\n            background = {\r\n                fillStyle: background",987392,44,"Ext.factory(background, Ext.draw.sprite.Rect, oldBackground);\r\n    },\r\n    applyRegion: function(region, oldRegion) {\r\n        if (oldRegion && region[0] === oldRegion[0] && region[1] === oldRegion[1] && region[2] === oldRegion[2] && region[3] === oldRegion[3]",1125102,49,"Ext.isArray(region)",28493,43,"region[0],\r\n                region[1],\r\n                region[2],\r\n                region[3]",2149050,33,"if (Ext.isObject(region)",28493,43,"region.x || region.left,\r\n                region.y || region.top,\r\n                region.width || (region.right - region.left),\r\n                region.height || (region.bottom - region.top)",450254,33,"},\r\n    updateRegion: function(reg",1688912,44,"l = region[0],\r\n            t = region[1],\r\n            r = l + region[2],\r\n            b = t + region[3],\r\n            background = this.getBackground(",1513100,36,";\r\n        element.setBox({\r\n            top: Math.floor(t),\r\n            left: Math.floor(l),\r\n            width: Math.ceil(r - Math.floor(l)),\r\n            height: Math.ceil(b - Math.floor(t))\r\n        });\r\n        if (background) {\r\n            background.setAttributes(",2117884,46,",\r\n                width: Math.ceil(r - Math.floor(l)),\r\n                height: Math.ceil(b - Math.floor(t))",1286240,38,"me.setDirty",1349184,32,"Reset the matrix of the surface.\n     */\r\n    resetTransform: function() {\r\n        this.matrix.set(1, 0, 0, 1, 0, 0);\r\n        this.inverseMatrix.set(1, 0, 0, 1, 0, 0);\r\n        this.setDirty(true);\r\n    },",1200199,32,"c",1200235,39,1270240,36,"element.dom.appendChild(this.e",1201769,38,"**\n     * Get the sprite by id or index.\n     * It will first try to find a sprite with the given id, otherwise will try to use the id as an index.\n     * @param {String|Number} id\n     * @returns {Ext.draw.sprite.Sprite}",575996,55,"map[id] || this.items[id]",569257,32,"Sprite to the surface.\n     * You can put any number of object as parameter.\n     * See {@link Ext.draw.sprite.Sprite} for the configuration object to be passed into this method.",107901,46,"drawComponent.surface.add({\n     *         type: 'circle',\n     *         fill: '#ffc',\n     *         radius: 100,\n     *         x: 100,\n     *         ",541353,35,"/\r\n    add",1998464,52,826672,44,",\r\n            argIsArray = Ext.isArray(args[0]),\r\n",1189357,39,"sprite, sprites, items, i, ln;\r\n        items = Ext.Array.clean(argIsArray ? args[0] : args);\r\n        if (!items.length) {",64095,40,"\r\n        sprites = me.prepareItems(items);\r\n        for (i = 0 , ln = sprit",241280,39,"sprite = sprites[i];\r\n            me.map[sprite.getId()] = sprite;\r\n            results.push(sprite);\r\n            sprite.setParent(this);\r\n            me.onAdd(sprite);\r\n        }\r\n        items = me.getItems();",1061667,36,"items.push.apply(items, results);\r\n        }\r\n        me.dirtyZIndex = true;\r\n        me.setDirty(true);\r\n        if (!argIsArray && resul",268137,32,"return results[0",1380944,34,"return results",1078160,40,"otected\n     * Invoked when a sprite is added to the surface.\n     * @param {Ext.draw.sprite.Sprite} sprite The sprite to be added.\n     */\r\n    onAd",1629968,32,"Remove a given sprite from the surface, optionally destroying the sprite in the process.\n     * You can also call the sprite own `remove` method.",107901,46," drawComponent.surface.remove(sprite);\n     *      // or...\n     *      sprite.remove();\n     *\n     * @param {Ext.draw.sprite.Sprite} sprite",1068111,33,"Sprite=false]\n     */\r\n    remove: function(sprite, destroySprite) {\r\n        if (sprite) {\r\n            delete this.map[sprite.getId()];\r\n            if (destroySprite) {\r\n                sprite",1893744,32,"{\r\n                sprite.setParent(null);\r\n",137534,33,"this.getItems(), sprit",65232,32,"this.dirtyZIndex = true;\r\n            this.setDirty(",838158,42,"Remove all sprites from the surface, optionally destroying the sprites in the process.",107901,46," drawComponent.getSurface('main').removeAll();",1139775,32,"[destroySprites=false]",1892939,34,"destroySprite",1506208,34,"Items(),\r\n            i = items.length;\r\n        if (destroySprites) {\r\n            while (i > 0) {\r\n                items[--i]",342542,36,"} else {\r\n            while (i > 0) {\r\n                items[--i].setParent(null",358736,38,"items.length = 0;\r\n        this.map = {};\r\n        this.dirtyZIndex = tru",1271472,33,1395100,39,"if (this.getItems()) {\r\n            this.removeAll",1083246,35,"Ext.Array.from(this.add(items)",1694112,43,"Initialize and apply defaults to surface items.\n     */\r\n    prepare",906011,34,"items = [].concat(items);\r\n        // Make sure defaults are applied and item is initialized",2023216,42,", i, ln, j,\r\n            removeSprite = function(sprite",1463365,33,"sprite, false);\r\n            };\r\n",2062544,68,1395631,34,"!(item instanceof Ext.draw.sprite.Sprite)) {\r\n                // Temporary, just take in configs...",1085976,33," = me.createItem",1079664,32,"    item.on('beforedestroy', removeSprite",571984,34,1330365,39," Creates an item and appends it to the surface. Called\n     * as an internal method when calling `add`.\n     */",2006812,50,"sprite = Ext.create(config.xclass || 'sprite",343034,36,"return sprite",575776,32," the minimal bounding box that contains all the sprites bounding boxes in the given list of sprites.\n     * @param {Ext.draw.sprite.Sprite[]|Ext.draw.sprite.Sprite} sprites\n     * @param {Boolean} [isWithoutTransform=false]\n     * @returns {{x: Number, y: Number, width: number, height: number}}\n     */\r\n    getBBox: function(sprites, isWithoutTransform) {\r\n        var sprites = Ext.Array.from(sprites),\r\n            left = Infinity,\r\n            right = -Infinity,\r\n            top = Infinity,\r\n            bottom = -Infinity,\r\n            sprite, bbox,",243990,35,"sprit",241280,39,"sprite = sprites[i];\r\n            bbox = sprite.getBBox(isWithoutTransform);\r\n            if (left > bbox.x) {\r\n                left = bbox.",721232,35,"right < bbox.x + bbox.width) {\r\n                right = bbox.x + bbox.width",408144,35,"op > bbox.y) {\r\n                top = bbox.y",1776,34,"bottom < bbox.y + bbox.height) {\r\n                bottom = bbox.y + bbox.height",515600,44,"{\r\n",1103309,34,"y: top,\r\n            width: right - left,\r\n            height: bottom - top",112224,37,"Empty the surface content (without touching the sprites.)\n     */\r\n    clear",1073801,47,"Order the items by their z-index if any of that has been changed since last sort.\n     */\r\n    orderByZIndex",1998464,53,1497373,35,"dirtyZIndex = false",493341,35,"me.getDirty()) {",1401680,32,"i",1403264,45,"if (items[i].attr.dirtyZIndex) {\r\n                    dirtyZIndex = true",650072,47,1759424,34,"dirtyZIndex) {\r\n                // sort by zIndex\r\n                Ext.draw.Surface.stableSort(items);\r\n                this.setDirty(tr",65231,33,831053,60,"    items[i].attr.dirtyZIndex",1165456,35,"\r\n    },\r\n    /**\n     * Force the element to redraw.",478619,49,"me = this;\r\n        me.repaint = Ext.emptyFn",478735,48,"delete me.repaint;\r\n            me.element.repaint();\r\n        }, 1);\r\n    },\r\n    /**\n     * Triggers the re-rendering of the canvas.\n     */\r\n    renderFrame",2134846,34,727676,52,"if (this.dirtyPredecessor > 0) {\r\n            this.pendingRenderFrame = true;",1102304,42,"var me = this,\r\n            region = this.getRegion(),\r\n            background = me.getBackground(",1497356,56,", i, ln;\r\n        // Cannot render before the surface is placed.\r\n        if (!region",1125102,45,"// This will also check the dirty flags of the sprites.\r\n        me.orderByZIndex();\r\n        if (me.getDirty()) {\r\n            me.clear();\r\n            me.clearTransform();\r\n            if (background) {\r\n                me.renderSprite(backgroun",120688,32,831053,60,1455904,34,"    if (false === me.renderSprite",62654,33,291167,42,"item.attr.textPositionCount = me.text",1036043,34,"    me.setDirty",2183275,60,"Renders a single sprite into the surface.\n     * Do not call it from outside `renderFrame` method.\n     *\n     * @param {Ext.draw.sprite.Sprite} sprite The Sprite to be rendered.\n     * @return {Boolean} returns `false` to stop the rendering to continue.\n     */\r\n    renderSpri",1629456,33,"@private\n     * Clears the current transformation state on the surface.\n     */\r\n    clearTransform: Ext.emptyFn,\r\n    /**\n     * Returns 'true' if the surface is dirty.",1236443,36,"the surface is dirty\n     */\r\n    get",1261085,36,"this._dirty",1814933,39,"surface. This is done by removing all components from it and\n     * also removing its reference to a DOM element.",107901,46," drawComponent.surface.destroy();",1643488,45,"var me = this;\r\n",1061852,33,"me.setBackground(null);\r\n        me.predecessors = null;\r\n        me.successors = null",1089319,36,");\r\n\r\n/**\n * @class Ext.draw.engine.SvgContext\n *\n * A class that imitates a canvas context but generates svg elements instead.\n */\r\nExt.define('Ext.draw.engine.SvgContext', {",915664,33,"Properties to be saved/restored in `save` and `restore` method.\n     */\r\n    toSave: [\r\n        \"strokeOpacity\",\r\n        \"strokeStyle\",\r\n        \"fillOpacity\",\r\n        \"fillStyle\",\r\n        \"globalAlpha\",\r\n        \"lineWidth\",\r\n        \"lineCap\",\r\n        \"lineJoin\",\r\n        \"lineDash\",\r\n        \"lineDashOffset\",\r\n        \"miterLimit\",\r\n        \"shadowOffsetX\",\r\n        \"shadowOffsetY\",\r\n        \"shadowBlur\",\r\n        \"shadowColor\",\r\n        \"globalCompositeOperation\",\r\n        \"position\"\r\n    ],\r\n    \"strokeOpacity\": 1,\r\n    \"strokeStyle\": \"none\",\r\n    \"fillOpacity\": 1,\r\n    \"fillStyle\": \"none\",\r\n    \"lineDash\": [],\r\n    \"lineDashOffset\": 0,\r\n    \"globalAlpha\": 1,\r\n    \"lineWidth\": 1,\r\n    \"lineCap\": \"butt\",\r\n    \"lineJoin\": \"miter\",\r\n    \"miterLimit\": 10,\r\n    \"shadowOffsetX\": 0,\r\n    \"shadowOffsetY\": 0,\r\n    \"shadowBlur\": 0,\r\n    \"shadowColor\": \"none\",\r\n    \"globalCompositeOperation\": \"src\",\r\n    urlStringRe: /^url\\(#([\\w\\-]+)\\)$/,\r\n    constructor: function(SvgSurface) {\r\n        this.surface = SvgSurface;\r\n        this.status = [];\r\n        this.matrix = new Ext.draw.Matrix();\r\n        this.path = null;\r\n        this.clear();",1164522,36,"context",498889,49,"group = this.surface.mainGroup;\r\n        this.position = 0;\r\n        this.path =",1288637,46," @param {String} tag\n     * @return {*}\n     */\r\n    getElement: function(tag) {\r\n        return this.surface.getSvgElement(this.group, tag, this.position++",1694112,42,"\n     * Destroys the DOM element and all associated gradients.\n     *\n     * @param element {HTMLElement|Ext.dom.Element|String} DOM element.",500350,38,"e",828198,33,"Ext.fly(element),\r\n            fill, stroke, fillMatch, strokeMatch, gradients, gradient, key;\r\n",2151632,37,1484240,32,"element.dom.tagName === 'g') {\r\n            gradients = element.dom.gradients;\r\n            for (key in gradients) {\r\n                gradients[key]",342542,36,"} else {\r\n            fill = element.getAttribute('fill');\r\n            stroke = element.getAttribute('stroke');\r\n            fillMatch = fill && fill.match(this.urlStringRe);\r\n            strokeMatch = stroke && stroke.match(this.urlStringRe);\r\n            if (fillMatch && fillMatch[1]) {\r\n                gradient = Ext.fly(fillMatch[1]);\r\n                if (gradient) {\r\n                    gradi",1206508,32,1759424,34,"strokeMatch && strokeMatch[1]) {\r\n                gradient = Ext.fly(strokeMatch[1]);\r\n                if (gradient) {\r\n                    gradi",1206508,32,2169392,33,"    element.destroy();\r\n    },\r\n    /**\n     * Pushes the context state to the state stack.\n     */\r\n    save: function() {\r\n        var toSave = this.toSave,\r\n            obj = {},\r\n            group = this.getElement('g'),\r\n            key, i;\r\n        for (i = 0; i < toSave.length; i++) {\r\n            key = toSave[i];\r\n            if (key in this) {\r\n                obj[key] = this[key",925647,38,"this.position = 0;\r\n        obj.matrix = this.matrix.clone();\r\n        this.status.push(obj);\r\n        this.group = group;\r\n        return group;\r\n    },\r\n    /**\n     * Pops the state stack and restores the state.\n     */\r\n    restore: function() {\r\n        var toSave = this.toSave,\r\n            obj = this.status.pop(),\r\n            children = this.group.dom.childNodes,\r\n            key, i;\r\n        // Removing extra DOM elements that were not reused.\r\n",440875,33,"this.position) {\r\n            this.removeElement(children[children.length - 1]",458960,33,"; i < toSave.length; i++) {\r\n            key = toSave[i];\r\n            if (key in obj) {\r\n                this[key] = obj[key",1801743,42,"delete this[key",925647,38,"this.setTransform.apply(this, obj.matrix.elements);\r\n        this.group = this.group.get",2045549,34,"Changes the transformation matrix to apply the matrix given by the arguments as",542474,33,"Number} xx\n     * @param {Number} yx\n     * @param {Number} xy\n     * @param {Number} yy\n     * @param {Number} dx\n     * @param {Number} dy\n     */\r\n    transform: function(xx, yx, xy, yy, dx, dy) {\r\n        if (this.path) {\r\n            var inv = Ext.draw.Matrix.fly([\r\n                    xx,\r\n                    yx,\r\n                    xy,\r\n                    yy,\r\n                    dx,\r\n                    dy\r\n                ]).inverse();\r\n            this.path.transform(inv);\r\n        }\r\n        this.matrix.append(xx, yx, xy, yy, dx, dy)",1057822,38,"transformation matrix to the matrix given by the arguments as",542474,33,"Number} xx\n     * @param {Number} yx\n     * @param {Number} xy\n     * @param {Number} yy\n     * @param {Number} dx\n     * @param {Number} dy\n     */\r\n    setTransform: function(xx, yx, xy, yy, dx, dy) {\r\n        if (this.path) {\r\n            this.path.transform(this.matrix);\r\n        }\r\n        this.matrix.reset();\r\n        this.transform(xx, yx, xy, yy, dx, dy);\r\n    },\r\n    /**\n     * Scales the current context by the specified horizontal (x) and vertical (y) factors.\n     * @param {Number} x The horizontal scaling factor, where 1 equals unity or 100% scale.\n     * @param {Number} y The vertical scaling factor.\n     */\r\n    scal",1094184,34,"transform(x, 0, 0, y, 0, 0);\r\n    },\r\n    /**\n     * Rotates the current context coordinates (that is, a transformation matrix).\n     * @param {Number} angle The rotation angle, in radians.\n     */\r\n    rotate: function(angle) {\r\n        var xx = Math.cos(angle),\r\n            yx = Math.sin(angle),\r\n            xy = -Math.sin(angle),\r\n            yy = Math.cos(angle);\r\n        this.transform(xx, yx, xy, yy, 0, 0);\r\n    },\r\n    /**\n     * Specifies values to move the origin point in a canvas.\n     * @param {Number} x The value to add to horizontal (or x) coordinate",991308,32,"value to add to vertical (or y) coordinates.",1094162,56,"transform(1, 0, 0, 1, x, y);\r\n    },\r\n    setGradientBBox: function(bbox) {\r\n        this.bbox = bbox",1260314,37,"current default path.\n     */\r\n    beginPath: function() {\r\n        this.path = new Ext.draw.Path(",403248,35,"a new subpath with the given point.\n     * @param {Number} x\n     * @param {Number} y\n     */\r\n    moveTo",1091212,32,"!this.path) {\r\n            this.beginPath();\r\n        }\r\n        this.path.moveTo(x, y);\r\n        this.path.element = null",1286334,35,"given point to the current subpath, connected to the previous one by a straight line.\n     * @param {Number} x\n     * @param {Number} y\n     */\r\n    lineTo",1091212,32,"!this.path) {\r\n            this.beginPath();\r\n        }\r\n        this.path.lineTo(x, y);\r\n        this.path.element = null",1452784,32," new closed subpath to the path, representing the given rectangle.\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} width\n     * @param {Number} height\n     */\r\n    rect: function(x, y, width, height) {\r\n        this.moveTo(x, y);\r\n        this.lineTo(x + width, y);\r\n        this.lineTo(x + width, y + height);\r\n        this.lineTo(x, y + height);\r\n        this.closePath();\r\n    },\r\n    /**\n     * Paints the box that outlines the given rectangle onto the canvas, using the current stroke style.\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} width\n     * @param {Number} height\n     */\r\n    strokeRect: function(x, y, width, height) {\r\n        this.beginPath();\r\n        this.rect(x, y, width, height);\r\n        this.stroke();\r\n    },\r\n    /**\n     * Paints the given rectangle onto the canvas, using the current fill style.\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} width\n     * @param {Number} height\n     */\r\n    fillRect: function(x, y, width, height) {\r\n        this.beginPath();\r\n        this.rect(x, y, width, height);\r\n        this.fill()",1559087,36,"current subpath as closed, and starts a new subpath with a point the same as the start and end of the newly closed subpath.\n     */\r\n    closePath",2134846,34,"path) {\r\n            this.beginPath();\r\n        }\r\n        this.path.closePath();\r\n        this.path.element = null;\r\n    },\r\n    /**\n     * Arc command using svg parameters.\n     * @param {Number} r1\n     * @param {Number} r2\n     * @param {Number} rotation\n     * @param {Number} large\n     * @param {Number} swipe\n     * @param {Number} x2\n     * @param {Number} y2\n     */\r\n    arcSvg: function(r1, r2, rotation, large, swipe, x2, y2) {\r\n        if (!this.path) {\r\n            this.beginPath();\r\n        }\r\n        this.path.arcSvg(r1, r2, rotation, large, swipe, x2, y2);\r\n        this.path.element = null;\r\n    },\r\n    /**\n     * Adds points to the subpath such that the arc described by the circumference of the circle described by the arguments, starting at the given start angle and ending at the given end angle, going in the given direction (defaulting to clockwise), is added to the path, connected to the previous point by a straight line.\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} radius\n     * @param {Number} startAngle\n     * @param {Number} endAngle\n     * @param {Number} anticlockwise\n     */\r\n    arc: function(x, y, radius, startAngle, endAngle, anticlockwise) {\r\n        if (!this.path) {\r\n            this.beginPath();\r\n        }\r\n        this.path.arc(x, y, radius, startAngle, endAngle, anticlockwise);\r\n        this.path.element = null;\r\n    },\r\n    /**\n     * Adds points to the subpath such that the arc described by the circumference of the ellipse described by the arguments, starting at the given start angle and ending at the given end angle, going in the given direction (defaulting to clockwise), is added to the path, connected to the previous point by a straight line.\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} radiusX\n     * @param {Number} radiusY\n     * @param {Number} rotation\n     * @param {Number} startAngle\n     * @param {Number} endAngle\n     * @param {Number} anticlockwise\n     */\r\n    ellipse: function(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\r\n        if (!this.path) {\r\n            this.beginPath();\r\n        }\r\n        this.path.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\r\n        this.path.element = null",1452784,32,"n arc with the given control points and radius to the current subpath, connected to the previous point by a straight line.\n     * If two radii are provided, the first controls the width of the arc's ellipse, and the second controls the height. If only one is provided, or if they are the same, the arc is from a circle.\n     * In the case of an ellipse, the rotation argument controls the clockwise inclination of the ellipse relative to",1094065,36,"x1\n     * @param {Number} y1\n     * @param {Number} x2\n     * @param {Number} y2\n     * @param {Number} radiusX\n     * @param {Number} radiusY\n     * @param {Number} rotation\n     */\r\n    arcTo: function(x1, y1, x2, y2, radiusX, radiusY, rotation) {\r\n        if (!this.path) {\r\n            this.beginPath();\r\n        }\r\n        this.path.arcTo(x1, y1, x2, y2, radiusX, radiusY, rotation);\r\n        this.path.element = null",1286334,35,"given point to the current subpath, connected to the previous one by a cubic B\ufffff\ufffffzier curve with the given control points.\n     * @param {Number} x1\n     * @param {Number} y1\n     * @param {Number} x2\n     * @param {Number} y2\n     * @param {Number} x3\n     * @param {Number} y3\n     */\r\n    bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {\r\n        if (!this.path) {\r\n            this.beginPath();\r\n        }\r\n        this.path.bezierCurveTo(x1, y1, x2, y2, x3, y3);\r\n        this.path.element =",1154068,32,"trokes the given text at the given position. If a maximum width is provided, the text will be scaled to fit that width if necessary",674779,38,"param {Number} x\n     * @param {Number} y\n     */\r\n    strokeText: function(text, x, y) {\r\n        text = String(text);\r\n        if (this.strokeStyle",377611,39,"Element('text'),\r\n                tspan = this.surface.getSvgElement(element, 'tspan', 0);\r\n            this.surface.setElementAttributes(element, {\r\n                \"x\": x,\r\n                \"y\": y,\r\n                \"transform\": this.matrix.toSvg(),\r\n                \"stroke\": this.strokeStyle,\r\n                \"fill\": \"none\",\r\n                \"opacity\": this.globalAlpha,\r\n                \"stroke-opacity\": this.strokeOpacity,\r\n                \"style\": \"font: \" + this.font",348928,35,"this.lineDash.length) {\r\n                this.surface.setElementAttributes(element, {\r\n                    \"stroke-dasharray\": this.lineDash.join(','),\r\n                    \"stroke-dashoffset\": this.lineDashOffset",45390,35,"}\r\n            if (tspan.dom",400853,32,"tspan.dom.removeChild(tspan.",440959,50,"surface.setElementAttributes(tspan, {\r\n                \"alignment-baseline\": \"middle\",\r\n                \"baseline-shift\": \"-50%\"",2217455,32,"span",325558,37,"Ext.String.htmlDecode(text)",1331648,39,"Fills the given text at the given position. If a maximum width is provided, the text will be scaled to fit that width if necessary",674779,38,"param {Number} x\n     * @param {Number} y\n     */\r\n    fillText: function(text, x, y) {\r\n        text = String(text);\r\n        if (this.fillStyle",377611,39,"Element('text'),\r\n                tspan = this.surface.getSvgElement(element, 'tspan', 0);\r\n            this.surface.setElementAttributes(element, {\r\n                \"x\": x,\r\n                \"y\": y,\r\n                \"transform\": this.matrix.toSvg(),\r\n                \"fill\": this.fillStyle,\r\n                \"opacity\": this.globalAlpha,\r\n                \"fill-opacity\": this.fillOpacity,\r\n                \"style\": \"font: \" + this.font",348928,35,"tspan.dom",400853,32,"tspan.dom.removeChild(tspan.",440959,50,"surface.setElementAttributes(tspan, {\r\n                \"alignment-baseline\": \"middle\",\r\n                \"baseline-shift\": \"-50%\"",2217455,32,"span",325558,37,"Ext.String.htmlDecode(text)",1331648,39,"Draws the given image onto the canvas.\n     * If the first argument isn't an img, canvas, or video element, throws a TypeMismatchError exception. If the image has no image data, throws an InvalidStateError exception. If the one of the source rectangle dimensions is zero, throws an IndexSizeError exception. If the image isn't yet fully decoded, then nothing is drawn.\n     * @param {HTMLElement} image\n     * @param {Number} sx\n     * @param {Number} sy\n     * @param {Number} sw\n     * @param {Number} sh\n     * @param {Number} dx\n     * @param {Number} dy\n     * @param {Number} dw\n     * @param {Number} dh\n     */\r\n    drawImage: function(image, sx, sy, sw, sh, dx, dy, dw, d",1925343,42,"element = me.getElement('image'),\r\n            x = sx,\r\n            y = sy,\r\n            width = typeof sw === 'undefined' ? image.width : sw,\r\n            height = typeof sh === 'undefined' ? image.height : sh,\r\n            viewBox = null;\r\n        if (typeof dh !",355519,32,"iewBox = sx + \" \" + sy + \" \" + sw + \" \" + sh;\r\n            x = dx;\r\n            y = dy;\r\n            width = dw;\r\n            height = dh;\r\n        }\r\n        element.dom.setAttributeNS(\"http:/\" + \"/www.w3.org/1999/xlink\", \"href\", image.src);\r\n        me.surface.setElementAttributes(element, {\r\n            viewBox: viewBox,",986030,37,",\r\n",450444,39,"height: height,\r\n            opacity: me.globalAlpha,\r\n            transform: me.matrix.toSvg()",42158,38,"Fills the subpaths of the current default path or the given path with the current fill style.\n     */\r\n    fill",2134846,34,"path",1125102,50,"his.fillStyle) {\r\n            var path,\r\n                fillGradient = this.fillGradient,\r\n                bbox = this.bbox",815882,34,"path.element",414047,48,"path = this.path.toString();",815883,33,"path.element = this.getElement('path');\r\n                this.surface.setElementAttributes(element, {\r\n                    \"d\": path,\r\n                    \"transform\": this.matrix.toSvg()",45390,35,"}\r\n            this.surface.setElementAttributes(element, {\r\n                \"fill\": fillGradient && bbox ? fillGradient.generateGradient(this, bbox) : this.fillStyle,\r\n                \"fill-opacity\": this.fillOpacity * this.globalAlpha",1286240,34,"},\r\n    /**\n     * Strokes the subpaths of the current default path or the given path with the current stroke style.\n     */\r\n    stroke",2134846,34,"path",1125102,50,"his.strokeStyle) {\r\n            var path,\r\n                strokeGradient = this.strokeGradient,\r\n                bbox = this.bbox",815882,34,"path.element;\r\n            if (!element || !this.path.svgString) {\r\n                path = this.path.toString();",815883,33,"path.element = this.getElement('path');\r\n                this.surface.setElementAttributes(element, {\r\n                    \"fill\": \"none\",\r\n                    \"d\": path,\r\n                    \"transform\": this.matrix.toSvg()",45390,35,"}\r\n            this.surface.setElementAttributes(element, {\r\n                \"stroke\": strokeGradient && bbox ? strokeGradient.generateGradient(this, bbox) : this.strokeStyle,\r\n                \"stroke-linecap\": this.lineCap,\r\n                \"stroke-linejoin\": this.lineJoin,\r\n                \"stroke-width\": this.lineWidth,\r\n                \"stroke-opacity\": this.strokeOpacity * this.globalAlpha",348928,35,"this.lineDash.length) {\r\n                this.surface.setElementAttributes(element, {\r\n                    \"stroke-dasharray\": this.lineDash.join(','),\r\n                    \"stroke-dashoffset\": this.lineDashOffset",45390,35,923280,37,"@protected\n     *\n     * Note: After the method guarantees the transform matrix will be inverted.\n     * @param {Object} attr The attribute",1698289,32,"[transformFillStroke] Indicate whether to transform fill and stroke. If this is not\n     *      given, then uses `attr.transformFillStroke` instead.\n     */\r\n    fillStroke: function(attr, transformFillStroke) {\r\n        var ctx = this,\r\n            fillStyle = ctx.fillStyle,\r\n            strokeStyle = ctx.strokeStyle,\r\n            fillOpacity = ctx.fillOpacity,\r\n            strokeOpacity = ctx.strokeOpacity;\r\n        if (transformFillStrok",4047,32,"transformFillStroke = attr.transformFillStroke;\r\n        }\r\n        if (!transformFillStroke) {\r\n            attr.inverseMatrix.toContext(ctx);\r\n        }\r\n        if (fillStyle && fillOpacity !== 0) {\r\n            ctx.fill();\r\n        }\r\n        if (strokeStyle && strokeOpacity !== 0) {\r\n            ctx.strok",2034730,32,"endPath: function(path) {\r\n        this.path = path.clone(",422256,35,"an object that represents a linear gradient that paints along the line given by the coordinates represented by the arguments.\n     * @param {Number} x0\n     * @param {Number} y0\n     * @param {Number} x1\n     * @param {Number} y1\n     * @return {Ext.draw.engine.SvgContext.Gradient}\n     */\r\n    createLinearGradient: function(x0, y0, x1, y1",449776,41,"element = me.surface.getNextDef('linearGradient'),\r\n            gradients = me.group.dom.gradients || (me.group.dom.gradients = {}),\r\n            gradient;\r\n        me.surface.setElementAttributes(element, {\r\n            \"x1\": x0,\r\n            \"y1\": y0,\r\n            \"x2\": x1,\r\n            \"y2\": y1,\r\n            \"gradientUnits\": \"userSpaceOnUse\"\r\n        });\r\n        gradient = new Ext.draw.engine.SvgContext.Gradient(me,me.surface,element);\r\n        gradients[element.dom.id] = gradient;\r\n        return gradient",1469056,36,"CanvasGradient object that represents a radial gradient that paints along the cone given by the circles represented by the arguments.\n     * If either of the radii are negative, throws an IndexSizeError exception.\n     * @param {Number} x0\n     * @param {Number} y0\n     * @param {Number} r0\n     * @param {Number} x1\n     * @param {Number} y1\n     * @param {Number} r1\n     * @return {Ext.draw.engine.SvgContext.Gradient}\n     */\r\n    createRadialGradient: function(x0, y0, r0, x1, y1, r1",449776,41,"element = me.surface.getNextDef('radialGradient'),\r\n            gradients = me.group.dom.gradients || (me.group.dom.gradients = {}),\r\n            gradient;\r\n        me.surface.setElementAttributes(element, {\r\n            \"fx\": x0,\r\n            \"fy\": y0,\r\n            \"cx\": x1,\r\n            \"cy\": y1,\r\n            \"r\": r1,\r\n            \"gradientUnits\": \"userSpaceOnUse\"\r\n        });\r\n        gradient = new Ext.draw.engine.SvgContext.Gradient(me,me.surface,element,r0 / r1);\r\n        gradients[element.dom.id] = gradient;\r\n        return gradient;\r\n    }\r\n});\r\n/**\n * @class Ext.draw.engine.SvgContext.Gradient\n */\r\nExt.define(\"Ext.draw.engine.SvgContext.Gradient\", {\r\n    statics: {\r\n        map: {}",528768,37,"tx, surface, element, compression) {\r\n        var map = this.statics().map,\r\n            oldInstance;\r\n        // Because of the way Ext.draw.engine.Svg.getNextDef works,\r\n        // there is no guarantee that an existing DOM element from the 'defs' section won't be used\r\n        // for the 'element' param.\r\n        oldInstance = map[element.dom.id];\r\n        if (oldInstance) {\r\n            oldInstance.element = null;\r\n        }\r\n        map[element.dom.id] = this;\r\n        this.ctx = ctx;\r\n        this.surface = surface;\r\n        this.element = element;\r\n        this.position = 0;\r\n        this.compression = compression || 0",1452784,32," color stop with the given color to the gradient at the given offset. 0.0 is the offset at one end of the gradient, 1.0 is the offset at the other end.\n     * @param {Number} offset\n     * @param {String} color\n     */\r\n    addColorStop: function(offset, color) {\r\n        var stop = this.surface.getSvgElement(this.element, 'stop', this.position++),\r\n            compression = this.compression;\r\n        this.surface.setElementAttributes(stop, {\r\n            \"offset\": (((1 - compression) * offset + compression) * 100).toFixed(2) + '%',\r\n            \"stop-color\": color,\r\n            \"stop-opacity\": Ext.draw.Color.fly(color).a.toFixed(15)\r\n        });\r\n    },",1092336,38,"var children = this.element.dom.childNodes;\r\n        // Removing surplus stops in case existing gradient element with more stops was reused.\r\n",440875,33,"this.position) {\r\n            Ext.fly(children[children.length - 1]",1514780,33,"return 'url(#' + this.element.getId() + ')'",1971328,46,"var map = this.statics().map,\r\n",1022704,45,"if (element) {\r\n            delete map[element.dom.id];\r\n            element",1394749,32,835471,39," @class Ext.draw.engine.Svg\n * @extends Ext.draw.Surface\n *\n * SVG engine.\n */\r\nExt.define('Ext.draw.engine.Svg', {\r\n    extend: Ext.draw.Surface,\r\n    statics: {\r\n        BBoxTextCache: {",514318,34,"/**\n         * Nothing needs to be done in high precision mode.\n         */\r\n        highPrecision: false",1100448,111,"style: {\r\n                position: 'absolut",313812,32,2088688,64,1211328,32,"    style: {",1012978,33,2258767,33,2262366,41,"position: 'relative",312352,47,2090799,68,"tag: 'svg",1256528,32,"reference: 'svgElement",1256528,32,"namespace: \"http://www.w3.org/2000/svg",627888,32,"version: 1.1,\r\n",1212131,33,"'x-surface'",103823,49,"]",62704,33,2088970,68,"var me = this;\r\n        me",2197017,55,"me.mainGroup = me.createSvgNode(\"g\");\r\n        me.defElement = me.createSvgNode(\"defs\");\r\n        // me.svgElement is assigned in element creation of Ext.Component.\r\n        me.svgElement.appendChild(me.mainGroup);\r\n        me.svgElement.appendChild(me.defElement);\r\n        me.ctx = new Ext.draw.engine.SvgContext(me",403248,35,"a DOM element under the SVG namespace of the given type",1949738,42,"the SVG DOM element.\n     * @return {*} The created element.\n     */\r\n    createSvgNod",1669918,33,"node = document.createElementNS(\"http://www.w3.org/2000/svg\", type);\r\n        return",486041,40,"@private\n     * Returns the SVG DOM element at the given position. If it does not already exist or is a different element tag\n     * it will be created and inserted into the DOM",495102,34,"group The pa",496784,33,"String} tag The SVG element tag.\n     * @param {Number} position The position of the element in the DOM",435152,35,"The SVG element.\n     */\r\n    getSvgElement: function(group, tag, position",726973,35,"if (group.dom.childNodes.length > position) {\r\n            element = group.dom.childNodes[position];\r\n            if (element.tagName === tag",126783,32,"get(element",395584,42,"Ext.destroy",413406,35,"}\r\n        element = Ext.get(this.createSvgNode(tag));\r\n        if (position === 0) {\r\n            group.insertFirst(",2215817,41,"element.insertAfter(Ext.fly(group.dom.childNodes[position - 1]));\r\n        }\r\n        element.cache = {};\r\n        return elem",1121501,44," Applies attributes to the given element",495102,34,"element The DOM element to be applied",420833,40,"attributes to apply to the element.\n     */\r\n    setElementAttributes: function(element, attributes) {\r\n        var",829605,33,"cache = element.cache",560222,37,408662,40,408748,39,"if (cache[n",1800110,35,"cache",540592,33,"dom",408960,41,923280,37,"@private\n     * Gets the next reference element under the SVG 'defs' tag.\n     * @param {String} tagName The type of reference e",488368,39,"} The reference element.\n     */\r\n    getNextDef: function(tag",549965,32,"SvgElement(this.defElement, tagName, this.defPosition++);\r\n    },\r\n    /**\n     * @inheritdoc\n     */\r\n    clearTransform",1998464,37,";\r\n        me.mainGroup.set({\r\n            transform: me.matrix.toSvg()",42158,38,"@inheritdoc",498890,48,"ctx.clear();\r\n        this.defPosition = 0;\r\n    },\r\n    /**\n     * @inheritdoc\n     */\r\n    renderSprite: function(sprit",1511760,42,"region = me.getRegion(),\r\n            ctx = me.ctx;\r\n        if (sprite.attr.hidden || sprite.attr.opacity === 0) {\r\n            ctx.save();\r\n            ctx.restore",1547760,35,"\r\n        try {\r\n            sprite.element = ctx.save();\r\n            sprite.preRender(this);\r\n            sprite.useAttributes(ctx, region);\r\n            if (false === sprite.render(this, ctx,",450047,41,",\r\n                region[2],\r\n                region[3]\r\n            ])",44078,63,"sprite.setDirty(false);\r\n        } finally {\r\n            ctx.restore",1120224,39,"Destroys the Canvas element and prepares it for Garbage Collection.",1643488,32,"path, matrix, band",1259280,41,"tx.destroy();\r\n        me.mainGroup.destroy();\r\n        delete me.mainGroup;\r\n        delete me.ctx;\r\n        me",1083488,36,"remove: function(sprite, destroySprite) {\r\n        if (sprite && sprite.element) {\r\n            //if sprite has an associated svg element remove it from the surface\r\n            if (this.ctx) {\r\n                this.ctx.removeElement(sprite.element",395584,42,"sprite.element",342542,40,"sprite.element",719736,44,1037568,34,"Provides specific methods to draw with 2D Canvas element.\n */\r\nExt.define('Ext.draw.engine.Canvas', {\r\n    extend: Ext.draw.Surface",870640,56,"highPrecision\n         * True to have the canvas use JavaScript Number instead of single precision floating point for transforms",232448,37,"when using huge data to plot line series, the transform matrix of the canvas will have\n         * a big element. Due to the implementation of SVGMatrix, the elements are restored by 32-bits floats, which\n         * will work incorrectly. To compensate that, we enable the canvas context to perform all the transform by\n         * JavaScript. Do not use it if you are not encountering 32-bits floating point errors problem since it will\n         * have a performance penalty.\n         */\r\n        highPrecision: fals",1132302,35,"contextOverrides: {",265792,34,"ignore\n             */\r\n            setGradientBBox: function(bbox) {\r\n                this.bbox = bbox",101616,40,"        * Fills the subpaths of the current default path or the given path with the current fill style.\n             * @ignore\n             */\r\n            fill",2235168,32,"var fillStyle = this.fillStyle,\r\n                    fillGradient = this.fillGradient,\r\n                    fillOpacity = this.fillOpacity,\r\n                    rgba = 'rgba(0, 0, 0, 0)',\r\n                    rgba0 = 'rgba(0, 0, 0, 0.0)',\r\n                    bbox = this.bbox,\r\n                    alpha = this.globalAlpha;\r\n                if (fillStyle !== rgba && fillStyle !== rgba0 && fillOpacity !== 0",1434533,32,"lGradient && bbox",135133,33,".fillStyle = fillGradient.generateGradient(this, bbox",160448,47,"if (fillOpacity !",73372,33,"this.globalAlpha = alpha * fillOpacity",325008,46,"this.$fill();\r\n                    if (fillOpacity !",73372,33,"this.globalAlpha = alpha",325008,46,"if (fillGradient && bbox",135133,33,".fillStyle = fillStyl",511264,44,226272,43,"    * Strokes the subpaths of the current default path or the given path with the current stroke style.\n             * @ignore\n             */\r\n            stroke",2235168,32,"var strokeStyle = this.strokeStyle,\r\n                    strokeGradient = this.strokeGradient,\r\n                    strokeOpacity = this.strokeOpacity,\r\n                    rgba = 'rgba(0, 0, 0, 0)',\r\n                    rgba0 = 'rgba(0, 0, 0, 0.0)',\r\n                    bbox = this.bbox,\r\n                    alpha = this.globalAlpha;\r\n                if (strokeStyle !== rgba && strokeStyle !== rgba0 && strokeOpacity !== 0) {\r\n                    if (strokeGradient && bbox",135133,33,".strokeStyle = strokeGradient.generateGradient(this, bbox",160448,47,"if (strokeOpacity !",73372,33,"this.globalAlpha = alpha * strokeOpacity",325008,46,"this.$stroke();\r\n                    if (strokeOpacity !",73372,33,"this.globalAlpha = alpha",325008,46,"if (strokeGradient && bbox",135133,33,".strokeStyle = strokeStyl",511264,44,226272,43,"    * @ignore\n             */\r\n            fillStroke: function(attr, transformFillStroke) {\r\n                var ctx = this,\r\n                    fillStyle = this.fillStyle,\r\n                    fillOpacity = this.fillOpacity,\r\n                    strokeStyle = this.strokeStyle,\r\n                    strokeOpacity = this.strokeOpacity,\r\n                    shadowColor = ctx.shadowColor,\r\n                    shadowBlur = ctx.shadowBlur,\r\n                    rgba = 'rgba(0, 0, 0, 0)',\r\n                    rgba0 = 'rgba(0, 0, 0, 0.0)';\r\n                if (transformFillStrok",4047,36,"    transformFillStroke = attr.transformFillStrok",2071088,39,"if (!transformFillStroke) {\r\n                    attr.inverseMatrix.toContext(ctx",87936,39,"if (fillStyle !== rgba && fillStyle !== rgba0 && fillOpacity !== 0) {\r\n                    ctx.fill();\r\n                    ctx.shadowColor = 'rgba(0,0,0,0)';\r\n                    ctx.shadowBlur",2017968,42,"if (strokeStyle !== rgba && strokeStyle !== rgba0 && strokeOpacity !== 0) {\r\n                    ctx.stroke",1791840,36,"    ctx.shadowColor = shadowColor;\r\n                ctx.shadowBlur = shadowBlur",101616,40,"        * Adds points to the subpath such that the arc described by the circumference of the\n             * ellipse described by the arguments, starting at the given start angle and ending at\n             * the given end angle, going in the given direction (defaulting to clockwise), is added\n             * to the path, connected to the previous point by a straight line.\n             * @ignore\n             */\r\n            ellipse: function(cx, cy, rx, ry, rotation, start, end, anticlockwise) {\r\n                var cos = Math.cos(rotation),\r\n                    sin = Math.sin(rotation);\r\n                this.transform(cos * rx, sin * rx, -sin * ry, cos * ry, cx, cy);\r\n                this.arc(0, 0, 1, start, end, anticlockwise);\r\n                this.transform(cos / rx, -sin / ry, sin / rx, cos / ry, -(cos * cx + sin * cy) / rx, (sin * cx - cos * cy) / ry",20752,32,"/**\n             * Uses the given path commands to begin a new path on the canvas.\n             * @ignore\n             */\r\n            appendPath: function(path) {\r\n    ",116158,44,607803,32,"j = 0,\r\n                    types = path.types,\r\n                    coords = path.coords,\r\n                    ln = path.types.length;\r\n                me.beginPath()",98586,62,"switch (types",69342,32,"case \"M\":",148911,32,".moveTo(coords[j], coords[j + 1]",194880,32,"j += 2;\r\n    ",68541,52,"    case \"L\":",148911,32,".lineTo(coords[j], coords[j + 1]",194880,32,"j += 2;\r\n    ",68541,52,"    case \"C\":",148911,32,".bezierCurveTo(coords[j], coords[j + 1], coords[j + 2], coords[j + 3], coords[j + 4], coords[j + 5]",194880,32,"j += 6;\r\n    ",68541,52,"    case \"Z\":",148911,32,".closePath(",194880,60,196560,53,",\r\n    splitThreshold: 180",1019389,82,"element',\r\n",2264942,38,"position: 'absolut",313812,32,2088688,64,1211328,32,"    style: {",1012978,33,2258767,33,2262366,41,"position: 'relative'",144032,41,1256779,43,"**\n     * @private\n     *\n     * Creates the canvas element.\n     */\r\n    createCanvas: function() {\r\n        var canvas",798831,41,"tag: 'canvas',\r\n                cls: 'x-surface'\r\n            }),\r\n            overrides = Ext.draw.engine.Canvas.contextOverrides,\r\n            ctx = canvas.dom.getContext('2d'),\r\n            backingStoreRatio = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1,\r\n            name;\r\n        // Windows Phone does not currently support backingStoreRatio\r\n        this.devicePixelRatio /= (Ext.os.is.WindowsPhone) ?",2097126,40," : backingStoreRatio;\r\n        if (ctx.ellipse) {\r\n            delete overrides.ellipse",560577,35,"overrides) {\r\n            ctx['$' + name] = ctx[name]",358122,32,"ctx, overrides);\r\n        if (this.getHighPrecision()) {\r\n            this.enablePrecisionCompensation(ctx",689264,34,"this.disablePrecisionCompensation(ctx);\r\n        }\r\n",799184,38,"canvas);\r\n        this.canvases.push(canvas);\r\n        this.contexts.push(ctx)",1062755,37,"the canvas element.\n     */",2083483,41,1043101,32,"canvases = [];\r\n        this.contexts = [];\r\n        this.createCanvas();\r\n        this.activeCanvases = 0;\r\n    },\r\n    updateHighPrecision: function(pc) {\r\n        var contexts = this.contexts,\r\n            ln = contexts.length,\r\n            i, context",1465968,51,"context = contexts[i];\r\n            if (pc) {\r\n                this.enablePrecisionCompensation(context",395584,42,"this.disablePrecisionCompensation(context",358736,34,"},\r\n    precisionMethods: {\r\n        rect: false,\r\n        fillRect: false,\r\n        strokeRect: false,\r\n        clearRect: false,\r\n        moveTo: false,\r\n        lineTo: false,\r\n        arc: false,\r\n        arcTo: false,\r\n        save: false,\r\n        restore: false,\r\n        updatePrecisionCompensate: false,\r\n        setTransform: false,\r\n        transform: false,\r\n        scale: false,\r\n        translate: false,\r\n        rotate: false,\r\n        quadraticCurveTo: false,\r\n        bezierCurveTo: false,\r\n        createLinearGradient: false,\r\n        createRadialGradient: false,\r\n        fillText: false,\r\n        strokeText: false,\r\n        drawImage: false",2214608,42,"lears canvas of compensation for canvas' use of single precision floating point.\n     * @param {CanvasRenderingContext2D} ctx The canvas context.\n     */\r\n    disablePrecisionCompensation: function(ctx) {\r\n        var precisionMethods = this.precisionMethods",397352,43,"precisionMethods) {\r\n            delete ctx[name];\r\n        }\r\n        this.setDirty",1349184,48,"Compensate for canvas' use of single precision floating point.\n     * @param {CanvasRenderingContext2D} ctx The canvas context.\n     */\r\n    enablePrecisionCompensation: function(ctx) {\r\n        var surface = this,\r\n            xx = 1,\r\n            yy = 1,\r\n            dx = 0,\r\n            dy = 0,\r\n            matrix = new Ext.draw.Matrix(),\r\n            transStack = [],\r\n            comp = {},\r\n            originalCtx = ctx.constructor.prototype;",1302030,32,"CanvasRenderingContext2D\n         * @ignore\n         */\r\n        var override = {\r\n",2170893,35,"Adds a new closed subpath to the path, representing the given rectangle.\n             * @return {*}\n             * @ignore",805982,34,"rect: function(x, y, w, h",38768,32,"originalCtx.rect.call(this, x * xx + dx, y * yy + dy, w * xx, h * yy",274683,40,"/**\n             * Paints the given rectangle onto the canvas, using the current fill style.\n             * @ignore",805982,34,"fillRect: function(x, y, w, h",2254533,32,"datePrecisionCompensateRect();\r\n                    originalCtx.fillRect.call(this, x * xx + dx, y * yy + dy, w * xx, h * yy);\r\n                    this.updatePrecisionCompensate(",274683,40,"/**\n             * Paints the box that outlines the given rectangle onto the canvas, using the current stroke style.\n             * @ignore",805982,34,"strokeRect: function(x, y, w, h",2254533,32,"datePrecisionCompensateRect();\r\n                    originalCtx.strokeRect.call(this, x * xx + dx, y * yy + dy, w * xx, h * yy);\r\n                    this.updatePrecisionCompensate(",274683,40,"/**\n             * Clears all pixels on the canvas in the given rectangle to transparent black.\n             * @ignore",805982,34,"clearRect: function(x, y, w, h",38768,32,"originalCtx.clearRect.call(this, x * xx + dx, y * yy + dy, w * xx, h * yy",274683,40,"/**\n             * Creates a new subpath with the given point.\n             * @ignore",805982,34,"moveTo: function(x, y",38768,32,"originalCtx.moveTo.call(this, x * xx + dx, y * yy + dy",274683,40,"/**\n             * Adds the given point to the current subpath, connected to the previous one by a straight line.\n             * @ignore",805982,34,"lineTo: function(x, y",38768,32,"originalCtx.lineTo.call(this, x * xx + dx, y * yy + dy",274683,40,"/**\n             * Adds points to the subpath such that the arc described by the circumference of the\n             * circle described by the arguments, starting at the given start angle and ending at\n             * the given end angle, going in the given direction (defaulting to clockwise), is added\n             * to the path, connected to the previous point by a straight line.\n             * @ignore",805982,34,"arc: function(x, y, radius, startAngle, endAngle, anticlockwise",2254533,32,"datePrecisionCompensateRect();\r\n                    originalCtx.arc.call(this, x * xx + dx, y * xx + dy, radius * xx, startAngle, endAngle, anticlockwise);\r\n                    this.updatePrecisionCompensate(",274683,40,"/**\n             * Adds an arc with the given control points and radius to the current subpath,\n             * connected to the previous point by a straight line.  If two radii are provided, the\n             * first controls the width of the arc's ellipse, and the second controls the height. If\n             * only one is provided, or if they are the same, the arc is from a circle",266096,32,"In the case of an ellipse, the rotation argument controls the clockwise inclination\n             * of the ellipse relative to the x-axis.\n             * @ignore",805982,34,"arcTo: function(x1, y1, x2, y2, radius",2254533,32,"datePrecisionCompensateRect();\r\n                    originalCtx.arcTo.call(this, x1 * xx + dx, y1 * yy + dy, x2 * xx + dx, y2 * yy + dy, radius * xx);\r\n                    this.updatePrecisionCompensate(",274683,40,"/**\n             * Pushes the context state to the state stack.\n             * @ignore",805982,34,"save",2235168,32,"    transStack.push(matrix);\r\n                    matrix = matrix.clone();\r\n",105609,33,"alCtx.save.call(thi",274682,41,"/**\n             * Pops the state stack and restores the state.\n             * @ignore",805982,34,"restore",2235168,32,"    matrix = transStack.pop();\r\n                    originalCtx.restore.call(",2242563,33,"updatePrecisionCompensate(",274683,40,"/**\n             * @ignore",805982,34,"updatePrecisionCompensate",2235168,32,"    matrix.precisionCompensate(surface.devicePixelRatio, comp);\r\n                    xx = comp.xx;\r\n                    yy = comp.yy;\r\n                    dx = comp.dx;\r\n                    dy = comp.dy;\r\n",105609,33,"alCtx.setTransform.call(this, surface.devicePixelRatio, comp.b, comp.c, comp.d, 0, 0",274683,40,"/**\n             * @ignore",805982,34,"updatePrecisionCompensateRect",2235168,32,"    matrix.precisionCompensateRect(surface.devicePixelRatio, comp);\r\n                    xx = comp.xx;\r\n                    yy = comp.yy;\r\n                    dx = comp.dx;\r\n                    dy = comp.dy;\r\n",105609,33,"alCtx.setTransform.call(this, surface.devicePixelRatio, comp.b, comp.c, comp.d, 0, 0",274683,40,"/**\n             * Changes the transformation matrix to the matrix given by the arguments as described below.\n             * @ignore",805982,34,"setTransform: function(x2x, x2y, y2x, y2y, newDx, newDy) {\r\n                    matrix.set(x2x, x2y, y2x, y2y, newDx, newDy);\r\n                    this.updatePrecisionCompensate(",274683,40,"/**\n             * Changes the transformation matrix to apply the matrix given by the arguments as described below.\n             * @ignore",805982,35,"ransform: function(x2x, x2y, y2x, y2y, newDx, newDy) {\r\n                    matrix.append(x2x, x2y, y2x, y2y, newDx, newDy);\r\n                    this.updatePrecisionCompensate(",274683,40,"/**\n             * Scales the transformation matrix.\n             * @return {*}\n             * @ignore",805982,34,"scale: function(sx, sy",56352,33,"his.transform(sx, 0, 0, sy, 0, 0",274683,40,"/**\n             * Translates the transformation matrix.\n             * @return {*}\n             * @ignore",805982,35,"ranslate: function(dx, dy",56352,33,"his.transform(1, 0, 0, 1, dx, dy",274683,40,"/**\n             * Rotates the transformation matrix.\n             * @return {*}\n             * @ignore",805982,34,"rotate: function(radians) {\r\n                    var cos = Math.cos(radians),\r\n                        sin = Math.sin(radians",344992,35,".transform(cos, sin, -sin, cos, 0, 0",274683,40,"/**\n             * Adds the given point to the current subpath, connected to the previous one by a\n             * quadratic B\ufffff\ufffffzier curve with the given control point.\n             * @return {*}\n             * @ignore",805982,34,"quadraticCurveTo: function(cx, cy, x, y",38768,32,"originalCtx.quadraticCurveTo.call(this, cx * xx + dx, cy * yy + dy, x * xx + dx, y * yy + dy",274683,40,"/**\n             * Adds the given point to the current subpath, connected to the previous one by a cubic\n             * B\ufffff\ufffffzier curve with the given control points.\n             * @return {*}\n             * @ignore",805982,34,"bezierCurveTo: function(c1x, c1y, c2x, c2y, x, y",38768,32,"originalCtx.bezierCurveTo.call(this, c1x * xx + dx, c1y * yy + dy, c2x * xx + dx, c2y * yy + dy, x * xx + dx, y * yy + dy",274683,40,"/**\n             * Returns an object that represents a linear gradient that paints along the line given\n             * by the coordinates represented by the arguments.\n             * @return {*}\n             * @ignore",805982,34,"createLinearGradient: function(x0, y0, x1, y1",2254533,32,"datePrecisionCompensateRect();\r\n                    var grad = originalCtx.createLinearGradient.call(this, x0 * xx + dx, y0 * yy + dy, x1 * xx + dx, y1 * yy + dy);\r\n                    this.updatePrecisionCompensate();\r\n                    return grad",274684,39,"/**\n             * Returns a CanvasGradient object that represents a radial gradient that paints along\n             * the cone given by the circles represented by the arguments.  If either of the radii\n             * are negative, throws an IndexSizeError exception.\n             * @return {*}\n             * @ignore",805982,34,"createRadialGradient: function(x0, y0, r0, x1, y1, r1",2254533,32,"datePrecisionCompensateRect();\r\n                    var grad = originalCtx.createLinearGradient.call(this, x0 * xx + dx, y0 * xx + dy, r0 * xx, x1 * xx + dx, y1 * xx + dy, r1 * xx);\r\n                    this.updatePrecisionCompensate();\r\n                    return grad",274684,39,"/**\n             * Fills the given text at the given position. If a maximum width is provided, the text\n             * will be scaled to fit that width if necessary.\n             * @ignore",805982,34,"fillText: function(text, x, y, maxWidth) {\r\n                    originalCtx.setTransform.apply(this, matrix.elements)",141344,35,"axWidth =",556960,43,"originalCtx.fillText.call(this, text, x, y",147935,58,"originalCtx.fillText.call(this, text, x, y, maxWidth",160448,47,"this.updatePrecisionCompensate(",274683,40,"/**\n             * Strokes the given text at the given position. If a\n             * maximum width is provided, the text will be scaled to\n             * fit that width if necessary.\n             * @ignore",805982,34,"strokeText: function(text, x, y, maxWidth) {\r\n                    originalCtx.setTransform.apply(this, matrix.elements)",141344,35,"axWidth =",556960,43,"originalCtx.strokeText.call(this, text, x, y",147935,58,"originalCtx.strokeText.call(this, text, x, y, maxWidth",160448,47,"this.updatePrecisionCompensate(",274683,40,"/**\n             * Fills the subpaths of the current default path or the given path with the current fill style.\n             * @ignore",805982,34,"fill",2235168,32,"    this.updatePrecisionCompensateRect();\r\n                    originalCtx.fill.call(",2242563,33,"updatePrecisionCompensate(",274683,40,"/**\n             * Strokes the subpaths of the current default path or the given path with the current stroke style.\n             * @ignore",805982,34,"stroke",2235168,32,"    this.updatePrecisionCompensateRect();\r\n                    originalCtx.stroke.call(",2242563,33,"updatePrecisionCompensate(",274683,40,"/**\n             * Draws the given image onto the canvas.  If the first argument isn't an img, canvas,\n             * or video element, throws a TypeMismatchError exception. If the image has no image\n             * data, throws an InvalidStateError exception. If the one of the source rectangle\n             * dimensions is zero, throws an IndexSizeError exception. If the image isn't yet fully\n             * decoded, then nothing is drawn.\n             * @return {*}\n             * @ignore",805982,34,"drawImage: function(img_elem, arg1, arg2, arg3, arg4, dst_x, dst_y, dw, dh) {\r\n                    switch (argument",1892094,33,1731112,33,"        return originalCtx.drawImage.call(this, img_elem, arg1 * xx + dx, arg2 * yy + dy)",195056,32,"5:",220545,37,"originalCtx.drawImage.call(this, img_elem, arg1 * xx + dx, arg2 * yy + dy, arg3 * xx, arg4 * yy)",195056,32,"9:",220545,37,"originalCtx.drawImage.call(this, img_elem, arg1, arg2, arg3, arg4, dst_x * xx + dx, dst_y * yy * dy, dw * xx, dh * yy",300016,70,"Ext.apply(ctx, override);\r\n        this.setDirty(true);\r\n    },\r\n    // Continue docs for the Canvas class\r\n    /** @class Ext.draw.engine.Canvas */\r\n    updateRegion: function(region) {",2048652,40,"region\r\n        ]",1532719,40,"l = Math.floor(region[0]),\r\n            t = Math.floor(region[1]),\r\n            r = Math.ceil(region[0] + region[2]),\r\n            b = Math.ceil(region[1] + region[3])",327077,34,"me.devicePixelRatio,\r\n            w = r - l,\r\n            h = b - t,\r\n            splitThreshold = Math.round(me.splitThreshold / devicePixelRatio),\r\n            splits = Math.ceil(w / splitThreshold),\r\n            activeCanvases = me.activeCanvases,\r\n            i, offsetX, dom, leftWidth;\r\n        for (i = 0 , offsetX = 0; i < splits; i++ , offsetX += splitThreshold) {\r\n            if (i >= me.canvases.length) {\r\n                me.createCanvas",770992,32,"dom = me.canvases[i].dom;\r\n            dom.style.left = offsetX + 'px';\r\n            if (h * devicePixelRatio !== dom.height) {\r\n                dom.height = h * devicePixelRatio;\r\n                dom.style.height = h + 'px';\r\n            }\r\n            leftWidth = Math.min(splitThreshold, w - offsetX);\r\n            if (leftWidth * devicePixelRatio !== dom.width) {\r\n                dom.width = leftWidth * devicePixelRatio;\r\n                dom.style.width = leftWidth + 'px'",690096,33,"applyDefaults(me.contexts[i]",1485280,34,"activeCanvases; i++) {\r\n            dom = me.canvases[i].dom;\r\n            dom.width = 0;\r\n            dom.height = 0;\r\n        }\r\n        me.activeCanvases = splits;\r\n        me.clear();\r\n    },\r\n    /**\n     * @inheritdoc\n     */\r\n    clearTransform",1998464,52,"activeCanvases = me.activeCanvases,\r\n            i, ctx;\r\n        for (i = 0; i < activeCanvases; i++) {\r\n            ctx = me.contexts[i];\r\n            ctx.translate(-me.splitThreshold * i, 0);\r\n            ctx.scale(me.devicePixelRatio, me.devicePixelRatio);\r\n            me.matrix.toContext(ct",1075920,54," @inheritdoc\n     */\r\n    renderSprite: function(sprit",1511760,42,"region = me._region,\r\n            surfaceMatrix = me.matrix,\r\n            parent = sprite._parent,\r\n            matrix = Ext.draw.Matrix.fly([\r\n",45209,36,"0,",450049,38,"1,",450049,54,"),\r\n            bbox, i, offsetX, ctx, width,\r\n            left = 0,\r\n            top,\r\n            right = region[2],\r\n            bottom;\r\n        while (parent && (parent !== me)) {\r\n            matrix.prependMatrix(parent.matrix || parent.attr && parent.attr.matrix",580349,65,"matrix.prependMatrix(surfaceMatrix);\r\n        bbox = sprite.getBBox();\r\n        if (bbox) {\r\n            bbox = matrix.transformBBox(bbox);\r\n        }\r\n        sprite.preRender(me);\r\n        if (sprite.attr.hidden || sprite.attr.globalAlpha === 0) {\r\n            sprite.setDirty(false);",1102304,42,"top = 0;\r\n        bottom = top + region[3];\r\n        for (i = 0 , offsetX = 0; i < me.activeCanvases; i++ , offsetX += me.splitThreshold / me.devicePixelRatio) {\r\n            ctx = me.contexts[i];\r\n            width = Math.min(region[2] - offsetX, me.splitThreshold / me.devicePixelRatio);\r\n            left = offsetX;\r\n            right = left + width;\r\n            if (bbox) {\r\n                if (bbox.x > right || bbox.x + bbox.width < left || bbox.y > bottom || bbox.y + bbox.height < top) {\r\n",5054,42,172032,42,"}",1161264,37,"ctx.save();\r\n                // Set attributes to context.\r\n                sprite.useAttributes(ctx, region);\r\n                // Render shape\r\n                if (false === sprite.render(me, ctx, [\r\n                    left,\r\n                    top,\r\n                    width,\r\n                    bottom - top\r\n                ], region",38767,33,"fals",1435008,37,"finally {\r\n                ctx.restor",2219967,36,"    sprite.setDirty(false);",1064221,38,"ctx) {\r\n        ctx.strokeStyle = 'rgba(0,0,0,0)';\r\n        ctx.fillStyle = 'rgba(0,0,0,0)';\r\n        ctx.textAlign = 'start';\r\n        ctx.textBaseline = 'top';\r\n        ctx.miterLimit = 1;\r\n    },\r\n    /**\n     * @inheritdoc",931498,56,",\r\n            activeCanvases = this.activeCanvases,\r\n            i, canvas, ctx;\r\n        for (i = 0; i < activeCanvases; i++) {\r\n            canvas = me.canvases[i].dom;\r\n            ctx = me.contexts[i];\r\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        }\r\n        me.setDirty",1349184,32,"Destroys the Canvas element and prepares it for Garbage Collection.",1643488,45,"var me = this,\r\n            i,\r\n            ln = me.canvas",2104124,37,"n; i++) {\r\n            me.contexts[i] = null;\r\n            me.canvases[i].destroy();\r\n            me.canvases[i] = null",1166822,32,"contexts;\r\n        delete me.canvases;\r\n        me.callSuper",2193308,36,"\r\n    if (Ext.os.is.Android4 && Ext.browser.is.Chrome) {\r\n        this.prototype.splitThreshold = 3000;\r\n    } else",1248243,35,"this.prototype.splitThreshold = 1.0E10;\r\n    }\r\n});\r\n\r\n/**\n * The Draw Component is a surface in which sprites can be rendered. The Draw Component\n * manages and holds a `Surface` instance: an interface that has\n * an SVG or VML implementation depending on the browser capabilities and where\n * Sprites can be appended.\n * One way to create a draw component is:\n *\n *     var drawComponent = new Ext.draw.Component(",1848528,43,"prites: [{\n *             type: 'circle',\n *             fill: '#79BB3F',\n *             radius: 100,\n *             x: 100,\n *             y: 100",2038080,32,"In this case we created a draw component and added a sprite to it.\n * The *type* of the sprite is *circle* so if you run this code you'll see a yellow-ish\n * circle in a Window. When setting `viewBox` to `false` we are responsible for setting the object's position and\n * dimensions accordingly.\n *\n * You can also add sprites by using the surface's add method:\n *\n *     drawComponent.getSurface('main').add({\n *         type: 'circle',\n *         fill: 'blue',\n *         radius: 100,\n *         x: 100,\n *         y: 100\n *     });\n *\n * For more information on Sprites, the core elements added to a draw component's surface,\n * refer to the {@link Ext.draw.sprite.Sprite",2043072,38,"draw.Component",2263760,38,"xtype: 'draw',\r\n    defaultType: 'surface',\r\n    engine: 'Ext.draw.engine.Canvas',\r\n    statics: {\r\n        WATERMARK: ''",514319,33,"cls: 'x-draw-",1494271,37,"deprecated 2.2.0 Please implement custom resize event handler.\n         * Resize the draw component by the content size of the main surface",1684624,34,"It is applied only when there is only one surface.\n         */\r\n        autoSize",1618736,34,"deprecated 2.2.0 Please implement custom resize event handler.\n         * Pan/Zoom the content in main surface to fit the component size",1684624,34,"It is applied only when there is only one surface.\n         */\r\n        viewBox",1618736,34,"deprecated 2.2.0 Please implement custom resize event handler.\n         * Fit the main surface to the size of componen",1684623,35,"It is applied only when there is only one surface.\n         */\r\n        fitSurface",1333792,38,"Function} [resizeHandler] The resize function that can be configured to have a behavior",1684624,34,"since resize events trigger {@link #renderFrame} calls automatically,\n         * return `false` from the resize function, if it also calls `renderFrame`, to prevent double rendering.\n         */\r\n        resizeHandler: null,\r\n        background: null,\r\n        sprites",1115664,44,"[]} gradients\n         * Defines a set of gradients that can be used as color properties\n         * (fillStyle and strokeStyle, but not shadowColor) in sprites.\n         * The gradients array is an array of",470167,45,"    * - **id** - string - The unique name of the gradient.\n         * - **type** - string, optional - The type of the gradient. Available types are: 'linear', 'radial'. Defaults to 'linear'.\n         * - **angle** - number, optional - The angle of the gradient in degrees.\n         * - **stops** - array - An array of objects with 'color' and 'offset' properties, where 'offset' is a real number from 0 to 1",232448,35,":\n         *\n         *     gradients: [{\n         *         id: 'gradientId1',\n         *         type: 'linear',\n         *         angle: 45,\n         *         stops: [{\n         *             offset: 0,\n         *             color: 'red",1610298,48,"offset: 1,\n         *            color: 'yellow",1610461,40,", {\n         *        id: 'gradientId2',\n         *        type: 'radial',\n         *        stops: [{\n         *            offset: 0,\n         *            color: '#555',\n         *",1610415,35,"offset: 1,\n         *            color: '#ddd',\n         *        }]\n         *     }]\n         *\n         * Then the sprites can use 'gradientId1' and 'gradientId2' by setting the color attributes to those id",1054379,42,"sprite.setAttributes({\n         *         fillStyle: 'url(#gradientId1)',\n         *         strokeStyle: 'url(#gradientId2)'",1365372,41,"gradients: []",528768,55,1218256,32,894512,41,"frameCallbackId = Ext.draw.Animator.addFrameCallback('renderFrame', this);\r\n    },\r\n    applyGradients: function(gradients) {\r\n",1181950,38,"i, n, gradient, offset;\r\n        if (!Ext.isArray(gradients)) {",1182304,39,"\r\n        for (i = 0 , n = gradient",416868,37,"gradient = gradient",1833164,37,"gradient)) {\r\n",511215,34,1461872,38,"// ExtJS only supported linear gradients, so we didn't have to specify their type\r\n            if (typeof gradient.type !",342736,32,"gradient.type = 'linear'",1776,34,"gradient.angle) {\r\n                gradient.degrees = gradient.angle;\r\n                delete gradient.angle",342832,33,"Convert ExtJS stops object to Touch stops array\r\n            if (Ext.isObject(gradient.stops)) {\r\n                gradient.stops = (function(stops",954546,38,"[],\r\n                        stop;\r\n                    for (offset in stops",1757456,32,"p = stops[offset];\r\n                        stop.offset = offset / 100;\r\n    ",1181675,32,"stop",160448,47,823768,32,"})(gradient.stop",110848,34,"sult.push(gradient);\r\n        }\r\n        Ext.draw.gradient.GradientDefinition.add(result);",655724,38,1501215,34,"var me = this",1089319,32,"    me.element.on('resize', 'on",986958,35,"prites: function(sprites) {\r\n        // Never update\r\n        if (!sprites",1125102,45,"sprites = Ext.Array.from(sprites);\r\n        var ln = sprites.length,\r\n            i, surface",1465968,52,"f (sprites[i].surface instanceof Ext.draw.Surface) {\r\n                surface = sprites[i].surfac",1800384,33,"String(sprites[i].surface)) {\r\n                surface = this.getSurface(sprites[i].surface",395584,42,"surface = this.getSurface('main",58048,32,"surface.add(sprites[i]);\r\n        }",1100448,116,1256263,98,1211328,32,"    className: 'x-inner",1256415,104,"watermarkElement",1256528,32,"cls: 'x-chart-watermark",1256528,32,"html: Ext.draw.Component.WATERMARK,\r\n                            style: Ext.draw.Component.WATERMARK ? '' : 'display: none'",103823,49,"]",62704,33,"]",983978,33,"ackground: function(background",1101693,35,"{\r\n            background: background",42158,38,"@protected\n     * Place water mark after resize.\n     */\r\n    onPlaceWatermark: function() {},\r\n    // Do nothing\r\n    onRes",1205696,40,",\r\n            size = me.element.getSize(),\r\n            resizeHandler = me.getResizeHandler() || me.resizeHandler",1955596,32,"me.fireEvent('resize', me, size);\r\n        result = resizeHandler.call(me, size);\r\n        if (result !== false) {\r\n            me.renderFrame();\r\n            me.onPlaceWatermark();\r\n        }\r\n    },\r\n    resizeHandler",1400110,32,"me = this;\r\n        me.getItems().each(function(surface) {\r\n            surface.setRegion(",450048,40,",\r\n                size.width,\r\n                size.",2232800,33,1897375,32,"a surface by the given id or create one if it doesn't exist.\n     * @param {String} [id=\"main\"]\n     * @return {Ext.draw.Surface}\n     */\r\n    getSurface: function(id) {\r\n        id = this.getId() + '-' + (id || 'main'",1532719,40,"surface",1497376,32,"surface = surfaces.get(id)",829769,34,"!surface) {\r\n            surface = me.add({\r\n                xclass: me.engine,\r\n                id: id",348928,35,"me.getFitSurface()) {\r\n                size = me.element.getSize();\r\n                surface.setRegion([\r\n    ",450051,36,"    0,\r\n                    size.width,\r\n                    size.height",1541757,46,"    surface.renderFra",1809360,33,"surface;\r\n    },\r\n    /**\n     * Render all the surfaces in the component.\n     */\r\n    render",884960,33,"me = this,\r\n            i, ln, bbox,\r\n            surfaces = me.getItems();\r\n        for (i = 0 , ln = surfa",285983,40,"surfaces.items[i].renderFram",876605,65,"raw.Animator.removeFrameCallback(this.frameCallbackId)",846894,38,", function() {\r\n    if (location.search.match('svg')) {\r\n        Ext.draw.Component.prototype.engine = 'Ext.draw.engine.Svg';\r\n    } else if ((Ext.os.is.BlackBerry && Ext.os.version.getMajor() === 10) ||",1043359,34,"(Ext.os.version.getMinor() === 1 || Ext.os.version.getMinor() === 2 || Ext.os.version.getMinor() === 3))) {\r\n        // http://code.google.com/p/android/issues/detail?id=37529\r\n        Ext.draw.Component.prototype.engine = 'Ext.draw.engine.Svg'",877296,54,1417853,337807,1755660,491561,"control.HeaderControl",2180309,38,"ias: 'widget.header",2255389,113,"arguments);\r\n        var menu = {\r\n",2258557,50,"ui: 'plain',\r\n                cls: 'face-text-color',\r\n                iconCls: 'list',\r\n",2262477,59,"var theMenu;\r\n                    if ($L.menu === 'right') {\r\n                        theMenu = Ext.Viewport.getMenus().righ",212575,58,"theMenu = Ext.Viewport.getMenus().lef",325007,47,";\r\n                    if (theM",2212647,43,"Ext.Viewport.showMenu($L.menu",147935,58,"Ext.Viewport.hideMenu($L.menu",300016,70,"var back = {\r\n",2258557,50,"ui: 'plain',\r\n                cls: 'face-text-color",2254455,60,"itemId: 'backButton',\r\n    ",980208,42,"    tap",2235168,32,"        var view = this.up('container').up('container').getBackView(",71438,32,"view =",137216,36,"    view = 'menuview",818896,51,"    $L.showView(view, 'right'",300016,70,"if ($L.menu === 'right') {\r\n    ",2252708,32,"    back",1256640,42,"xtype: 'spacer'",274685,38,"menu",1166029,49,"this.add([\r\n                menu",1256640,42,"xtype: 'spacer'",274685,38,"back",1534270,38,";",514319,33,"itemId: 'theHeader',\r\n",2264847,32,"height: 50,\r\n        //cls: 'header-background-color',\r\n        style: 'font-size:14px",2262080,32,"title: ''",2261390,40,"view.BaseView",2263760,53,"baseview'",1117691,41,"var me = this;\r\n        this.on('activate'",1376687,37,"activate",811327,39,"activ",793647,32,1974192,46,",\r\n    set",2179279,39,"down('#theHeader').setTitle(title",2254096,35,"view: null,\r\n        backView: null,\r\n        cls: 'primary-background-color',",1223999,40,"vbox",2254295,72,"head",2265735,56,"define('PenskeTouch.view.StartView', {\r\n    extend: PenskeTouch.view.BaseView,\r\n    xtype: 'startview",2256670,106,"arguments);\r\n        me.setTitle('Welcome');\r\n        me.setHtml('<div style=\"padding:10px;color:white;\">Start View... (use menu to add to homescreen)</div>');\r\n    },\r\n    config: {",2259007,34,"view.$L",1650784,32,"alternateClassName: '$L',\r\n    menu: 'right',\r\n    //",2247291,52,"//",2247343,56,"//key: 'LDRY_ReadMsgIDs',\r\n    //isViewportLoaded: false,\r\n    //attendeeMessages: 0,\r\n    //loading: 0,\r\n    //startLoading: function (message) {\r\n    //",2247540,49,"//",2247589,42,"//    }\r\n    //    this.loading++;\r\n    //",2247667,34,"//        Ext.Msg.show({\r\n    //",2247729,39,"//            width: 275,\r\n    //",2247797,32,"//            height: 100,\r\n    //",2247859,33,"//",2247892,34,"//            msg: message\r\n    //        });\r\n    //    }\r\n    //},\r\n    //endLoading: function () {\r\n    //",2248022,35,"//        Ext.Msg.hide();\r\n    //    }\r\n    //    this.loading--;\r\n    //",2248122,62,2248250,498,2248781,3702,"view.MenuView', {\r\n    extend: Ext.Menu,\r\n    alias: \"widget.menuview\",\r\n    requires: [],\r\n    config: {\r\n        width: 250,\r\n        //bodyStyle:'border-color:#99BBE8;background-color:#D3E1F1 !important;',\r\n        scrollable: 'vertical',",1353423,35,"xtype: 'button',\r\n",2262395,38,"cls: 'face-text-color',\r\n            style: 'height:40px;font-size:18px;font-family:Roboto;cursor:pointer;text-transform: uppercase;',\r\n            handler: function(button) {\r\n                $L.showView(button.config.view, $L.menu);\r\n                Ext.Viewport.hideMenu($L.menu",414416,39,2261934,78,"html: 'menu",2263359,50,"text: 'home',\r\n                view: 'penskeview",2263359,50,"text: 'drivers',\r\n                view: 'driversview",2263359,50,"text: 'agenda',\r\n                view: 'agendaview",2263359,50,"text: 'Local Guide',\r\n                view: 'localguideview",2263359,50,"text: 'photos',\r\n                view: 'photosview",2263359,50,"text: 'sponsors',\r\n                view: 'sponsorsview",2263359,50,"text: 'admin',\r\n                view: 'adminview",2265744,47,2252463,116,825392,38,"//",2252658,325,"cls: 'face-text-color",2252963,80,2253055,119,"cls: 'header-text-color",2252963,80,2253055,33,2253279,86,"cls: 'face-text-color",2252963,39,"4px;text-align:center",2253417,91,858363,34,2261390,48,2253549,87,1501215,34,"var me = this;\r\n        me.addCls('primary-background-color secondary-text-color')",1057407,50,514400,41,958623,62,"addCls('primary-background-color secondary-text-color');\r\n        me.setMasked({\r\n",1544402,44,"message: ''\r\n        }",2253749,251,"me.setMasked(false",2254014,125,"height:200px;width: 100%",2262080,32,"//cls: 'secondary-background-color',",1223999,60,2254282,111,"cls: 'face-text-color',\r\n                style: '",2254413,592,"cls: 'face-text-color',\r\n                style: '",2254413,78,2255103,399,"arguments);\r\n        me.addCls('secondary-background-color face-text-color'",2254096,43,2256352,46,2255896,227,"cls: 'face-text-color",2256103,61,2256176,143,"cls: 'face-text-colo",2263247,35," 100%",2256389,32,2256440,350,"    me.addCls('third-background-color header-text-color'",2256782,373,"height:100px;width: 100%",2257216,7387,"PenskeTouch.view.BaseView",2264616,40,"//activate: function () {\r\n    //    var me = this;\r\n    //    me",2248193,53,"//    me.setMasked(false);\r\n    //",1576336,49,958623,62,"setTitle('Home');\r\n        me",2252720,47,2265375,396,2254096,36,2264676,92,2261390,40,"view.AgendaView', {\r\n    extend: PenskeTouch.view.BaseView,\r\n    alias: 'widget.agendaview'",1057216,75,2057024,32,"me.setTitle('Agenda');\r\n        //me.setHeight('100%');\r\n        me.setHtml('<iframe style=\"width:100%;height:100%;display:block\" frameborder=\"0\" scrolling=\"yes\" src=\"http://landrysleap.com/leap_agenda/html/employeeagenda.html\" > </iframe>');\r\n    },\r\n    //me.add([\r\n    //    {\r\n    //",2261967,33,"//        height: '100%',\r\n    //        html: '<iframe id=\"AGENDA_FRAME\" class=\"ui-iframe\" style=\"width:100%;height:100%;display:block\" src=\"http://landrysleap.com/leap_agenda/html/employeeagenda.html\" name=\"DBox\" frameborder=\"0\" scrolling=\"yes\" > </iframe>'\r\n    //    }\r\n    //]);\r\n    config: {",2259007,34,"view.AdminView', {\r\n    extend: PenskeTouch.view.BaseView,\r\n    alias: 'widget.adminview',\r\n    onDeleteLS: function() {\r\n        alert('HI');\r\n    },\r\n    //localStorage.removeItem($L.key);\r\n    //alert('Deleted: ' + $L.key)\r\n    //var data = { attendeeEmail: 'kng@hitachiconsulting.com' };\r\n    //LDRY.ajax.call('GetMobileSponsors', data, me.sponsorsSuccess);",1342528,47,958623,62,"setTitle('Admin');\r\n        me",2252720,47,"button',\r\n                margin: 10,\r\n                text: 'Clear LS',\r\n",2262477,59,"localStorage.clear();\r\n                    alert('Cleared...'",18224,36,",\r\n            //for (var i = 0; i < localStorage.length; i++) {\r\n            //    alert(localStorage.getItem(localStorage.key(i)));\r\n            //}\r\n            //alert('HI');\r\n            //localStorage.removeItem($L.key);\r\n            //alert('Deleted: ' + $L.key)\r\n            //var data = { attendeeEmail: 'kng@hitachiconsulting.com' };\r\n            //LDRY.ajax.call('GetMobileSponsors', data, me.sponsorsSuccess);",2263152,41,"button',\r\n                margin: 10,\r\n                text: 'Orientation',\r\n",2262477,59,"alert(Ext.Viewport.getOrientation(",367391,47,"]);\r\n    },\r\n    config: {",2259007,34,"view.SponsorsView', {\r\n    extend: PenskeTouch.view.BaseView,\r\n    alias: 'widget.sponsorsview',\r\n    sponsorData: [\r\n        {\r\n            image: 'Ic_All.png',\r\n            view: 'tbdview',\r\n            viewx: 'allsponsorsview',\r\n            text: 'View All Sponsors'",1282302,37,"image: 'platinum.png',\r\n            view: 'platinumsponsorsview',\r\n            text: '2015 Platinum Sponsors'",1282302,37,"image: 'diamond.png',\r\n            view: 'diamondsponsorsview',\r\n            text: '2015 Diamond Sponsors'",1282302,37,"image: 'silver.png',\r\n            view: 'silversponsorsview',\r\n            text: '2015 Silver Sponsors'",1282302,37,"image: 'bronze.png',\r\n            view: 'bronzesponsorsview',\r\n            text: '2015 Bronze Sponsors'\r\n        }\r\n    ],\r\n",2179757,36,"var me = this;\r\n        me.setMasked({\r\n",1544402,44,"message: ''\r\n        });\r\n        me.down('#list')",1541925,54,"fields: [\r\n                'id',\r\n                'view',\r\n                'image',\r\n                'text",1959536,32,"ata: me.sponsorData\r\n        }));\r\n        me",1543085,32,514400,41,958623,62,"setTitle('Sponsors');\r\n        me.setBackView('penskeview');\r\n        me",2252720,47,"list',\r\n                itemId: 'list',\r\n",2262350,49,"//itemHeight: 70,\r\n                border: 3,\r\n                //style: 'padding:10px;background-color:#D67272;xheight:10",2254172,60,739312,33,"#D67272;',\r\n                emptyText: 'Loading list of Sponsors...',\r\n                itemTpl: [\r\n                    '<div style=\"padding:2px 5px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;\" xclass=\"sponsor-list-item\">',\r\n                    '<span style=\"background-size:cover;background-repeat: no-repeat;background-image: url(resources/images/sponsors/{image});display:inline-block;vertical-align:-17px;width:50px;height:50px;margin-right:15px;background-position:center center;\" xclass=\"sponsor-pic\" ></span>',\r\n                    '<span style=\"color:white;font-family:Roboto;font-size:16px;font-weight:bold;\">{text}</span>',\r\n                    '<span  style=\"top: -33px;float: right;left: 30px;margin: 20px 0px 0px 0px;\" xclass=\"ui-allsponsors-arrowright\"><img src=\"resources/images/sponsors/arrow_right.png\"></span>',\r\n                    '</div>",1961723,39,"listeners: {\r\n                    itemtap: function(list, idx, target, record, evt) {\r\n                        $L.showView(record.get('view'), 'left'",300016,59,"\r\n        ]);\r\n    },\r\n    config: {",2259007,34,"view.LocalGuideView', {\r\n    extend: PenskeTouch.view.BaseView,\r\n    alias: 'widget.localguideview'",1057216,75,2057024,32,"me.setTitle('Local Guide'",2254096,35,"padding: 10,\r\n        contentEl: 'localGuide',",2264665,103,2261390,49,"bd",2252496,60,"tbd",2255389,34,"activat",1998463,38,";\r\n        me.setMasked({\r\n",1544402,44,"message: ''\r\n        });\r\n        //me.down('dataview')",1541925,50,"//    fields: ['logoText', 'sponsorType', 'sponsorCode', 'logoName', 'sponsorName'],\r\n        //    data: $L.diamond\r\n        //}));\r\n        me",1543085,32,"//initialize: function () {\r\n    //    //Ext.applyIf(newOptions, options);\r\n    //    var me = this;\r\n    //",1270719,35,"//    //console.log('TbdControl-initialize');\r\n    //",1576336,49,958623,55,"},\r\n    //console.log('TbdControl-constructor');\r\n    //console.log(config",2255790,35,"padding:10px;",2254139,32,"10",2254172,60,"html: 'TBD'",2261390,40,"view.DriversView', {\r\n    extend: PenskeTouch.view.BaseView,\r\n    xtype: 'driversview',\r\n    activate: function() {},\r\n    //alert('activate');",1342528,47,958623,62,"setTitle('Drivers');\r\n        me",2252720,47,"dataview',\r\n    ",980208,42,"    itemtap: function(dataview, index, target, record, e, eOpts) {\r\n                        //alert(record.data.driver);\r\n                        $L.driver = record.data.driver;\r\n                        $L.showView('driverview', 'left'",234064,44,",\r\n",2262350,49,"scrollable: true,\r\n                inline: true,\r\n                data",2262158,52,"driver: 'keselowski',\r\n                        logoName: 'http://www.teampenske.com/images/driver_nav_keselowski.pn",312351,48,"{\r\n                        driver: 'logano',\r\n                        logoName: 'http://www.teampenske.com/images/driver_nav_logano.pn",312351,48,"{\r\n                        driver: 'blaney',\r\n                        logoName: 'http://www.teampenske.com/images/driver_nav_blaney.pn",312351,48,"{\r\n                        driver: 'castroneves',\r\n                        logoName: 'http://www.teampenske.com/images/driver_nav_castroneves.pn",312351,48,"{\r\n                        driver: 'power',\r\n                        logoName: 'http://www.teampenske.com/images/driver_nav_power.pn",312351,48,"{\r\n                        driver: 'montoya',\r\n                        logoName: 'http://www.teampenske.com/images/driver_nav_montoya.png'",144032,41,"],\r\n                itemTpl: '<img style=\"cursor:pointer;background-color:#D6727;height:80px;margin:10px 10px 10px 10px;\" src=\"{logoName}\" />",2253472,69,"view.DriverView', {\r\n    extend: PenskeTouch.view.BaseView,\r\n    xtype: 'driverview',\r\n",2179757,36,"//alert('activate');\r\n        this.setTitle($L.driver);\r\n        this.setBackView('driversview');",528768,55,958623,62,"setTitle('Driver');\r\n        me",2252720,47,"tbdcontrol",2253472,69,"view.PhotosView', {\r\n    extend: PenskeTouch.view.BaseView,\r\n    alias: 'widget.photosview',\r\n    api_key_leap: 'b999973b4543f532d99b9b9f8e175fa3',\r\n    user_id: '111636227@N03',\r\n    flickerUrl: 'https://api.flickr.com/services/rest/',\r\n    g: function(url, sCallback, eCallback",1205536,37,"Ext.Ajax.request({\r\n    ",1707897,41,"    useDefaultXhrHeader: false,",265757,49,"dataType: \"json\",",1157775,37,"success: function(result, status, xhr) {\r\n                if (result && result != '') {\r\n                    if (sCallback) {\r\n                        sCallback(result, status, xhr",147935,58,"return",659152,32,"result,\r\n                            statu",1826272,32,"xhr\r\n        ",1760239,36,421742,53,"alert('error'",18224,36,",\r\n            error: function(xhr, status, error) {\r\n                alert('error'",347854,36,"},\r\n",2179757,36,"var me = this;\r\n        me.setMasked({\r\n",1544402,44,"message: ''\r\n        });\r\n        me.down('segmentedbutton')",1089230,36,"down('list')",1541925,54,"fields: [\r\n                'text',\r\n                'eventI",2090624,32,"data: []\r\n        }));\r\n        me.down('carousel').setItems([]);\r\n        var getDaysURL = me.flickerUrl + '?method=flickr.collections.getTree' + '&api_key=' + me.api_key_leap + '&user_id=' + me.user_id + '&format=json&nojsoncallback=1';\r\n        me.g(getDaysURL, function(result, status, xhr) {\r\n            //$L.days = result.collections.collection;\r\n            $L.days = Ext.decode(result.responseText).collections.collection;\r\n            var items = [];\r\n            for (j = 0; j < $L.days.",71323,32,"var o = {",2257909,32,"$L.days[j].title,\r\n                        desc: $L.days[j].description,\r\n                        dayset: $L.days[j].set",143904,42,"me.down('segmentedbutton').add(",1331521,32,";\r\n            me.setMasked(false);\r\n        });\r\n    },\r\n    doToggle: function(container, button, pressed) {\r\n        var me = this.up('container').up('container');\r\n        if (pressed === true",2253939,37,"setItems([]);\r\n            me.setTitle('Photos' + ' - ' + button.config.desc);\r\n            var getEventsData = me.flickerUrl + '?&method=flickr.photosets.getList' + '&api_key=' + me.api_key_leap + '&user_id=' + me.user_id + '&format=json&nojsoncallback=1';\r\n            me.g(getEventsData, function(result, status, xhr) {\r\n                //$L.photoset = result.photosets.photoset;\r\n                $L.photoset = Ext.decode(result.responseText).photosets.photoset;\r\n                var items = [];\r\n                console.log(button.config)",617386,39,"$L.photoset.",55615,32,"    for (var j = 0; j < button.config.dayset.",71323,36,"    if (button.config.dayset[j].id === $L.photoset[i].id",218592,33,"//pURL = 'http://farm' + $L.photoset[i].farm + '.static.flickr.com/' + $L.photoset[i].server + '/' + $L.photoset[i].primary + '_' + $L.photoset[i].secret + '_m.jpg'",104159,32,"tem",86989,42,"text: $L.photoset[i].title._content",1211776,35,"eventId: $L.photoset[i].id\r\n        ",6012,41,100112,69,";\r\n                me.down('list')",1541925,58,"    fields: [\r\n                        'text',\r\n                        'eventId'\r\n    ",1961726,36,"    data: items\r\n",1636329,34,"}",841100,33,"Tap: function(list, idx, target, record, evt) {\r\n        var me = this.up('container');\r\n        me.setMasked({\r\n",1544402,44,"message: ''\r\n        });\r\n        var getPhotosURL = me.flickerUrl + '?&method=flickr.photosets.getPhotos' + '&api_key=' + me.api_key_leap + '&photoset_id=' + record.get('eventId') + '&format=json&nojsoncallback=1';\r\n        me.g(getPhotosURL, function(result, status, xhr) {\r\n            //var op = result.photoset.photo;\r\n            var op = Ext.decode(result.responseText).photoset.photo;\r\n            var items = []",612747,35,"op.",55615,32,"pURL = 'http://farm' + op[i].farm + '.static.flickr.com/' + op[i].server + '/' + op[i].id + '_' + op[i].secret + '_b.jpg';\r\n                items.push({\r\n   ",1203164,32,"\r\n",2262346,57,"src: pURL",45390,35,"}",2253942,34,"setItems(items);\r\n            me.setMasked(false",2254083,32,2263856,76,"arguments);\r\n        me.setTitle('Photos');\r\n        me.add([\r\n            //{\r\n            //    xtype: 'draw',\r\n            //    //viewBox: false,\r\n            //   // autoSize: true,\r\n            //    height: 350,\r\n            //    width: 200,\r\n            //    padding: 20,\r\n            //    //rotation: {\r\n            //    //    degrees: 90\r\n            //    //},\r\n            //    items: [\r\n            //        {\r\n            //            type: 'circle',\r\n            //            fill: 'black',\r\n            //            radius: 100,\r\n            //            x: 100,\r\n            //            y: 100\r\n            //        }\r\n            //        //{\r\n            //        //    type: 'text',\r\n            //        //    text: 'Creating a rotated Text component',\r\n            //        //    fill: '#000',\r\n            //        //    font: '18px Arial'\r\n            //        //}\r\n            //    ]\r\n            //",2254640,43,"toolbar',\r\n                itemId: 'theDays",2264835,52,"layout: {",2260776,139,"segmented",2257901,34,"cls: 'face-text-color',\r\n                        allowDepress",803389,33,"listeners:",92992,32,"toggle: this.doToggle",103823,50,2263117,76,"list',\r\n                height: '30%',\r\n                itemId: 'theEvents',\r\n                itemTpl: '{text}',\r\n    ",980208,42,"    itemtap: this.onItemTap",62704,34,2263375,43,"arousel',\r\n                id: 'theC",2254684,59,"height: '70%",2186633,32,"horizontal",2253472,36,",\r\n    config: {\r\n",980212,34,"resize: function(element, eOpts) {\r\n    ",805469,40,"    var element = this.element.dom;\r\n                if (element.clientHeight > element.clientWidth) {\r\n                    //me.setOrientation('portrait');\r\n                    me.down('#theHeader')",803561,32,"        me.down('#theDays')",803561,32,"        me.down('#theEvents')",803561,32,"        me.down('#theCarousel').setHeight('70%'",126960,50,"//me.setOrientation('landscape');\r\n                    me.down('#theHeader').setHidden(true);\r\n                    me.down('#theDays').setHidden(true);\r\n                    me.down('#theEvents').setHidden(true);\r\n                    me.down('#theCarousel')",882578,33,1164032,38,2259008,33,"view.TbdView', {\r\n    extend: PenskeTouch.view.BaseView,\r\n    xtype: 'tbdview',\r\n    activate: function() {},\r\n    //var me = this;\r\n    //me",2248193,53,"////me.down('dataview')",1541925,46,"////    fields: ['logoText', 'sponsorType', 'sponsorCode', 'logoName', 'sponsorName'],\r\n    ////    data: $L.diamond\r\n    ////}));\r\n    //me.setMasked(false);",1342528,47,958623,62,"setTitle('TBD');\r\n        me",2252720,47,"tbdcontrol",2253472,36,",\r\n    config: {",2265777,78,"StartView',",2265844,34,"AgendaView',\r\n        'AdminView',\r\n        'SponsorsView',\r\n        'LocalGuideView',\r\n        'DriversView',\r\n        'DriverView',\r\n        'PhotosView',\r\n        'TbdView',\r\n        'BaseView',\r\n        'Menu",2265861,34,"getParameterB",1343807,33,"name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\r\n        var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\r\n            results = regex.exec(location.search);\r\n        return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\r\n    }",2265888,37,"Ext.fly('appLoadingIndicator').destroy();\r\n        var homescreen = this.getParameterByName('homescreen');\r\n        if (homescreen != 'true') {\r\n            //alert('NOT running from home screen');\r\n",1011136,48,"{\r\n                    xtype: 'startview",1057776,35,689264,34,"//alert('running from home screen');\r\n    ",2265917,142,"    Ext.Viewport.setMenu(Ext.create('PenskeTouch.view.MenuView', {}), {\r\n                side: $L.menu,\r\n                reveal",1545006,37,2266414,32,"    {\r\n    ",2266449,49,1100796,47,"xtype: 'agendaview'",1256621,61,"xtype: 'adminview'",1256621,61,"xtype: 'sponsorsview'",1256621,61,"xtype: 'localguideview'",1256621,61,"xtype: 'driversview'",1256621,61,"xtype: 'driverview'",1256621,61,"xtype: 'photosview'",1256621,61,"xtype: 'tbdview",1057776,35,");\r\n        }",2266512,323]